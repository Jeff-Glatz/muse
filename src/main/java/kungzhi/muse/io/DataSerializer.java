// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Muse_v2.proto

package kungzhi.muse.io;

public final class DataSerializer {
    private DataSerializer() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
        registry.add(kungzhi.muse.io.DataSerializer.EEG.museData);
        registry.add(kungzhi.muse.io.DataSerializer.MuseQuantization.museData);
        registry.add(kungzhi.muse.io.DataSerializer.Accelerometer.museData);
        registry.add(kungzhi.muse.io.DataSerializer.Gyro.museData);
        registry.add(kungzhi.muse.io.DataSerializer.Annotation.museData);
        registry.add(kungzhi.muse.io.DataSerializer.Battery.museData);
        registry.add(kungzhi.muse.io.DataSerializer.MuseVersion.museData);
        registry.add(kungzhi.muse.io.DataSerializer.MuseConfig.museData);
        registry.add(kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.museData);
        registry.add(kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.museData);
        registry.add(kungzhi.muse.io.DataSerializer.ComputingDevice.museData);
        registry.add(kungzhi.muse.io.DataSerializer.DSP.museData);
        registry.add(kungzhi.muse.io.DataSerializer.MuseElement.museData);
    }

    /**
     * Protobuf enum {@code interaxon.muse_data.HeadLocations}
     */
    public enum HeadLocations
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <pre>
         * All head locations http://www.bem.fi/book/13/13.htm#03
         * </pre>
         * <p>
         * <code>NZ = 1;</code>
         */
        NZ(1),
        /**
         * <code>FP1 = 2;</code>
         */
        FP1(2),
        /**
         * <code>FPZ = 3;</code>
         */
        FPZ(3),
        /**
         * <code>FP2 = 4;</code>
         */
        FP2(4),
        /**
         * <code>AF7 = 5;</code>
         */
        AF7(5),
        /**
         * <code>AF3 = 6;</code>
         */
        AF3(6),
        /**
         * <code>AFZ = 7;</code>
         */
        AFZ(7),
        /**
         * <code>AF4 = 8;</code>
         */
        AF4(8),
        /**
         * <code>AF8 = 9;</code>
         */
        AF8(9),
        /**
         * <code>F9 = 10;</code>
         */
        F9(10),
        /**
         * <code>F7 = 11;</code>
         */
        F7(11),
        /**
         * <code>F5 = 12;</code>
         */
        F5(12),
        /**
         * <code>F3 = 13;</code>
         */
        F3(13),
        /**
         * <code>F1 = 14;</code>
         */
        F1(14),
        /**
         * <code>FZ = 15;</code>
         */
        FZ(15),
        /**
         * <code>F2 = 16;</code>
         */
        F2(16),
        /**
         * <code>F4 = 17;</code>
         */
        F4(17),
        /**
         * <code>F6 = 18;</code>
         */
        F6(18),
        /**
         * <code>F8 = 19;</code>
         */
        F8(19),
        /**
         * <code>F10 = 20;</code>
         */
        F10(20),
        /**
         * <code>FT9 = 21;</code>
         */
        FT9(21),
        /**
         * <code>FT7 = 22;</code>
         */
        FT7(22),
        /**
         * <code>FC5 = 23;</code>
         */
        FC5(23),
        /**
         * <code>FC3 = 24;</code>
         */
        FC3(24),
        /**
         * <code>FC1 = 25;</code>
         */
        FC1(25),
        /**
         * <code>FCZ = 26;</code>
         */
        FCZ(26),
        /**
         * <code>FC2 = 27;</code>
         */
        FC2(27),
        /**
         * <code>FC4 = 28;</code>
         */
        FC4(28),
        /**
         * <code>FC6 = 29;</code>
         */
        FC6(29),
        /**
         * <code>FT8 = 30;</code>
         */
        FT8(30),
        /**
         * <code>FT10 = 31;</code>
         */
        FT10(31),
        /**
         * <code>A1 = 32;</code>
         */
        A1(32),
        /**
         * <code>T9 = 33;</code>
         */
        T9(33),
        /**
         * <code>T7 = 34;</code>
         */
        T7(34),
        /**
         * <code>C5 = 35;</code>
         */
        C5(35),
        /**
         * <code>C3 = 36;</code>
         */
        C3(36),
        /**
         * <code>C1 = 37;</code>
         */
        C1(37),
        /**
         * <code>CZ = 38;</code>
         */
        CZ(38),
        /**
         * <code>C2 = 39;</code>
         */
        C2(39),
        /**
         * <code>C4 = 40;</code>
         */
        C4(40),
        /**
         * <code>C6 = 41;</code>
         */
        C6(41),
        /**
         * <code>T8 = 42;</code>
         */
        T8(42),
        /**
         * <code>T10 = 43;</code>
         */
        T10(43),
        /**
         * <code>A2 = 44;</code>
         */
        A2(44),
        /**
         * <code>TP9 = 45;</code>
         */
        TP9(45),
        /**
         * <code>TP7 = 46;</code>
         */
        TP7(46),
        /**
         * <code>CP5 = 47;</code>
         */
        CP5(47),
        /**
         * <code>CP3 = 48;</code>
         */
        CP3(48),
        /**
         * <code>CP1 = 49;</code>
         */
        CP1(49),
        /**
         * <code>CPZ = 50;</code>
         */
        CPZ(50),
        /**
         * <code>CP2 = 51;</code>
         */
        CP2(51),
        /**
         * <code>CP4 = 52;</code>
         */
        CP4(52),
        /**
         * <code>CP6 = 53;</code>
         */
        CP6(53),
        /**
         * <code>TP8 = 54;</code>
         */
        TP8(54),
        /**
         * <code>TP10 = 55;</code>
         */
        TP10(55),
        /**
         * <code>P9 = 56;</code>
         */
        P9(56),
        /**
         * <code>P7 = 57;</code>
         */
        P7(57),
        /**
         * <code>P5 = 58;</code>
         */
        P5(58),
        /**
         * <code>P3 = 59;</code>
         */
        P3(59),
        /**
         * <code>P1 = 60;</code>
         */
        P1(60),
        /**
         * <code>PZ = 61;</code>
         */
        PZ(61),
        /**
         * <code>P2 = 62;</code>
         */
        P2(62),
        /**
         * <code>P4 = 63;</code>
         */
        P4(63),
        /**
         * <code>P6 = 64;</code>
         */
        P6(64),
        /**
         * <code>P8 = 65;</code>
         */
        P8(65),
        /**
         * <code>P10 = 66;</code>
         */
        P10(66),
        /**
         * <code>PO7 = 67;</code>
         */
        PO7(67),
        /**
         * <code>PO3 = 68;</code>
         */
        PO3(68),
        /**
         * <code>POZ = 69;</code>
         */
        POZ(69),
        /**
         * <code>PO4 = 70;</code>
         */
        PO4(70),
        /**
         * <code>PO8 = 71;</code>
         */
        PO8(71),
        /**
         * <code>O1 = 72;</code>
         */
        O1(72),
        /**
         * <code>OZ = 73;</code>
         */
        OZ(73),
        /**
         * <code>O2 = 74;</code>
         */
        O2(74),
        /**
         * <code>IZ = 75;</code>
         */
        IZ(75),
        /**
         * <code>AUX1 = 76;</code>
         */
        AUX1(76),
        /**
         * <code>AUX2 = 77;</code>
         */
        AUX2(77),
        /**
         * <code>AUX3 = 78;</code>
         */
        AUX3(78),
        /**
         * <code>AUX4 = 79;</code>
         */
        AUX4(79),
        /**
         * <code>MUSE_LEFT_AUX = 80;</code>
         */
        MUSE_LEFT_AUX(80),
        /**
         * <code>MUSE_RIGHT_AUX = 81;</code>
         */
        MUSE_RIGHT_AUX(81),;

        /**
         * <pre>
         * All head locations http://www.bem.fi/book/13/13.htm#03
         * </pre>
         * <p>
         * <code>NZ = 1;</code>
         */
        public static final int NZ_VALUE = 1;
        /**
         * <code>FP1 = 2;</code>
         */
        public static final int FP1_VALUE = 2;
        /**
         * <code>FPZ = 3;</code>
         */
        public static final int FPZ_VALUE = 3;
        /**
         * <code>FP2 = 4;</code>
         */
        public static final int FP2_VALUE = 4;
        /**
         * <code>AF7 = 5;</code>
         */
        public static final int AF7_VALUE = 5;
        /**
         * <code>AF3 = 6;</code>
         */
        public static final int AF3_VALUE = 6;
        /**
         * <code>AFZ = 7;</code>
         */
        public static final int AFZ_VALUE = 7;
        /**
         * <code>AF4 = 8;</code>
         */
        public static final int AF4_VALUE = 8;
        /**
         * <code>AF8 = 9;</code>
         */
        public static final int AF8_VALUE = 9;
        /**
         * <code>F9 = 10;</code>
         */
        public static final int F9_VALUE = 10;
        /**
         * <code>F7 = 11;</code>
         */
        public static final int F7_VALUE = 11;
        /**
         * <code>F5 = 12;</code>
         */
        public static final int F5_VALUE = 12;
        /**
         * <code>F3 = 13;</code>
         */
        public static final int F3_VALUE = 13;
        /**
         * <code>F1 = 14;</code>
         */
        public static final int F1_VALUE = 14;
        /**
         * <code>FZ = 15;</code>
         */
        public static final int FZ_VALUE = 15;
        /**
         * <code>F2 = 16;</code>
         */
        public static final int F2_VALUE = 16;
        /**
         * <code>F4 = 17;</code>
         */
        public static final int F4_VALUE = 17;
        /**
         * <code>F6 = 18;</code>
         */
        public static final int F6_VALUE = 18;
        /**
         * <code>F8 = 19;</code>
         */
        public static final int F8_VALUE = 19;
        /**
         * <code>F10 = 20;</code>
         */
        public static final int F10_VALUE = 20;
        /**
         * <code>FT9 = 21;</code>
         */
        public static final int FT9_VALUE = 21;
        /**
         * <code>FT7 = 22;</code>
         */
        public static final int FT7_VALUE = 22;
        /**
         * <code>FC5 = 23;</code>
         */
        public static final int FC5_VALUE = 23;
        /**
         * <code>FC3 = 24;</code>
         */
        public static final int FC3_VALUE = 24;
        /**
         * <code>FC1 = 25;</code>
         */
        public static final int FC1_VALUE = 25;
        /**
         * <code>FCZ = 26;</code>
         */
        public static final int FCZ_VALUE = 26;
        /**
         * <code>FC2 = 27;</code>
         */
        public static final int FC2_VALUE = 27;
        /**
         * <code>FC4 = 28;</code>
         */
        public static final int FC4_VALUE = 28;
        /**
         * <code>FC6 = 29;</code>
         */
        public static final int FC6_VALUE = 29;
        /**
         * <code>FT8 = 30;</code>
         */
        public static final int FT8_VALUE = 30;
        /**
         * <code>FT10 = 31;</code>
         */
        public static final int FT10_VALUE = 31;
        /**
         * <code>A1 = 32;</code>
         */
        public static final int A1_VALUE = 32;
        /**
         * <code>T9 = 33;</code>
         */
        public static final int T9_VALUE = 33;
        /**
         * <code>T7 = 34;</code>
         */
        public static final int T7_VALUE = 34;
        /**
         * <code>C5 = 35;</code>
         */
        public static final int C5_VALUE = 35;
        /**
         * <code>C3 = 36;</code>
         */
        public static final int C3_VALUE = 36;
        /**
         * <code>C1 = 37;</code>
         */
        public static final int C1_VALUE = 37;
        /**
         * <code>CZ = 38;</code>
         */
        public static final int CZ_VALUE = 38;
        /**
         * <code>C2 = 39;</code>
         */
        public static final int C2_VALUE = 39;
        /**
         * <code>C4 = 40;</code>
         */
        public static final int C4_VALUE = 40;
        /**
         * <code>C6 = 41;</code>
         */
        public static final int C6_VALUE = 41;
        /**
         * <code>T8 = 42;</code>
         */
        public static final int T8_VALUE = 42;
        /**
         * <code>T10 = 43;</code>
         */
        public static final int T10_VALUE = 43;
        /**
         * <code>A2 = 44;</code>
         */
        public static final int A2_VALUE = 44;
        /**
         * <code>TP9 = 45;</code>
         */
        public static final int TP9_VALUE = 45;
        /**
         * <code>TP7 = 46;</code>
         */
        public static final int TP7_VALUE = 46;
        /**
         * <code>CP5 = 47;</code>
         */
        public static final int CP5_VALUE = 47;
        /**
         * <code>CP3 = 48;</code>
         */
        public static final int CP3_VALUE = 48;
        /**
         * <code>CP1 = 49;</code>
         */
        public static final int CP1_VALUE = 49;
        /**
         * <code>CPZ = 50;</code>
         */
        public static final int CPZ_VALUE = 50;
        /**
         * <code>CP2 = 51;</code>
         */
        public static final int CP2_VALUE = 51;
        /**
         * <code>CP4 = 52;</code>
         */
        public static final int CP4_VALUE = 52;
        /**
         * <code>CP6 = 53;</code>
         */
        public static final int CP6_VALUE = 53;
        /**
         * <code>TP8 = 54;</code>
         */
        public static final int TP8_VALUE = 54;
        /**
         * <code>TP10 = 55;</code>
         */
        public static final int TP10_VALUE = 55;
        /**
         * <code>P9 = 56;</code>
         */
        public static final int P9_VALUE = 56;
        /**
         * <code>P7 = 57;</code>
         */
        public static final int P7_VALUE = 57;
        /**
         * <code>P5 = 58;</code>
         */
        public static final int P5_VALUE = 58;
        /**
         * <code>P3 = 59;</code>
         */
        public static final int P3_VALUE = 59;
        /**
         * <code>P1 = 60;</code>
         */
        public static final int P1_VALUE = 60;
        /**
         * <code>PZ = 61;</code>
         */
        public static final int PZ_VALUE = 61;
        /**
         * <code>P2 = 62;</code>
         */
        public static final int P2_VALUE = 62;
        /**
         * <code>P4 = 63;</code>
         */
        public static final int P4_VALUE = 63;
        /**
         * <code>P6 = 64;</code>
         */
        public static final int P6_VALUE = 64;
        /**
         * <code>P8 = 65;</code>
         */
        public static final int P8_VALUE = 65;
        /**
         * <code>P10 = 66;</code>
         */
        public static final int P10_VALUE = 66;
        /**
         * <code>PO7 = 67;</code>
         */
        public static final int PO7_VALUE = 67;
        /**
         * <code>PO3 = 68;</code>
         */
        public static final int PO3_VALUE = 68;
        /**
         * <code>POZ = 69;</code>
         */
        public static final int POZ_VALUE = 69;
        /**
         * <code>PO4 = 70;</code>
         */
        public static final int PO4_VALUE = 70;
        /**
         * <code>PO8 = 71;</code>
         */
        public static final int PO8_VALUE = 71;
        /**
         * <code>O1 = 72;</code>
         */
        public static final int O1_VALUE = 72;
        /**
         * <code>OZ = 73;</code>
         */
        public static final int OZ_VALUE = 73;
        /**
         * <code>O2 = 74;</code>
         */
        public static final int O2_VALUE = 74;
        /**
         * <code>IZ = 75;</code>
         */
        public static final int IZ_VALUE = 75;
        /**
         * <code>AUX1 = 76;</code>
         */
        public static final int AUX1_VALUE = 76;
        /**
         * <code>AUX2 = 77;</code>
         */
        public static final int AUX2_VALUE = 77;
        /**
         * <code>AUX3 = 78;</code>
         */
        public static final int AUX3_VALUE = 78;
        /**
         * <code>AUX4 = 79;</code>
         */
        public static final int AUX4_VALUE = 79;
        /**
         * <code>MUSE_LEFT_AUX = 80;</code>
         */
        public static final int MUSE_LEFT_AUX_VALUE = 80;
        /**
         * <code>MUSE_RIGHT_AUX = 81;</code>
         */
        public static final int MUSE_RIGHT_AUX_VALUE = 81;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static HeadLocations valueOf(int value) {
            return forNumber(value);
        }

        public static HeadLocations forNumber(int value) {
            switch (value) {
                case 1:
                    return NZ;
                case 2:
                    return FP1;
                case 3:
                    return FPZ;
                case 4:
                    return FP2;
                case 5:
                    return AF7;
                case 6:
                    return AF3;
                case 7:
                    return AFZ;
                case 8:
                    return AF4;
                case 9:
                    return AF8;
                case 10:
                    return F9;
                case 11:
                    return F7;
                case 12:
                    return F5;
                case 13:
                    return F3;
                case 14:
                    return F1;
                case 15:
                    return FZ;
                case 16:
                    return F2;
                case 17:
                    return F4;
                case 18:
                    return F6;
                case 19:
                    return F8;
                case 20:
                    return F10;
                case 21:
                    return FT9;
                case 22:
                    return FT7;
                case 23:
                    return FC5;
                case 24:
                    return FC3;
                case 25:
                    return FC1;
                case 26:
                    return FCZ;
                case 27:
                    return FC2;
                case 28:
                    return FC4;
                case 29:
                    return FC6;
                case 30:
                    return FT8;
                case 31:
                    return FT10;
                case 32:
                    return A1;
                case 33:
                    return T9;
                case 34:
                    return T7;
                case 35:
                    return C5;
                case 36:
                    return C3;
                case 37:
                    return C1;
                case 38:
                    return CZ;
                case 39:
                    return C2;
                case 40:
                    return C4;
                case 41:
                    return C6;
                case 42:
                    return T8;
                case 43:
                    return T10;
                case 44:
                    return A2;
                case 45:
                    return TP9;
                case 46:
                    return TP7;
                case 47:
                    return CP5;
                case 48:
                    return CP3;
                case 49:
                    return CP1;
                case 50:
                    return CPZ;
                case 51:
                    return CP2;
                case 52:
                    return CP4;
                case 53:
                    return CP6;
                case 54:
                    return TP8;
                case 55:
                    return TP10;
                case 56:
                    return P9;
                case 57:
                    return P7;
                case 58:
                    return P5;
                case 59:
                    return P3;
                case 60:
                    return P1;
                case 61:
                    return PZ;
                case 62:
                    return P2;
                case 63:
                    return P4;
                case 64:
                    return P6;
                case 65:
                    return P8;
                case 66:
                    return P10;
                case 67:
                    return PO7;
                case 68:
                    return PO3;
                case 69:
                    return POZ;
                case 70:
                    return PO4;
                case 71:
                    return PO8;
                case 72:
                    return O1;
                case 73:
                    return OZ;
                case 74:
                    return O2;
                case 75:
                    return IZ;
                case 76:
                    return AUX1;
                case 77:
                    return AUX2;
                case 78:
                    return AUX3;
                case 79:
                    return AUX4;
                case 80:
                    return MUSE_LEFT_AUX;
                case 81:
                    return MUSE_RIGHT_AUX;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<HeadLocations>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                HeadLocations> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<HeadLocations>() {
                    public HeadLocations findValueByNumber(int number) {
                        return HeadLocations.forNumber(number);
                    }
                };

        private final int value;

        private HeadLocations(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:interaxon.muse_data.HeadLocations)
    }

    /**
     * Protobuf enum {@code interaxon.muse_data.EEGUnits}
     */
    public enum EEGUnits
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>EEG_MICROVOLTS = 1;</code>
         */
        EEG_MICROVOLTS(1),
        /**
         * <code>EEG_MUSE1_RAW = 2;</code>
         */
        EEG_MUSE1_RAW(2),;

        /**
         * <code>EEG_MICROVOLTS = 1;</code>
         */
        public static final int EEG_MICROVOLTS_VALUE = 1;
        /**
         * <code>EEG_MUSE1_RAW = 2;</code>
         */
        public static final int EEG_MUSE1_RAW_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static EEGUnits valueOf(int value) {
            return forNumber(value);
        }

        public static EEGUnits forNumber(int value) {
            switch (value) {
                case 1:
                    return EEG_MICROVOLTS;
                case 2:
                    return EEG_MUSE1_RAW;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<EEGUnits>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                EEGUnits> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<EEGUnits>() {
                    public EEGUnits findValueByNumber(int number) {
                        return EEGUnits.forNumber(number);
                    }
                };

        private final int value;

        private EEGUnits(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:interaxon.muse_data.EEGUnits)
    }

    /**
     * Protobuf enum {@code interaxon.muse_data.AccelerometerUnits}
     */
    public enum AccelerometerUnits
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>ACC_GFORCE = 1;</code>
         */
        ACC_GFORCE(1),
        /**
         * <code>ACC_MUSE1_RAW = 2;</code>
         */
        ACC_MUSE1_RAW(2),;

        /**
         * <code>ACC_GFORCE = 1;</code>
         */
        public static final int ACC_GFORCE_VALUE = 1;
        /**
         * <code>ACC_MUSE1_RAW = 2;</code>
         */
        public static final int ACC_MUSE1_RAW_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static AccelerometerUnits valueOf(int value) {
            return forNumber(value);
        }

        public static AccelerometerUnits forNumber(int value) {
            switch (value) {
                case 1:
                    return ACC_GFORCE;
                case 2:
                    return ACC_MUSE1_RAW;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<AccelerometerUnits>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                AccelerometerUnits> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<AccelerometerUnits>() {
                    public AccelerometerUnits findValueByNumber(int number) {
                        return AccelerometerUnits.forNumber(number);
                    }
                };

        private final int value;

        private AccelerometerUnits(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:interaxon.muse_data.AccelerometerUnits)
    }

    /**
     * Protobuf enum {@code interaxon.muse_data.MuseElementType}
     */
    public enum MuseElementType
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>STRING_TYPE = 0;</code>
         */
        STRING_TYPE(0),
        /**
         * <code>LOW_FREQ_ABSOLUTE = 1;</code>
         */
        LOW_FREQ_ABSOLUTE(1),
        /**
         * <code>DELTA_ABSOLUTE = 2;</code>
         */
        DELTA_ABSOLUTE(2),
        /**
         * <code>THETA_ABSOLUTE = 3;</code>
         */
        THETA_ABSOLUTE(3),
        /**
         * <code>ALPHA_ABSOLUTE = 4;</code>
         */
        ALPHA_ABSOLUTE(4),
        /**
         * <code>BETA_ABSOLUTE = 5;</code>
         */
        BETA_ABSOLUTE(5),
        /**
         * <code>GAMMA_ABSOLUTE = 6;</code>
         */
        GAMMA_ABSOLUTE(6),
        /**
         * <code>LOW_FREQ_RELATIVE = 7;</code>
         */
        LOW_FREQ_RELATIVE(7),
        /**
         * <code>DELTA_RELATIVE = 8;</code>
         */
        DELTA_RELATIVE(8),
        /**
         * <code>THETA_RELATIVE = 9;</code>
         */
        THETA_RELATIVE(9),
        /**
         * <code>ALPHA_RELATIVE = 10;</code>
         */
        ALPHA_RELATIVE(10),
        /**
         * <code>BETA_RELATIVE = 11;</code>
         */
        BETA_RELATIVE(11),
        /**
         * <code>GAMMA_RELATIVE = 12;</code>
         */
        GAMMA_RELATIVE(12),
        /**
         * <code>LOW_FREQ_SESSION_SCORE = 13;</code>
         */
        LOW_FREQ_SESSION_SCORE(13),
        /**
         * <code>DELTA_SESSION_SCORE = 14;</code>
         */
        DELTA_SESSION_SCORE(14),
        /**
         * <code>THETA_SESSION_SCORE = 15;</code>
         */
        THETA_SESSION_SCORE(15),
        /**
         * <code>ALPHA_SESSION_SCORE = 16;</code>
         */
        ALPHA_SESSION_SCORE(16),
        /**
         * <code>BETA_SESSION_SCORE = 17;</code>
         */
        BETA_SESSION_SCORE(17),
        /**
         * <code>GAMMA_SESSION_SCORE = 18;</code>
         */
        GAMMA_SESSION_SCORE(18),
        /**
         * <code>TOUCHING_FOREHEAD = 19;</code>
         */
        TOUCHING_FOREHEAD(19),
        /**
         * <code>HSI = 20;</code>
         */
        HSI(20),
        /**
         * <code>IS_GOOD = 21;</code>
         */
        IS_GOOD(21),
        /**
         * <code>BLINK = 22;</code>
         */
        BLINK(22),
        /**
         * <code>JAW_CLENCH = 23;</code>
         */
        JAW_CLENCH(23),;

        /**
         * <code>STRING_TYPE = 0;</code>
         */
        public static final int STRING_TYPE_VALUE = 0;
        /**
         * <code>LOW_FREQ_ABSOLUTE = 1;</code>
         */
        public static final int LOW_FREQ_ABSOLUTE_VALUE = 1;
        /**
         * <code>DELTA_ABSOLUTE = 2;</code>
         */
        public static final int DELTA_ABSOLUTE_VALUE = 2;
        /**
         * <code>THETA_ABSOLUTE = 3;</code>
         */
        public static final int THETA_ABSOLUTE_VALUE = 3;
        /**
         * <code>ALPHA_ABSOLUTE = 4;</code>
         */
        public static final int ALPHA_ABSOLUTE_VALUE = 4;
        /**
         * <code>BETA_ABSOLUTE = 5;</code>
         */
        public static final int BETA_ABSOLUTE_VALUE = 5;
        /**
         * <code>GAMMA_ABSOLUTE = 6;</code>
         */
        public static final int GAMMA_ABSOLUTE_VALUE = 6;
        /**
         * <code>LOW_FREQ_RELATIVE = 7;</code>
         */
        public static final int LOW_FREQ_RELATIVE_VALUE = 7;
        /**
         * <code>DELTA_RELATIVE = 8;</code>
         */
        public static final int DELTA_RELATIVE_VALUE = 8;
        /**
         * <code>THETA_RELATIVE = 9;</code>
         */
        public static final int THETA_RELATIVE_VALUE = 9;
        /**
         * <code>ALPHA_RELATIVE = 10;</code>
         */
        public static final int ALPHA_RELATIVE_VALUE = 10;
        /**
         * <code>BETA_RELATIVE = 11;</code>
         */
        public static final int BETA_RELATIVE_VALUE = 11;
        /**
         * <code>GAMMA_RELATIVE = 12;</code>
         */
        public static final int GAMMA_RELATIVE_VALUE = 12;
        /**
         * <code>LOW_FREQ_SESSION_SCORE = 13;</code>
         */
        public static final int LOW_FREQ_SESSION_SCORE_VALUE = 13;
        /**
         * <code>DELTA_SESSION_SCORE = 14;</code>
         */
        public static final int DELTA_SESSION_SCORE_VALUE = 14;
        /**
         * <code>THETA_SESSION_SCORE = 15;</code>
         */
        public static final int THETA_SESSION_SCORE_VALUE = 15;
        /**
         * <code>ALPHA_SESSION_SCORE = 16;</code>
         */
        public static final int ALPHA_SESSION_SCORE_VALUE = 16;
        /**
         * <code>BETA_SESSION_SCORE = 17;</code>
         */
        public static final int BETA_SESSION_SCORE_VALUE = 17;
        /**
         * <code>GAMMA_SESSION_SCORE = 18;</code>
         */
        public static final int GAMMA_SESSION_SCORE_VALUE = 18;
        /**
         * <code>TOUCHING_FOREHEAD = 19;</code>
         */
        public static final int TOUCHING_FOREHEAD_VALUE = 19;
        /**
         * <code>HSI = 20;</code>
         */
        public static final int HSI_VALUE = 20;
        /**
         * <code>IS_GOOD = 21;</code>
         */
        public static final int IS_GOOD_VALUE = 21;
        /**
         * <code>BLINK = 22;</code>
         */
        public static final int BLINK_VALUE = 22;
        /**
         * <code>JAW_CLENCH = 23;</code>
         */
        public static final int JAW_CLENCH_VALUE = 23;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static MuseElementType valueOf(int value) {
            return forNumber(value);
        }

        public static MuseElementType forNumber(int value) {
            switch (value) {
                case 0:
                    return STRING_TYPE;
                case 1:
                    return LOW_FREQ_ABSOLUTE;
                case 2:
                    return DELTA_ABSOLUTE;
                case 3:
                    return THETA_ABSOLUTE;
                case 4:
                    return ALPHA_ABSOLUTE;
                case 5:
                    return BETA_ABSOLUTE;
                case 6:
                    return GAMMA_ABSOLUTE;
                case 7:
                    return LOW_FREQ_RELATIVE;
                case 8:
                    return DELTA_RELATIVE;
                case 9:
                    return THETA_RELATIVE;
                case 10:
                    return ALPHA_RELATIVE;
                case 11:
                    return BETA_RELATIVE;
                case 12:
                    return GAMMA_RELATIVE;
                case 13:
                    return LOW_FREQ_SESSION_SCORE;
                case 14:
                    return DELTA_SESSION_SCORE;
                case 15:
                    return THETA_SESSION_SCORE;
                case 16:
                    return ALPHA_SESSION_SCORE;
                case 17:
                    return BETA_SESSION_SCORE;
                case 18:
                    return GAMMA_SESSION_SCORE;
                case 19:
                    return TOUCHING_FOREHEAD;
                case 20:
                    return HSI;
                case 21:
                    return IS_GOOD;
                case 22:
                    return BLINK;
                case 23:
                    return JAW_CLENCH;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<MuseElementType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                MuseElementType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<MuseElementType>() {
                    public MuseElementType findValueByNumber(int number) {
                        return MuseElementType.forNumber(number);
                    }
                };

        private final int value;

        private MuseElementType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:interaxon.muse_data.MuseElementType)
    }

    public interface MuseDataCollectionOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseDataCollection)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        java.util.List<kungzhi.muse.io.DataSerializer.MuseData>
        getCollectionList();

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        kungzhi.muse.io.DataSerializer.MuseData getCollection(int index);

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        int getCollectionCount();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.MuseDataCollection}
     */
    public static final class MuseDataCollection extends
            com.google.protobuf.GeneratedMessageLite<
                    MuseDataCollection, MuseDataCollection.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseDataCollection)
            MuseDataCollectionOrBuilder {
        private MuseDataCollection() {
            collection_ = emptyProtobufList();
        }

        public static final int COLLECTION_FIELD_NUMBER = 1;
        private com.google.protobuf.Internal.ProtobufList<kungzhi.muse.io.DataSerializer.MuseData> collection_;

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        public java.util.List<kungzhi.muse.io.DataSerializer.MuseData> getCollectionList() {
            return collection_;
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        public java.util.List<? extends kungzhi.muse.io.DataSerializer.MuseDataOrBuilder>
        getCollectionOrBuilderList() {
            return collection_;
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        public int getCollectionCount() {
            return collection_.size();
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        public kungzhi.muse.io.DataSerializer.MuseData getCollection(int index) {
            return collection_.get(index);
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        public kungzhi.muse.io.DataSerializer.MuseDataOrBuilder getCollectionOrBuilder(
                int index) {
            return collection_.get(index);
        }

        private void ensureCollectionIsMutable() {
            if (!collection_.isModifiable()) {
                collection_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(collection_);
            }
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void setCollection(
                int index, kungzhi.muse.io.DataSerializer.MuseData value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCollectionIsMutable();
            collection_.set(index, value);
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void setCollection(
                int index, kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
            ensureCollectionIsMutable();
            collection_.set(index, builderForValue.build());
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void addCollection(kungzhi.muse.io.DataSerializer.MuseData value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCollectionIsMutable();
            collection_.add(value);
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void addCollection(
                int index, kungzhi.muse.io.DataSerializer.MuseData value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCollectionIsMutable();
            collection_.add(index, value);
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void addCollection(
                kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
            ensureCollectionIsMutable();
            collection_.add(builderForValue.build());
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void addCollection(
                int index, kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
            ensureCollectionIsMutable();
            collection_.add(index, builderForValue.build());
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void addAllCollection(
                java.lang.Iterable<? extends kungzhi.muse.io.DataSerializer.MuseData> values) {
            ensureCollectionIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, collection_);
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void clearCollection() {
            collection_ = emptyProtobufList();
        }

        /**
         * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
         */
        private void removeCollection(int index) {
            ensureCollectionIsMutable();
            collection_.remove(index);
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < collection_.size(); i++) {
                output.writeMessage(1, collection_.get(i));
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < collection_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, collection_.get(i));
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseDataCollection prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.MuseDataCollection}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.MuseDataCollection, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseDataCollection)
                kungzhi.muse.io.DataSerializer.MuseDataCollectionOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseDataCollection.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public java.util.List<kungzhi.muse.io.DataSerializer.MuseData> getCollectionList() {
                return java.util.Collections.unmodifiableList(
                        instance.getCollectionList());
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public int getCollectionCount() {
                return instance.getCollectionCount();
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public kungzhi.muse.io.DataSerializer.MuseData getCollection(int index) {
                return instance.getCollection(index);
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder setCollection(
                    int index, kungzhi.muse.io.DataSerializer.MuseData value) {
                copyOnWrite();
                instance.setCollection(index, value);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder setCollection(
                    int index, kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
                copyOnWrite();
                instance.setCollection(index, builderForValue);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder addCollection(kungzhi.muse.io.DataSerializer.MuseData value) {
                copyOnWrite();
                instance.addCollection(value);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder addCollection(
                    int index, kungzhi.muse.io.DataSerializer.MuseData value) {
                copyOnWrite();
                instance.addCollection(index, value);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder addCollection(
                    kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
                copyOnWrite();
                instance.addCollection(builderForValue);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder addCollection(
                    int index, kungzhi.muse.io.DataSerializer.MuseData.Builder builderForValue) {
                copyOnWrite();
                instance.addCollection(index, builderForValue);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder addAllCollection(
                    java.lang.Iterable<? extends kungzhi.muse.io.DataSerializer.MuseData> values) {
                copyOnWrite();
                instance.addAllCollection(values);
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder clearCollection() {
                copyOnWrite();
                instance.clearCollection();
                return this;
            }

            /**
             * <code>repeated .interaxon.muse_data.MuseData collection = 1;</code>
             */
            public Builder removeCollection(int index) {
                copyOnWrite();
                instance.removeCollection(index);
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseDataCollection)
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseDataCollection();
                }
                case IS_INITIALIZED: {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized == 1) return DEFAULT_INSTANCE;
                    if (isInitialized == 0) return null;

                    boolean shouldMemoize = ((Boolean) arg0).booleanValue();
                    for (int i = 0; i < getCollectionCount(); i++) {
                        if (!getCollection(i).isInitialized()) {
                            if (shouldMemoize) {
                                memoizedIsInitialized = 0;
                            }
                            return null;
                        }
                    }
                    if (shouldMemoize) memoizedIsInitialized = 1;
                    return DEFAULT_INSTANCE;

                }
                case MAKE_IMMUTABLE: {
                    collection_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseDataCollection other = (kungzhi.muse.io.DataSerializer.MuseDataCollection) arg1;
                    collection_ = visitor.visitList(collection_, other.collection_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    if (!collection_.isModifiable()) {
                                        collection_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(collection_);
                                    }
                                    collection_.add(
                                            input.readMessage(kungzhi.muse.io.DataSerializer.MuseData.parser(), extensionRegistry));
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseDataCollection.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseDataCollection)
        private static final kungzhi.muse.io.DataSerializer.MuseDataCollection DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseDataCollection();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseDataCollection getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseDataCollection> PARSER;

        public static com.google.protobuf.Parser<MuseDataCollection> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }
    }

    public interface MuseDataOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseData)
            com.google.protobuf.GeneratedMessageLite.
                    ExtendableMessageOrBuilder<
                    MuseData, MuseData.Builder> {

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        boolean hasTimestamp();

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        double getTimestamp();

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        boolean hasDatatype();

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        kungzhi.muse.io.DataSerializer.MuseData.Datatype getDatatype();

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        boolean hasConfigId();

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        long getConfigId();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.MuseData}
     */
    public static final class MuseData extends
            com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
                    MuseData, MuseData.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseData)
            MuseDataOrBuilder {
        private MuseData() {
        }

        /**
         * <pre>
         * This allows us to identify the extension osc type.
         * </pre>
         * <p>
         * Protobuf enum {@code interaxon.muse_data.MuseData.Datatype}
         */
        public enum Datatype
                implements com.google.protobuf.Internal.EnumLite {
            /**
             * <code>EEG = 0;</code>
             */
            EEG(0),
            /**
             * <code>QUANT = 1;</code>
             */
            QUANT(1),
            /**
             * <code>ACCEL = 2;</code>
             */
            ACCEL(2),
            /**
             * <code>BATTERY = 3;</code>
             */
            BATTERY(3),
            /**
             * <code>VERSION = 4;</code>
             */
            VERSION(4),
            /**
             * <code>CONFIG = 5;</code>
             */
            CONFIG(5),
            /**
             * <code>ANNOTATION = 6;</code>
             */
            ANNOTATION(6),
            /**
             * <code>HISTOGRAM = 7;</code>
             */
            HISTOGRAM(7),
            /**
             * <code>ALGVALUE = 8;</code>
             */
            ALGVALUE(8),
            /**
             * <code>DSP = 9;</code>
             */
            DSP(9),
            /**
             * <code>COMPUTING_DEVICE = 10;</code>
             */
            COMPUTING_DEVICE(10),
            /**
             * <code>EEG_DROPPED = 11;</code>
             */
            EEG_DROPPED(11),
            /**
             * <code>ACC_DROPPED = 12;</code>
             */
            ACC_DROPPED(12),
            /**
             * <code>CALM_APP = 13;</code>
             */
            CALM_APP(13),
            /**
             * <code>CALM_ALG = 14;</code>
             */
            CALM_ALG(14),
            /**
             * <code>MUSE_ELEMENTS = 15;</code>
             */
            MUSE_ELEMENTS(15),
            /**
             * <code>GYRO = 16;</code>
             */
            GYRO(16),;

            /**
             * <code>EEG = 0;</code>
             */
            public static final int EEG_VALUE = 0;
            /**
             * <code>QUANT = 1;</code>
             */
            public static final int QUANT_VALUE = 1;
            /**
             * <code>ACCEL = 2;</code>
             */
            public static final int ACCEL_VALUE = 2;
            /**
             * <code>BATTERY = 3;</code>
             */
            public static final int BATTERY_VALUE = 3;
            /**
             * <code>VERSION = 4;</code>
             */
            public static final int VERSION_VALUE = 4;
            /**
             * <code>CONFIG = 5;</code>
             */
            public static final int CONFIG_VALUE = 5;
            /**
             * <code>ANNOTATION = 6;</code>
             */
            public static final int ANNOTATION_VALUE = 6;
            /**
             * <code>HISTOGRAM = 7;</code>
             */
            public static final int HISTOGRAM_VALUE = 7;
            /**
             * <code>ALGVALUE = 8;</code>
             */
            public static final int ALGVALUE_VALUE = 8;
            /**
             * <code>DSP = 9;</code>
             */
            public static final int DSP_VALUE = 9;
            /**
             * <code>COMPUTING_DEVICE = 10;</code>
             */
            public static final int COMPUTING_DEVICE_VALUE = 10;
            /**
             * <code>EEG_DROPPED = 11;</code>
             */
            public static final int EEG_DROPPED_VALUE = 11;
            /**
             * <code>ACC_DROPPED = 12;</code>
             */
            public static final int ACC_DROPPED_VALUE = 12;
            /**
             * <code>CALM_APP = 13;</code>
             */
            public static final int CALM_APP_VALUE = 13;
            /**
             * <code>CALM_ALG = 14;</code>
             */
            public static final int CALM_ALG_VALUE = 14;
            /**
             * <code>MUSE_ELEMENTS = 15;</code>
             */
            public static final int MUSE_ELEMENTS_VALUE = 15;
            /**
             * <code>GYRO = 16;</code>
             */
            public static final int GYRO_VALUE = 16;


            public final int getNumber() {
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static Datatype valueOf(int value) {
                return forNumber(value);
            }

            public static Datatype forNumber(int value) {
                switch (value) {
                    case 0:
                        return EEG;
                    case 1:
                        return QUANT;
                    case 2:
                        return ACCEL;
                    case 3:
                        return BATTERY;
                    case 4:
                        return VERSION;
                    case 5:
                        return CONFIG;
                    case 6:
                        return ANNOTATION;
                    case 7:
                        return HISTOGRAM;
                    case 8:
                        return ALGVALUE;
                    case 9:
                        return DSP;
                    case 10:
                        return COMPUTING_DEVICE;
                    case 11:
                        return EEG_DROPPED;
                    case 12:
                        return ACC_DROPPED;
                    case 13:
                        return CALM_APP;
                    case 14:
                        return CALM_ALG;
                    case 15:
                        return MUSE_ELEMENTS;
                    case 16:
                        return GYRO;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Datatype>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static final com.google.protobuf.Internal.EnumLiteMap<
                    Datatype> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Datatype>() {
                        public Datatype findValueByNumber(int number) {
                            return Datatype.forNumber(number);
                        }
                    };

            private final int value;

            private Datatype(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:interaxon.muse_data.MuseData.Datatype)
        }

        private int bitField0_;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private double timestamp_;

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        public boolean hasTimestamp() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        public double getTimestamp() {
            return timestamp_;
        }

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        private void setTimestamp(double value) {
            bitField0_ |= 0x00000001;
            timestamp_ = value;
        }

        /**
         * <pre>
         * The time that this event occurred. The precision is down to microseconds.
         * </pre>
         * <p>
         * <code>required double timestamp = 1;</code>
         */
        private void clearTimestamp() {
            bitField0_ = (bitField0_ & ~0x00000001);
            timestamp_ = 0D;
        }

        public static final int DATATYPE_FIELD_NUMBER = 2;
        private int datatype_;

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        public boolean hasDatatype() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        public kungzhi.muse.io.DataSerializer.MuseData.Datatype getDatatype() {
            kungzhi.muse.io.DataSerializer.MuseData.Datatype result = kungzhi.muse.io.DataSerializer.MuseData.Datatype.forNumber(datatype_);
            return result == null ? kungzhi.muse.io.DataSerializer.MuseData.Datatype.EEG : result;
        }

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        private void setDatatype(kungzhi.muse.io.DataSerializer.MuseData.Datatype value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            datatype_ = value.getNumber();
        }

        /**
         * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
         */
        private void clearDatatype() {
            bitField0_ = (bitField0_ & ~0x00000002);
            datatype_ = 0;
        }

        public static final int CONFIG_ID_FIELD_NUMBER = 3;
        private long configId_;

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        public boolean hasConfigId() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        public long getConfigId() {
            return configId_;
        }

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        private void setConfigId(long value) {
            bitField0_ |= 0x00000004;
            configId_ = value;
        }

        /**
         * <pre>
         * The config_id here maps to a MuseConfig message.
         * This is the sensor configuration for this osc.
         * This id allows osc from multiple devices to be recorded to a single file.
         * </pre>
         * <p>
         * <code>optional uint64 config_id = 3;</code>
         */
        private void clearConfigId() {
            bitField0_ = (bitField0_ & ~0x00000004);
            configId_ = 0L;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            com.google.protobuf.GeneratedMessageLite
                    .ExtendableMessage<kungzhi.muse.io.DataSerializer.MuseData, kungzhi.muse.io.DataSerializer.MuseData.Builder>
                    .ExtensionWriter extensionWriter =
                    newExtensionWriter();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeDouble(1, timestamp_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, datatype_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt64(3, configId_);
            }
            extensionWriter.writeUntil(1000, output);
            extensionWriter.writeUntil(2048, output);
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(1, timestamp_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(2, datatype_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(3, configId_);
            }
            size += extensionsSerializedSize();
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseData parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseData prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.MuseData}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
                        kungzhi.muse.io.DataSerializer.MuseData, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseData)
                kungzhi.muse.io.DataSerializer.MuseDataOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseData.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * The time that this event occurred. The precision is down to microseconds.
             * </pre>
             * <p>
             * <code>required double timestamp = 1;</code>
             */
            public boolean hasTimestamp() {
                return instance.hasTimestamp();
            }

            /**
             * <pre>
             * The time that this event occurred. The precision is down to microseconds.
             * </pre>
             * <p>
             * <code>required double timestamp = 1;</code>
             */
            public double getTimestamp() {
                return instance.getTimestamp();
            }

            /**
             * <pre>
             * The time that this event occurred. The precision is down to microseconds.
             * </pre>
             * <p>
             * <code>required double timestamp = 1;</code>
             */
            public Builder setTimestamp(double value) {
                copyOnWrite();
                instance.setTimestamp(value);
                return this;
            }

            /**
             * <pre>
             * The time that this event occurred. The precision is down to microseconds.
             * </pre>
             * <p>
             * <code>required double timestamp = 1;</code>
             */
            public Builder clearTimestamp() {
                copyOnWrite();
                instance.clearTimestamp();
                return this;
            }

            /**
             * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
             */
            public boolean hasDatatype() {
                return instance.hasDatatype();
            }

            /**
             * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
             */
            public kungzhi.muse.io.DataSerializer.MuseData.Datatype getDatatype() {
                return instance.getDatatype();
            }

            /**
             * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
             */
            public Builder setDatatype(kungzhi.muse.io.DataSerializer.MuseData.Datatype value) {
                copyOnWrite();
                instance.setDatatype(value);
                return this;
            }

            /**
             * <code>required .interaxon.muse_data.MuseData.Datatype datatype = 2;</code>
             */
            public Builder clearDatatype() {
                copyOnWrite();
                instance.clearDatatype();
                return this;
            }

            /**
             * <pre>
             * The config_id here maps to a MuseConfig message.
             * This is the sensor configuration for this osc.
             * This id allows osc from multiple devices to be recorded to a single file.
             * </pre>
             * <p>
             * <code>optional uint64 config_id = 3;</code>
             */
            public boolean hasConfigId() {
                return instance.hasConfigId();
            }

            /**
             * <pre>
             * The config_id here maps to a MuseConfig message.
             * This is the sensor configuration for this osc.
             * This id allows osc from multiple devices to be recorded to a single file.
             * </pre>
             * <p>
             * <code>optional uint64 config_id = 3;</code>
             */
            public long getConfigId() {
                return instance.getConfigId();
            }

            /**
             * <pre>
             * The config_id here maps to a MuseConfig message.
             * This is the sensor configuration for this osc.
             * This id allows osc from multiple devices to be recorded to a single file.
             * </pre>
             * <p>
             * <code>optional uint64 config_id = 3;</code>
             */
            public Builder setConfigId(long value) {
                copyOnWrite();
                instance.setConfigId(value);
                return this;
            }

            /**
             * <pre>
             * The config_id here maps to a MuseConfig message.
             * This is the sensor configuration for this osc.
             * This id allows osc from multiple devices to be recorded to a single file.
             * </pre>
             * <p>
             * <code>optional uint64 config_id = 3;</code>
             */
            public Builder clearConfigId() {
                copyOnWrite();
                instance.clearConfigId();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseData)
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseData();
                }
                case IS_INITIALIZED: {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized == 1) return DEFAULT_INSTANCE;
                    if (isInitialized == 0) return null;

                    boolean shouldMemoize = ((Boolean) arg0).booleanValue();
                    if (!hasTimestamp()) {
                        if (shouldMemoize) {
                            memoizedIsInitialized = 0;
                        }
                        return null;
                    }
                    if (!hasDatatype()) {
                        if (shouldMemoize) {
                            memoizedIsInitialized = 0;
                        }
                        return null;
                    }
                    if (!extensionsAreInitialized()) {
                        if (shouldMemoize) {
                            memoizedIsInitialized = 0;
                        }
                        return null;
                    }
                    if (shouldMemoize) memoizedIsInitialized = 1;
                    return DEFAULT_INSTANCE;

                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseData other = (kungzhi.muse.io.DataSerializer.MuseData) arg1;
                    timestamp_ = visitor.visitDouble(
                            hasTimestamp(), timestamp_,
                            other.hasTimestamp(), other.timestamp_);
                    datatype_ = visitor.visitInt(hasDatatype(), datatype_,
                            other.hasDatatype(), other.datatype_);
                    configId_ = visitor.visitLong(
                            hasConfigId(), configId_,
                            other.hasConfigId(), other.configId_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(getDefaultInstanceForType(),
                                            input, extensionRegistry, tag)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 9: {
                                    bitField0_ |= 0x00000001;
                                    timestamp_ = input.readDouble();
                                    break;
                                }
                                case 16: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.MuseData.Datatype value = kungzhi.muse.io.DataSerializer.MuseData.Datatype.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(2, rawValue);
                                    } else {
                                        bitField0_ |= 0x00000002;
                                        datatype_ = rawValue;
                                    }
                                    break;
                                }
                                case 24: {
                                    bitField0_ |= 0x00000004;
                                    configId_ = input.readUInt64();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseData.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseData)
        private static final kungzhi.muse.io.DataSerializer.MuseData DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseData();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseData getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseData> PARSER;

        public static com.google.protobuf.Parser<MuseData> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }
    }

    public interface EEGOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.EEG)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>repeated float values = 2;</code>
         */
        java.util.List<java.lang.Float> getValuesList();

        /**
         * <code>repeated float values = 2;</code>
         */
        int getValuesCount();

        /**
         * <code>repeated float values = 2;</code>
         */
        float getValues(int index);

        /**
         * <code>optional float drl = 5;</code>
         */
        boolean hasDrl();

        /**
         * <code>optional float drl = 5;</code>
         */
        float getDrl();

        /**
         * <code>optional float ref = 6;</code>
         */
        boolean hasRef();

        /**
         * <code>optional float ref = 6;</code>
         */
        float getRef();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.EEG}
     */
    public static final class EEG extends
            com.google.protobuf.GeneratedMessageLite<
                    EEG, EEG.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.EEG)
            EEGOrBuilder {
        private EEG() {
            values_ = emptyFloatList();
        }

        private int bitField0_;
        public static final int VALUES_FIELD_NUMBER = 2;
        private com.google.protobuf.Internal.FloatList values_;

        /**
         * <code>repeated float values = 2;</code>
         */
        public java.util.List<java.lang.Float>
        getValuesList() {
            return values_;
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        public int getValuesCount() {
            return values_.size();
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        public float getValues(int index) {
            return values_.getFloat(index);
        }

        private void ensureValuesIsMutable() {
            if (!values_.isModifiable()) {
                values_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
            }
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        private void setValues(
                int index, float value) {
            ensureValuesIsMutable();
            values_.setFloat(index, value);
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        private void addValues(float value) {
            ensureValuesIsMutable();
            values_.addFloat(value);
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        private void addAllValues(
                java.lang.Iterable<? extends java.lang.Float> values) {
            ensureValuesIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, values_);
        }

        /**
         * <code>repeated float values = 2;</code>
         */
        private void clearValues() {
            values_ = emptyFloatList();
        }

        public static final int DRL_FIELD_NUMBER = 5;
        private float drl_;

        /**
         * <code>optional float drl = 5;</code>
         */
        public boolean hasDrl() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional float drl = 5;</code>
         */
        public float getDrl() {
            return drl_;
        }

        /**
         * <code>optional float drl = 5;</code>
         */
        private void setDrl(float value) {
            bitField0_ |= 0x00000001;
            drl_ = value;
        }

        /**
         * <code>optional float drl = 5;</code>
         */
        private void clearDrl() {
            bitField0_ = (bitField0_ & ~0x00000001);
            drl_ = 0F;
        }

        public static final int REF_FIELD_NUMBER = 6;
        private float ref_;

        /**
         * <code>optional float ref = 6;</code>
         */
        public boolean hasRef() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional float ref = 6;</code>
         */
        public float getRef() {
            return ref_;
        }

        /**
         * <code>optional float ref = 6;</code>
         */
        private void setRef(float value) {
            bitField0_ |= 0x00000002;
            ref_ = value;
        }

        /**
         * <code>optional float ref = 6;</code>
         */
        private void clearRef() {
            bitField0_ = (bitField0_ & ~0x00000002);
            ref_ = 0F;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < values_.size(); i++) {
                output.writeFloat(2, values_.getFloat(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(5, drl_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeFloat(6, ref_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            {
                int dataSize = 0;
                dataSize = 4 * getValuesList().size();
                size += dataSize;
                size += 1 * getValuesList().size();
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(5, drl_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(6, ref_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.EEG prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.EEG}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.EEG, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.EEG)
                kungzhi.muse.io.DataSerializer.EEGOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.EEG.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>repeated float values = 2;</code>
             */
            public java.util.List<java.lang.Float>
            getValuesList() {
                return java.util.Collections.unmodifiableList(
                        instance.getValuesList());
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public int getValuesCount() {
                return instance.getValuesCount();
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public float getValues(int index) {
                return instance.getValues(index);
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public Builder setValues(
                    int index, float value) {
                copyOnWrite();
                instance.setValues(index, value);
                return this;
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public Builder addValues(float value) {
                copyOnWrite();
                instance.addValues(value);
                return this;
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public Builder addAllValues(
                    java.lang.Iterable<? extends java.lang.Float> values) {
                copyOnWrite();
                instance.addAllValues(values);
                return this;
            }

            /**
             * <code>repeated float values = 2;</code>
             */
            public Builder clearValues() {
                copyOnWrite();
                instance.clearValues();
                return this;
            }

            /**
             * <code>optional float drl = 5;</code>
             */
            public boolean hasDrl() {
                return instance.hasDrl();
            }

            /**
             * <code>optional float drl = 5;</code>
             */
            public float getDrl() {
                return instance.getDrl();
            }

            /**
             * <code>optional float drl = 5;</code>
             */
            public Builder setDrl(float value) {
                copyOnWrite();
                instance.setDrl(value);
                return this;
            }

            /**
             * <code>optional float drl = 5;</code>
             */
            public Builder clearDrl() {
                copyOnWrite();
                instance.clearDrl();
                return this;
            }

            /**
             * <code>optional float ref = 6;</code>
             */
            public boolean hasRef() {
                return instance.hasRef();
            }

            /**
             * <code>optional float ref = 6;</code>
             */
            public float getRef() {
                return instance.getRef();
            }

            /**
             * <code>optional float ref = 6;</code>
             */
            public Builder setRef(float value) {
                copyOnWrite();
                instance.setRef(value);
                return this;
            }

            /**
             * <code>optional float ref = 6;</code>
             */
            public Builder clearRef() {
                copyOnWrite();
                instance.clearRef();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.EEG)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.EEG();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    values_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.EEG other = (kungzhi.muse.io.DataSerializer.EEG) arg1;
                    values_ = visitor.visitFloatList(values_, other.values_);
                    drl_ = visitor.visitFloat(
                            hasDrl(), drl_,
                            other.hasDrl(), other.drl_);
                    ref_ = visitor.visitFloat(
                            hasRef(), ref_,
                            other.hasRef(), other.ref_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 21: {
                                    if (!values_.isModifiable()) {
                                        values_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                                    }
                                    values_.addFloat(input.readFloat());
                                    break;
                                }
                                case 18: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!values_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        final int currentSize = values_.size();
                                        values_ = values_.mutableCopyWithCapacity(
                                                currentSize + (length / 4));
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        values_.addFloat(input.readFloat());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                                case 45: {
                                    bitField0_ |= 0x00000001;
                                    drl_ = input.readFloat();
                                    break;
                                }
                                case 53: {
                                    bitField0_ |= 0x00000002;
                                    ref_ = input.readFloat();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.EEG.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.EEG)
        private static final kungzhi.muse.io.DataSerializer.EEG DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new EEG();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.EEG getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<EEG> PARSER;

        public static com.google.protobuf.Parser<EEG> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 8;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.EEG> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.EEG.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.EEG.getDefaultInstance(),
                        null,
                        8,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.EEG.class);
    }

    public interface MuseQuantizationOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseQuantization)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        java.util.List<java.lang.Integer> getValuesList();

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        int getValuesCount();

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        int getValues(int index);
    }

    /**
     * <pre>
     * Possible quantization values are 1, 2, 4, 8, 16, 32, 64, 128
     * </pre>
     * <p>
     * Protobuf type {@code interaxon.muse_data.MuseQuantization}
     */
    public static final class MuseQuantization extends
            com.google.protobuf.GeneratedMessageLite<
                    MuseQuantization, MuseQuantization.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseQuantization)
            MuseQuantizationOrBuilder {
        private MuseQuantization() {
            values_ = emptyIntList();
        }

        public static final int VALUES_FIELD_NUMBER = 1;
        private com.google.protobuf.Internal.IntList values_;

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        public java.util.List<java.lang.Integer>
        getValuesList() {
            return values_;
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        public int getValuesCount() {
            return values_.size();
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        public int getValues(int index) {
            return values_.getInt(index);
        }

        private void ensureValuesIsMutable() {
            if (!values_.isModifiable()) {
                values_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
            }
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        private void setValues(
                int index, int value) {
            ensureValuesIsMutable();
            values_.setInt(index, value);
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        private void addValues(int value) {
            ensureValuesIsMutable();
            values_.addInt(value);
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        private void addAllValues(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureValuesIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, values_);
        }

        /**
         * <code>repeated uint32 values = 1;</code>
         */
        private void clearValues() {
            values_ = emptyIntList();
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < values_.size(); i++) {
                output.writeUInt32(1, values_.getInt(i));
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            {
                int dataSize = 0;
                for (int i = 0; i < values_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(values_.getInt(i));
                }
                size += dataSize;
                size += 1 * getValuesList().size();
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseQuantization prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * <pre>
         * Possible quantization values are 1, 2, 4, 8, 16, 32, 64, 128
         * </pre>
         * <p>
         * Protobuf type {@code interaxon.muse_data.MuseQuantization}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.MuseQuantization, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseQuantization)
                kungzhi.muse.io.DataSerializer.MuseQuantizationOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseQuantization.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public java.util.List<java.lang.Integer>
            getValuesList() {
                return java.util.Collections.unmodifiableList(
                        instance.getValuesList());
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public int getValuesCount() {
                return instance.getValuesCount();
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public int getValues(int index) {
                return instance.getValues(index);
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public Builder setValues(
                    int index, int value) {
                copyOnWrite();
                instance.setValues(index, value);
                return this;
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public Builder addValues(int value) {
                copyOnWrite();
                instance.addValues(value);
                return this;
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public Builder addAllValues(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                copyOnWrite();
                instance.addAllValues(values);
                return this;
            }

            /**
             * <code>repeated uint32 values = 1;</code>
             */
            public Builder clearValues() {
                copyOnWrite();
                instance.clearValues();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseQuantization)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseQuantization();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    values_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseQuantization other = (kungzhi.muse.io.DataSerializer.MuseQuantization) arg1;
                    values_ = visitor.visitIntList(values_, other.values_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 8: {
                                    if (!values_.isModifiable()) {
                                        values_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                                    }
                                    values_.addInt(input.readUInt32());
                                    break;
                                }
                                case 10: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!values_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        values_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        values_.addInt(input.readUInt32());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseQuantization.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseQuantization)
        private static final kungzhi.muse.io.DataSerializer.MuseQuantization DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseQuantization();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseQuantization getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseQuantization> PARSER;

        public static com.google.protobuf.Parser<MuseQuantization> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 9;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.MuseQuantization> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseQuantization.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseQuantization.getDefaultInstance(),
                        null,
                        9,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.MuseQuantization.class);
    }

    public interface AccelerometerOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.Accelerometer)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        boolean hasAcc1();

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        float getAcc1();

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        boolean hasAcc2();

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        float getAcc2();

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        boolean hasAcc3();

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        float getAcc3();
    }

    /**
     * <pre>
     * Accelerometer values are stored as milli-G's
     * </pre>
     * <p>
     * Protobuf type {@code interaxon.muse_data.Accelerometer}
     */
    public static final class Accelerometer extends
            com.google.protobuf.GeneratedMessageLite<
                    Accelerometer, Accelerometer.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.Accelerometer)
            AccelerometerOrBuilder {
        private Accelerometer() {
        }

        private int bitField0_;
        public static final int ACC1_FIELD_NUMBER = 1;
        private float acc1_;

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        public boolean hasAcc1() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        public float getAcc1() {
            return acc1_;
        }

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        private void setAcc1(float value) {
            bitField0_ |= 0x00000001;
            acc1_ = value;
        }

        /**
         * <pre>
         * forward_back
         * </pre>
         * <p>
         * <code>optional float acc1 = 1;</code>
         */
        private void clearAcc1() {
            bitField0_ = (bitField0_ & ~0x00000001);
            acc1_ = 0F;
        }

        public static final int ACC2_FIELD_NUMBER = 2;
        private float acc2_;

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        public boolean hasAcc2() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        public float getAcc2() {
            return acc2_;
        }

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        private void setAcc2(float value) {
            bitField0_ |= 0x00000002;
            acc2_ = value;
        }

        /**
         * <pre>
         * up_down
         * </pre>
         * <p>
         * <code>optional float acc2 = 2;</code>
         */
        private void clearAcc2() {
            bitField0_ = (bitField0_ & ~0x00000002);
            acc2_ = 0F;
        }

        public static final int ACC3_FIELD_NUMBER = 3;
        private float acc3_;

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        public boolean hasAcc3() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        public float getAcc3() {
            return acc3_;
        }

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        private void setAcc3(float value) {
            bitField0_ |= 0x00000004;
            acc3_ = value;
        }

        /**
         * <pre>
         * left_right
         * </pre>
         * <p>
         * <code>optional float acc3 = 3;</code>
         */
        private void clearAcc3() {
            bitField0_ = (bitField0_ & ~0x00000004);
            acc3_ = 0F;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(1, acc1_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeFloat(2, acc2_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeFloat(3, acc3_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(1, acc1_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, acc2_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, acc3_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.Accelerometer prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * <pre>
         * Accelerometer values are stored as milli-G's
         * </pre>
         * <p>
         * Protobuf type {@code interaxon.muse_data.Accelerometer}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.Accelerometer, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.Accelerometer)
                kungzhi.muse.io.DataSerializer.AccelerometerOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.Accelerometer.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * forward_back
             * </pre>
             * <p>
             * <code>optional float acc1 = 1;</code>
             */
            public boolean hasAcc1() {
                return instance.hasAcc1();
            }

            /**
             * <pre>
             * forward_back
             * </pre>
             * <p>
             * <code>optional float acc1 = 1;</code>
             */
            public float getAcc1() {
                return instance.getAcc1();
            }

            /**
             * <pre>
             * forward_back
             * </pre>
             * <p>
             * <code>optional float acc1 = 1;</code>
             */
            public Builder setAcc1(float value) {
                copyOnWrite();
                instance.setAcc1(value);
                return this;
            }

            /**
             * <pre>
             * forward_back
             * </pre>
             * <p>
             * <code>optional float acc1 = 1;</code>
             */
            public Builder clearAcc1() {
                copyOnWrite();
                instance.clearAcc1();
                return this;
            }

            /**
             * <pre>
             * up_down
             * </pre>
             * <p>
             * <code>optional float acc2 = 2;</code>
             */
            public boolean hasAcc2() {
                return instance.hasAcc2();
            }

            /**
             * <pre>
             * up_down
             * </pre>
             * <p>
             * <code>optional float acc2 = 2;</code>
             */
            public float getAcc2() {
                return instance.getAcc2();
            }

            /**
             * <pre>
             * up_down
             * </pre>
             * <p>
             * <code>optional float acc2 = 2;</code>
             */
            public Builder setAcc2(float value) {
                copyOnWrite();
                instance.setAcc2(value);
                return this;
            }

            /**
             * <pre>
             * up_down
             * </pre>
             * <p>
             * <code>optional float acc2 = 2;</code>
             */
            public Builder clearAcc2() {
                copyOnWrite();
                instance.clearAcc2();
                return this;
            }

            /**
             * <pre>
             * left_right
             * </pre>
             * <p>
             * <code>optional float acc3 = 3;</code>
             */
            public boolean hasAcc3() {
                return instance.hasAcc3();
            }

            /**
             * <pre>
             * left_right
             * </pre>
             * <p>
             * <code>optional float acc3 = 3;</code>
             */
            public float getAcc3() {
                return instance.getAcc3();
            }

            /**
             * <pre>
             * left_right
             * </pre>
             * <p>
             * <code>optional float acc3 = 3;</code>
             */
            public Builder setAcc3(float value) {
                copyOnWrite();
                instance.setAcc3(value);
                return this;
            }

            /**
             * <pre>
             * left_right
             * </pre>
             * <p>
             * <code>optional float acc3 = 3;</code>
             */
            public Builder clearAcc3() {
                copyOnWrite();
                instance.clearAcc3();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.Accelerometer)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.Accelerometer();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.Accelerometer other = (kungzhi.muse.io.DataSerializer.Accelerometer) arg1;
                    acc1_ = visitor.visitFloat(
                            hasAcc1(), acc1_,
                            other.hasAcc1(), other.acc1_);
                    acc2_ = visitor.visitFloat(
                            hasAcc2(), acc2_,
                            other.hasAcc2(), other.acc2_);
                    acc3_ = visitor.visitFloat(
                            hasAcc3(), acc3_,
                            other.hasAcc3(), other.acc3_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 13: {
                                    bitField0_ |= 0x00000001;
                                    acc1_ = input.readFloat();
                                    break;
                                }
                                case 21: {
                                    bitField0_ |= 0x00000002;
                                    acc2_ = input.readFloat();
                                    break;
                                }
                                case 29: {
                                    bitField0_ |= 0x00000004;
                                    acc3_ = input.readFloat();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.Accelerometer.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.Accelerometer)
        private static final kungzhi.muse.io.DataSerializer.Accelerometer DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Accelerometer();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.Accelerometer getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Accelerometer> PARSER;

        public static com.google.protobuf.Parser<Accelerometer> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 10;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.Accelerometer> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Accelerometer.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Accelerometer.getDefaultInstance(),
                        null,
                        10,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.Accelerometer.class);
    }

    public interface GyroOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.Gyro)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        boolean hasGyro1();

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        float getGyro1();

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        boolean hasGyro2();

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        float getGyro2();

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        boolean hasGyro3();

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        float getGyro3();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.Gyro}
     */
    public static final class Gyro extends
            com.google.protobuf.GeneratedMessageLite<
                    Gyro, Gyro.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.Gyro)
            GyroOrBuilder {
        private Gyro() {
        }

        private int bitField0_;
        public static final int GYRO1_FIELD_NUMBER = 1;
        private float gyro1_;

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        public boolean hasGyro1() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        public float getGyro1() {
            return gyro1_;
        }

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        private void setGyro1(float value) {
            bitField0_ |= 0x00000001;
            gyro1_ = value;
        }

        /**
         * <code>optional float gyro1 = 1;</code>
         */
        private void clearGyro1() {
            bitField0_ = (bitField0_ & ~0x00000001);
            gyro1_ = 0F;
        }

        public static final int GYRO2_FIELD_NUMBER = 2;
        private float gyro2_;

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        public boolean hasGyro2() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        public float getGyro2() {
            return gyro2_;
        }

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        private void setGyro2(float value) {
            bitField0_ |= 0x00000002;
            gyro2_ = value;
        }

        /**
         * <code>optional float gyro2 = 2;</code>
         */
        private void clearGyro2() {
            bitField0_ = (bitField0_ & ~0x00000002);
            gyro2_ = 0F;
        }

        public static final int GYRO3_FIELD_NUMBER = 3;
        private float gyro3_;

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        public boolean hasGyro3() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        public float getGyro3() {
            return gyro3_;
        }

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        private void setGyro3(float value) {
            bitField0_ |= 0x00000004;
            gyro3_ = value;
        }

        /**
         * <code>optional float gyro3 = 3;</code>
         */
        private void clearGyro3() {
            bitField0_ = (bitField0_ & ~0x00000004);
            gyro3_ = 0F;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(1, gyro1_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeFloat(2, gyro2_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeFloat(3, gyro3_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(1, gyro1_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, gyro2_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, gyro3_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Gyro parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.Gyro prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.Gyro}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.Gyro, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.Gyro)
                kungzhi.muse.io.DataSerializer.GyroOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.Gyro.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional float gyro1 = 1;</code>
             */
            public boolean hasGyro1() {
                return instance.hasGyro1();
            }

            /**
             * <code>optional float gyro1 = 1;</code>
             */
            public float getGyro1() {
                return instance.getGyro1();
            }

            /**
             * <code>optional float gyro1 = 1;</code>
             */
            public Builder setGyro1(float value) {
                copyOnWrite();
                instance.setGyro1(value);
                return this;
            }

            /**
             * <code>optional float gyro1 = 1;</code>
             */
            public Builder clearGyro1() {
                copyOnWrite();
                instance.clearGyro1();
                return this;
            }

            /**
             * <code>optional float gyro2 = 2;</code>
             */
            public boolean hasGyro2() {
                return instance.hasGyro2();
            }

            /**
             * <code>optional float gyro2 = 2;</code>
             */
            public float getGyro2() {
                return instance.getGyro2();
            }

            /**
             * <code>optional float gyro2 = 2;</code>
             */
            public Builder setGyro2(float value) {
                copyOnWrite();
                instance.setGyro2(value);
                return this;
            }

            /**
             * <code>optional float gyro2 = 2;</code>
             */
            public Builder clearGyro2() {
                copyOnWrite();
                instance.clearGyro2();
                return this;
            }

            /**
             * <code>optional float gyro3 = 3;</code>
             */
            public boolean hasGyro3() {
                return instance.hasGyro3();
            }

            /**
             * <code>optional float gyro3 = 3;</code>
             */
            public float getGyro3() {
                return instance.getGyro3();
            }

            /**
             * <code>optional float gyro3 = 3;</code>
             */
            public Builder setGyro3(float value) {
                copyOnWrite();
                instance.setGyro3(value);
                return this;
            }

            /**
             * <code>optional float gyro3 = 3;</code>
             */
            public Builder clearGyro3() {
                copyOnWrite();
                instance.clearGyro3();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.Gyro)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.Gyro();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.Gyro other = (kungzhi.muse.io.DataSerializer.Gyro) arg1;
                    gyro1_ = visitor.visitFloat(
                            hasGyro1(), gyro1_,
                            other.hasGyro1(), other.gyro1_);
                    gyro2_ = visitor.visitFloat(
                            hasGyro2(), gyro2_,
                            other.hasGyro2(), other.gyro2_);
                    gyro3_ = visitor.visitFloat(
                            hasGyro3(), gyro3_,
                            other.hasGyro3(), other.gyro3_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 13: {
                                    bitField0_ |= 0x00000001;
                                    gyro1_ = input.readFloat();
                                    break;
                                }
                                case 21: {
                                    bitField0_ |= 0x00000002;
                                    gyro2_ = input.readFloat();
                                    break;
                                }
                                case 29: {
                                    bitField0_ |= 0x00000004;
                                    gyro3_ = input.readFloat();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.Gyro.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.Gyro)
        private static final kungzhi.muse.io.DataSerializer.Gyro DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Gyro();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.Gyro getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Gyro> PARSER;

        public static com.google.protobuf.Parser<Gyro> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 12;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.Gyro> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Gyro.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Gyro.getDefaultInstance(),
                        null,
                        12,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.Gyro.class);
    }

    public interface AnnotationOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.Annotation)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        boolean hasEventData();

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        java.lang.String getEventData();

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        com.google.protobuf.ByteString
        getEventDataBytes();

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        boolean hasEventDataFormat();

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        kungzhi.muse.io.DataSerializer.Annotation.Format getEventDataFormat();

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        boolean hasEventType();

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        java.lang.String getEventType();

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        com.google.protobuf.ByteString
        getEventTypeBytes();

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        boolean hasEventId();

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        java.lang.String getEventId();

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        com.google.protobuf.ByteString
        getEventIdBytes();

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        boolean hasParentId();

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        java.lang.String getParentId();

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        com.google.protobuf.ByteString
        getParentIdBytes();
    }

    /**
     * <pre>
     * You can use this message to record application-level events.
     * </pre>
     * <p>
     * Protobuf type {@code interaxon.muse_data.Annotation}
     */
    public static final class Annotation extends
            com.google.protobuf.GeneratedMessageLite<
                    Annotation, Annotation.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.Annotation)
            AnnotationOrBuilder {
        private Annotation() {
            eventData_ = "";
            eventType_ = "";
            eventId_ = "";
            parentId_ = "";
        }

        /**
         * Protobuf enum {@code interaxon.muse_data.Annotation.Format}
         */
        public enum Format
                implements com.google.protobuf.Internal.EnumLite {
            /**
             * <code>PLAIN_STRING = 0;</code>
             */
            PLAIN_STRING(0),
            /**
             * <code>JSON = 1;</code>
             */
            JSON(1),
            /**
             * <code>OSC = 2;</code>
             */
            OSC(2),;

            /**
             * <code>PLAIN_STRING = 0;</code>
             */
            public static final int PLAIN_STRING_VALUE = 0;
            /**
             * <code>JSON = 1;</code>
             */
            public static final int JSON_VALUE = 1;
            /**
             * <code>OSC = 2;</code>
             */
            public static final int OSC_VALUE = 2;


            public final int getNumber() {
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static Format valueOf(int value) {
                return forNumber(value);
            }

            public static Format forNumber(int value) {
                switch (value) {
                    case 0:
                        return PLAIN_STRING;
                    case 1:
                        return JSON;
                    case 2:
                        return OSC;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Format>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static final com.google.protobuf.Internal.EnumLiteMap<
                    Format> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Format>() {
                        public Format findValueByNumber(int number) {
                            return Format.forNumber(number);
                        }
                    };

            private final int value;

            private Format(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:interaxon.muse_data.Annotation.Format)
        }

        private int bitField0_;
        public static final int EVENT_DATA_FIELD_NUMBER = 1;
        private java.lang.String eventData_;

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        public boolean hasEventData() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        public java.lang.String getEventData() {
            return eventData_;
        }

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        public com.google.protobuf.ByteString
        getEventDataBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(eventData_);
        }

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        private void setEventData(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            eventData_ = value;
        }

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        private void clearEventData() {
            bitField0_ = (bitField0_ & ~0x00000001);
            eventData_ = getDefaultInstance().getEventData();
        }

        /**
         * <pre>
         * This is additional osc for the event, can be in any format specified
         * by the Format enum.
         * </pre>
         * <p>
         * <code>optional string event_data = 1;</code>
         */
        private void setEventDataBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            eventData_ = value.toStringUtf8();
        }

        public static final int EVENT_DATA_FORMAT_FIELD_NUMBER = 2;
        private int eventDataFormat_;

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        public boolean hasEventDataFormat() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        public kungzhi.muse.io.DataSerializer.Annotation.Format getEventDataFormat() {
            kungzhi.muse.io.DataSerializer.Annotation.Format result = kungzhi.muse.io.DataSerializer.Annotation.Format.forNumber(eventDataFormat_);
            return result == null ? kungzhi.muse.io.DataSerializer.Annotation.Format.PLAIN_STRING : result;
        }

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        private void setEventDataFormat(kungzhi.muse.io.DataSerializer.Annotation.Format value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            eventDataFormat_ = value.getNumber();
        }

        /**
         * <pre>
         * This specifies the string format of event_data.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
         */
        private void clearEventDataFormat() {
            bitField0_ = (bitField0_ & ~0x00000002);
            eventDataFormat_ = 0;
        }

        public static final int EVENT_TYPE_FIELD_NUMBER = 3;
        private java.lang.String eventType_;

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        public boolean hasEventType() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        public java.lang.String getEventType() {
            return eventType_;
        }

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        public com.google.protobuf.ByteString
        getEventTypeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(eventType_);
        }

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        private void setEventType(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            eventType_ = value;
        }

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        private void clearEventType() {
            bitField0_ = (bitField0_ & ~0x00000004);
            eventType_ = getDefaultInstance().getEventType();
        }

        /**
         * <pre>
         * This can be used to classify events, for example "blink" or "error".
         * </pre>
         * <p>
         * <code>optional string event_type = 3;</code>
         */
        private void setEventTypeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            eventType_ = value.toStringUtf8();
        }

        public static final int EVENT_ID_FIELD_NUMBER = 4;
        private java.lang.String eventId_;

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        public boolean hasEventId() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        public java.lang.String getEventId() {
            return eventId_;
        }

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        public com.google.protobuf.ByteString
        getEventIdBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(eventId_);
        }

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        private void setEventId(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            eventId_ = value;
        }

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        private void clearEventId() {
            bitField0_ = (bitField0_ & ~0x00000008);
            eventId_ = getDefaultInstance().getEventId();
        }

        /**
         * <pre>
         * This can be used to pair events together or give them unique IDs.
         * </pre>
         * <p>
         * <code>optional string event_id = 4;</code>
         */
        private void setEventIdBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            eventId_ = value.toStringUtf8();
        }

        public static final int PARENT_ID_FIELD_NUMBER = 5;
        private java.lang.String parentId_;

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        public boolean hasParentId() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        public java.lang.String getParentId() {
            return parentId_;
        }

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        public com.google.protobuf.ByteString
        getParentIdBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(parentId_);
        }

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        private void setParentId(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            parentId_ = value;
        }

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        private void clearParentId() {
            bitField0_ = (bitField0_ & ~0x00000010);
            parentId_ = getDefaultInstance().getParentId();
        }

        /**
         * <pre>
         * This can be used to indicate this is a sub-event of another event.
         * </pre>
         * <p>
         * <code>optional string parent_id = 5;</code>
         */
        private void setParentIdBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            parentId_ = value.toStringUtf8();
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeString(1, getEventData());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, eventDataFormat_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeString(3, getEventType());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeString(4, getEventId());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeString(5, getParentId());
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(1, getEventData());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(2, eventDataFormat_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(3, getEventType());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(4, getEventId());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(5, getParentId());
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Annotation parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.Annotation prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * <pre>
         * You can use this message to record application-level events.
         * </pre>
         * <p>
         * Protobuf type {@code interaxon.muse_data.Annotation}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.Annotation, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.Annotation)
                kungzhi.muse.io.DataSerializer.AnnotationOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.Annotation.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public boolean hasEventData() {
                return instance.hasEventData();
            }

            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public java.lang.String getEventData() {
                return instance.getEventData();
            }

            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public com.google.protobuf.ByteString
            getEventDataBytes() {
                return instance.getEventDataBytes();
            }

            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public Builder setEventData(
                    java.lang.String value) {
                copyOnWrite();
                instance.setEventData(value);
                return this;
            }

            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public Builder clearEventData() {
                copyOnWrite();
                instance.clearEventData();
                return this;
            }

            /**
             * <pre>
             * This is additional osc for the event, can be in any format specified
             * by the Format enum.
             * </pre>
             * <p>
             * <code>optional string event_data = 1;</code>
             */
            public Builder setEventDataBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setEventDataBytes(value);
                return this;
            }

            /**
             * <pre>
             * This specifies the string format of event_data.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
             */
            public boolean hasEventDataFormat() {
                return instance.hasEventDataFormat();
            }

            /**
             * <pre>
             * This specifies the string format of event_data.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
             */
            public kungzhi.muse.io.DataSerializer.Annotation.Format getEventDataFormat() {
                return instance.getEventDataFormat();
            }

            /**
             * <pre>
             * This specifies the string format of event_data.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
             */
            public Builder setEventDataFormat(kungzhi.muse.io.DataSerializer.Annotation.Format value) {
                copyOnWrite();
                instance.setEventDataFormat(value);
                return this;
            }

            /**
             * <pre>
             * This specifies the string format of event_data.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.Annotation.Format event_data_format = 2 [default = PLAIN_STRING];</code>
             */
            public Builder clearEventDataFormat() {
                copyOnWrite();
                instance.clearEventDataFormat();
                return this;
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public boolean hasEventType() {
                return instance.hasEventType();
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public java.lang.String getEventType() {
                return instance.getEventType();
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public com.google.protobuf.ByteString
            getEventTypeBytes() {
                return instance.getEventTypeBytes();
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public Builder setEventType(
                    java.lang.String value) {
                copyOnWrite();
                instance.setEventType(value);
                return this;
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public Builder clearEventType() {
                copyOnWrite();
                instance.clearEventType();
                return this;
            }

            /**
             * <pre>
             * This can be used to classify events, for example "blink" or "error".
             * </pre>
             * <p>
             * <code>optional string event_type = 3;</code>
             */
            public Builder setEventTypeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setEventTypeBytes(value);
                return this;
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public boolean hasEventId() {
                return instance.hasEventId();
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public java.lang.String getEventId() {
                return instance.getEventId();
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public com.google.protobuf.ByteString
            getEventIdBytes() {
                return instance.getEventIdBytes();
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public Builder setEventId(
                    java.lang.String value) {
                copyOnWrite();
                instance.setEventId(value);
                return this;
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public Builder clearEventId() {
                copyOnWrite();
                instance.clearEventId();
                return this;
            }

            /**
             * <pre>
             * This can be used to pair events together or give them unique IDs.
             * </pre>
             * <p>
             * <code>optional string event_id = 4;</code>
             */
            public Builder setEventIdBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setEventIdBytes(value);
                return this;
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public boolean hasParentId() {
                return instance.hasParentId();
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public java.lang.String getParentId() {
                return instance.getParentId();
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public com.google.protobuf.ByteString
            getParentIdBytes() {
                return instance.getParentIdBytes();
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public Builder setParentId(
                    java.lang.String value) {
                copyOnWrite();
                instance.setParentId(value);
                return this;
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public Builder clearParentId() {
                copyOnWrite();
                instance.clearParentId();
                return this;
            }

            /**
             * <pre>
             * This can be used to indicate this is a sub-event of another event.
             * </pre>
             * <p>
             * <code>optional string parent_id = 5;</code>
             */
            public Builder setParentIdBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setParentIdBytes(value);
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.Annotation)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.Annotation();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.Annotation other = (kungzhi.muse.io.DataSerializer.Annotation) arg1;
                    eventData_ = visitor.visitString(
                            hasEventData(), eventData_,
                            other.hasEventData(), other.eventData_);
                    eventDataFormat_ = visitor.visitInt(hasEventDataFormat(), eventDataFormat_,
                            other.hasEventDataFormat(), other.eventDataFormat_);
                    eventType_ = visitor.visitString(
                            hasEventType(), eventType_,
                            other.hasEventType(), other.eventType_);
                    eventId_ = visitor.visitString(
                            hasEventId(), eventId_,
                            other.hasEventId(), other.eventId_);
                    parentId_ = visitor.visitString(
                            hasParentId(), parentId_,
                            other.hasParentId(), other.parentId_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000001;
                                    eventData_ = s;
                                    break;
                                }
                                case 16: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.Annotation.Format value = kungzhi.muse.io.DataSerializer.Annotation.Format.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(2, rawValue);
                                    } else {
                                        bitField0_ |= 0x00000002;
                                        eventDataFormat_ = rawValue;
                                    }
                                    break;
                                }
                                case 26: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000004;
                                    eventType_ = s;
                                    break;
                                }
                                case 34: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000008;
                                    eventId_ = s;
                                    break;
                                }
                                case 42: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000010;
                                    parentId_ = s;
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.Annotation.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.Annotation)
        private static final kungzhi.muse.io.DataSerializer.Annotation DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Annotation();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.Annotation getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Annotation> PARSER;

        public static com.google.protobuf.Parser<Annotation> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 100;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.Annotation> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Annotation.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Annotation.getDefaultInstance(),
                        null,
                        100,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.Annotation.class);
    }

    public interface BatteryOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.Battery)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        boolean hasPercentRemaining();

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        int getPercentRemaining();

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        boolean hasBatteryFuelGaugeMillivolts();

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        int getBatteryFuelGaugeMillivolts();

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        boolean hasBatteryAdcMillivolts();

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        int getBatteryAdcMillivolts();

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        boolean hasTemperatureCelsius();

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        int getTemperatureCelsius();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.Battery}
     */
    public static final class Battery extends
            com.google.protobuf.GeneratedMessageLite<
                    Battery, Battery.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.Battery)
            BatteryOrBuilder {
        private Battery() {
        }

        private int bitField0_;
        public static final int PERCENT_REMAINING_FIELD_NUMBER = 1;
        private int percentRemaining_;

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        public boolean hasPercentRemaining() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        public int getPercentRemaining() {
            return percentRemaining_;
        }

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        private void setPercentRemaining(int value) {
            bitField0_ |= 0x00000001;
            percentRemaining_ = value;
        }

        /**
         * <code>optional uint32 percent_remaining = 1;</code>
         */
        private void clearPercentRemaining() {
            bitField0_ = (bitField0_ & ~0x00000001);
            percentRemaining_ = 0;
        }

        public static final int BATTERY_FUEL_GAUGE_MILLIVOLTS_FIELD_NUMBER = 2;
        private int batteryFuelGaugeMillivolts_;

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        public boolean hasBatteryFuelGaugeMillivolts() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        public int getBatteryFuelGaugeMillivolts() {
            return batteryFuelGaugeMillivolts_;
        }

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        private void setBatteryFuelGaugeMillivolts(int value) {
            bitField0_ |= 0x00000002;
            batteryFuelGaugeMillivolts_ = value;
        }

        /**
         * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
         */
        private void clearBatteryFuelGaugeMillivolts() {
            bitField0_ = (bitField0_ & ~0x00000002);
            batteryFuelGaugeMillivolts_ = 0;
        }

        public static final int BATTERY_ADC_MILLIVOLTS_FIELD_NUMBER = 3;
        private int batteryAdcMillivolts_;

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        public boolean hasBatteryAdcMillivolts() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        public int getBatteryAdcMillivolts() {
            return batteryAdcMillivolts_;
        }

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        private void setBatteryAdcMillivolts(int value) {
            bitField0_ |= 0x00000004;
            batteryAdcMillivolts_ = value;
        }

        /**
         * <code>optional uint32 battery_adc_millivolts = 3;</code>
         */
        private void clearBatteryAdcMillivolts() {
            bitField0_ = (bitField0_ & ~0x00000004);
            batteryAdcMillivolts_ = 0;
        }

        public static final int TEMPERATURE_CELSIUS_FIELD_NUMBER = 4;
        private int temperatureCelsius_;

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        public boolean hasTemperatureCelsius() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        public int getTemperatureCelsius() {
            return temperatureCelsius_;
        }

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        private void setTemperatureCelsius(int value) {
            bitField0_ |= 0x00000008;
            temperatureCelsius_ = value;
        }

        /**
         * <code>optional sint32 temperature_celsius = 4;</code>
         */
        private void clearTemperatureCelsius() {
            bitField0_ = (bitField0_ & ~0x00000008);
            temperatureCelsius_ = 0;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, percentRemaining_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, batteryFuelGaugeMillivolts_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, batteryAdcMillivolts_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeSInt32(4, temperatureCelsius_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, percentRemaining_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, batteryFuelGaugeMillivolts_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, batteryAdcMillivolts_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeSInt32Size(4, temperatureCelsius_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.Battery parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.Battery prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.Battery}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.Battery, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.Battery)
                kungzhi.muse.io.DataSerializer.BatteryOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.Battery.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional uint32 percent_remaining = 1;</code>
             */
            public boolean hasPercentRemaining() {
                return instance.hasPercentRemaining();
            }

            /**
             * <code>optional uint32 percent_remaining = 1;</code>
             */
            public int getPercentRemaining() {
                return instance.getPercentRemaining();
            }

            /**
             * <code>optional uint32 percent_remaining = 1;</code>
             */
            public Builder setPercentRemaining(int value) {
                copyOnWrite();
                instance.setPercentRemaining(value);
                return this;
            }

            /**
             * <code>optional uint32 percent_remaining = 1;</code>
             */
            public Builder clearPercentRemaining() {
                copyOnWrite();
                instance.clearPercentRemaining();
                return this;
            }

            /**
             * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
             */
            public boolean hasBatteryFuelGaugeMillivolts() {
                return instance.hasBatteryFuelGaugeMillivolts();
            }

            /**
             * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
             */
            public int getBatteryFuelGaugeMillivolts() {
                return instance.getBatteryFuelGaugeMillivolts();
            }

            /**
             * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
             */
            public Builder setBatteryFuelGaugeMillivolts(int value) {
                copyOnWrite();
                instance.setBatteryFuelGaugeMillivolts(value);
                return this;
            }

            /**
             * <code>optional uint32 battery_fuel_gauge_millivolts = 2;</code>
             */
            public Builder clearBatteryFuelGaugeMillivolts() {
                copyOnWrite();
                instance.clearBatteryFuelGaugeMillivolts();
                return this;
            }

            /**
             * <code>optional uint32 battery_adc_millivolts = 3;</code>
             */
            public boolean hasBatteryAdcMillivolts() {
                return instance.hasBatteryAdcMillivolts();
            }

            /**
             * <code>optional uint32 battery_adc_millivolts = 3;</code>
             */
            public int getBatteryAdcMillivolts() {
                return instance.getBatteryAdcMillivolts();
            }

            /**
             * <code>optional uint32 battery_adc_millivolts = 3;</code>
             */
            public Builder setBatteryAdcMillivolts(int value) {
                copyOnWrite();
                instance.setBatteryAdcMillivolts(value);
                return this;
            }

            /**
             * <code>optional uint32 battery_adc_millivolts = 3;</code>
             */
            public Builder clearBatteryAdcMillivolts() {
                copyOnWrite();
                instance.clearBatteryAdcMillivolts();
                return this;
            }

            /**
             * <code>optional sint32 temperature_celsius = 4;</code>
             */
            public boolean hasTemperatureCelsius() {
                return instance.hasTemperatureCelsius();
            }

            /**
             * <code>optional sint32 temperature_celsius = 4;</code>
             */
            public int getTemperatureCelsius() {
                return instance.getTemperatureCelsius();
            }

            /**
             * <code>optional sint32 temperature_celsius = 4;</code>
             */
            public Builder setTemperatureCelsius(int value) {
                copyOnWrite();
                instance.setTemperatureCelsius(value);
                return this;
            }

            /**
             * <code>optional sint32 temperature_celsius = 4;</code>
             */
            public Builder clearTemperatureCelsius() {
                copyOnWrite();
                instance.clearTemperatureCelsius();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.Battery)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.Battery();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.Battery other = (kungzhi.muse.io.DataSerializer.Battery) arg1;
                    percentRemaining_ = visitor.visitInt(
                            hasPercentRemaining(), percentRemaining_,
                            other.hasPercentRemaining(), other.percentRemaining_);
                    batteryFuelGaugeMillivolts_ = visitor.visitInt(
                            hasBatteryFuelGaugeMillivolts(), batteryFuelGaugeMillivolts_,
                            other.hasBatteryFuelGaugeMillivolts(), other.batteryFuelGaugeMillivolts_);
                    batteryAdcMillivolts_ = visitor.visitInt(
                            hasBatteryAdcMillivolts(), batteryAdcMillivolts_,
                            other.hasBatteryAdcMillivolts(), other.batteryAdcMillivolts_);
                    temperatureCelsius_ = visitor.visitInt(
                            hasTemperatureCelsius(), temperatureCelsius_,
                            other.hasTemperatureCelsius(), other.temperatureCelsius_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 8: {
                                    bitField0_ |= 0x00000001;
                                    percentRemaining_ = input.readUInt32();
                                    break;
                                }
                                case 16: {
                                    bitField0_ |= 0x00000002;
                                    batteryFuelGaugeMillivolts_ = input.readUInt32();
                                    break;
                                }
                                case 24: {
                                    bitField0_ |= 0x00000004;
                                    batteryAdcMillivolts_ = input.readUInt32();
                                    break;
                                }
                                case 32: {
                                    bitField0_ |= 0x00000008;
                                    temperatureCelsius_ = input.readSInt32();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.Battery.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.Battery)
        private static final kungzhi.muse.io.DataSerializer.Battery DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Battery();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.Battery getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Battery> PARSER;

        public static com.google.protobuf.Parser<Battery> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 101;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.Battery> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Battery.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.Battery.getDefaultInstance(),
                        null,
                        101,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.Battery.class);
    }

    public interface MuseVersionOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseVersion)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        boolean hasHardwareVersion();

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        java.lang.String getHardwareVersion();

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        com.google.protobuf.ByteString
        getHardwareVersionBytes();

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        boolean hasFirmwareHeadsetVersion();

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        java.lang.String getFirmwareHeadsetVersion();

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        com.google.protobuf.ByteString
        getFirmwareHeadsetVersionBytes();

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        boolean hasFirmwareType();

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        java.lang.String getFirmwareType();

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        com.google.protobuf.ByteString
        getFirmwareTypeBytes();

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        boolean hasFirmwareBootloaderVersion();

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        java.lang.String getFirmwareBootloaderVersion();

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        com.google.protobuf.ByteString
        getFirmwareBootloaderVersionBytes();

        /**
         * <code>optional string build_number = 5;</code>
         */
        boolean hasBuildNumber();

        /**
         * <code>optional string build_number = 5;</code>
         */
        java.lang.String getBuildNumber();

        /**
         * <code>optional string build_number = 5;</code>
         */
        com.google.protobuf.ByteString
        getBuildNumberBytes();

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        boolean hasProtocolVersion();

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        java.lang.String getProtocolVersion();

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        com.google.protobuf.ByteString
        getProtocolVersionBytes();

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        boolean hasBspVersion();

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        java.lang.String getBspVersion();

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        com.google.protobuf.ByteString
        getBspVersionBytes();
    }

    /**
     * <pre>
     * This indicates the version of the Muse that was used with this recording.
     * </pre>
     * <p>
     * Protobuf type {@code interaxon.muse_data.MuseVersion}
     */
    public static final class MuseVersion extends
            com.google.protobuf.GeneratedMessageLite<
                    MuseVersion, MuseVersion.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseVersion)
            MuseVersionOrBuilder {
        private MuseVersion() {
            hardwareVersion_ = "";
            firmwareHeadsetVersion_ = "";
            firmwareType_ = "";
            firmwareBootloaderVersion_ = "";
            buildNumber_ = "";
            protocolVersion_ = "";
            bspVersion_ = "";
        }

        private int bitField0_;
        public static final int HARDWARE_VERSION_FIELD_NUMBER = 1;
        private java.lang.String hardwareVersion_;

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        public boolean hasHardwareVersion() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        public java.lang.String getHardwareVersion() {
            return hardwareVersion_;
        }

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        public com.google.protobuf.ByteString
        getHardwareVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(hardwareVersion_);
        }

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        private void setHardwareVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            hardwareVersion_ = value;
        }

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        private void clearHardwareVersion() {
            bitField0_ = (bitField0_ & ~0x00000001);
            hardwareVersion_ = getDefaultInstance().getHardwareVersion();
        }

        /**
         * <code>optional string hardware_version = 1;</code>
         */
        private void setHardwareVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            hardwareVersion_ = value.toStringUtf8();
        }

        public static final int FIRMWARE_HEADSET_VERSION_FIELD_NUMBER = 2;
        private java.lang.String firmwareHeadsetVersion_;

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        public boolean hasFirmwareHeadsetVersion() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        public java.lang.String getFirmwareHeadsetVersion() {
            return firmwareHeadsetVersion_;
        }

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        public com.google.protobuf.ByteString
        getFirmwareHeadsetVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(firmwareHeadsetVersion_);
        }

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        private void setFirmwareHeadsetVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            firmwareHeadsetVersion_ = value;
        }

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        private void clearFirmwareHeadsetVersion() {
            bitField0_ = (bitField0_ & ~0x00000002);
            firmwareHeadsetVersion_ = getDefaultInstance().getFirmwareHeadsetVersion();
        }

        /**
         * <code>optional string firmware_headset_version = 2;</code>
         */
        private void setFirmwareHeadsetVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            firmwareHeadsetVersion_ = value.toStringUtf8();
        }

        public static final int FIRMWARE_TYPE_FIELD_NUMBER = 3;
        private java.lang.String firmwareType_;

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        public boolean hasFirmwareType() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        public java.lang.String getFirmwareType() {
            return firmwareType_;
        }

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        public com.google.protobuf.ByteString
        getFirmwareTypeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(firmwareType_);
        }

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        private void setFirmwareType(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            firmwareType_ = value;
        }

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        private void clearFirmwareType() {
            bitField0_ = (bitField0_ & ~0x00000004);
            firmwareType_ = getDefaultInstance().getFirmwareType();
        }

        /**
         * <code>optional string firmware_type = 3;</code>
         */
        private void setFirmwareTypeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            firmwareType_ = value.toStringUtf8();
        }

        public static final int FIRMWARE_BOOTLOADER_VERSION_FIELD_NUMBER = 4;
        private java.lang.String firmwareBootloaderVersion_;

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        public boolean hasFirmwareBootloaderVersion() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        public java.lang.String getFirmwareBootloaderVersion() {
            return firmwareBootloaderVersion_;
        }

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        public com.google.protobuf.ByteString
        getFirmwareBootloaderVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(firmwareBootloaderVersion_);
        }

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        private void setFirmwareBootloaderVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            firmwareBootloaderVersion_ = value;
        }

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        private void clearFirmwareBootloaderVersion() {
            bitField0_ = (bitField0_ & ~0x00000008);
            firmwareBootloaderVersion_ = getDefaultInstance().getFirmwareBootloaderVersion();
        }

        /**
         * <code>optional string firmware_bootloader_version = 4;</code>
         */
        private void setFirmwareBootloaderVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            firmwareBootloaderVersion_ = value.toStringUtf8();
        }

        public static final int BUILD_NUMBER_FIELD_NUMBER = 5;
        private java.lang.String buildNumber_;

        /**
         * <code>optional string build_number = 5;</code>
         */
        public boolean hasBuildNumber() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional string build_number = 5;</code>
         */
        public java.lang.String getBuildNumber() {
            return buildNumber_;
        }

        /**
         * <code>optional string build_number = 5;</code>
         */
        public com.google.protobuf.ByteString
        getBuildNumberBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(buildNumber_);
        }

        /**
         * <code>optional string build_number = 5;</code>
         */
        private void setBuildNumber(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            buildNumber_ = value;
        }

        /**
         * <code>optional string build_number = 5;</code>
         */
        private void clearBuildNumber() {
            bitField0_ = (bitField0_ & ~0x00000010);
            buildNumber_ = getDefaultInstance().getBuildNumber();
        }

        /**
         * <code>optional string build_number = 5;</code>
         */
        private void setBuildNumberBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            buildNumber_ = value.toStringUtf8();
        }

        public static final int PROTOCOL_VERSION_FIELD_NUMBER = 6;
        private java.lang.String protocolVersion_;

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        public boolean hasProtocolVersion() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        public java.lang.String getProtocolVersion() {
            return protocolVersion_;
        }

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        public com.google.protobuf.ByteString
        getProtocolVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(protocolVersion_);
        }

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        private void setProtocolVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            protocolVersion_ = value;
        }

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        private void clearProtocolVersion() {
            bitField0_ = (bitField0_ & ~0x00000020);
            protocolVersion_ = getDefaultInstance().getProtocolVersion();
        }

        /**
         * <code>optional string protocol_version = 6;</code>
         */
        private void setProtocolVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            protocolVersion_ = value.toStringUtf8();
        }

        public static final int BSP_VERSION_FIELD_NUMBER = 7;
        private java.lang.String bspVersion_;

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        public boolean hasBspVersion() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        public java.lang.String getBspVersion() {
            return bspVersion_;
        }

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        public com.google.protobuf.ByteString
        getBspVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(bspVersion_);
        }

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        private void setBspVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000040;
            bspVersion_ = value;
        }

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        private void clearBspVersion() {
            bitField0_ = (bitField0_ & ~0x00000040);
            bspVersion_ = getDefaultInstance().getBspVersion();
        }

        /**
         * <code>optional string bsp_version = 7;</code>
         */
        private void setBspVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000040;
            bspVersion_ = value.toStringUtf8();
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeString(1, getHardwareVersion());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeString(2, getFirmwareHeadsetVersion());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeString(3, getFirmwareType());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeString(4, getFirmwareBootloaderVersion());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeString(5, getBuildNumber());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeString(6, getProtocolVersion());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeString(7, getBspVersion());
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(1, getHardwareVersion());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(2, getFirmwareHeadsetVersion());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(3, getFirmwareType());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(4, getFirmwareBootloaderVersion());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(5, getBuildNumber());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(6, getProtocolVersion());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(7, getBspVersion());
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseVersion prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * <pre>
         * This indicates the version of the Muse that was used with this recording.
         * </pre>
         * <p>
         * Protobuf type {@code interaxon.muse_data.MuseVersion}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.MuseVersion, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseVersion)
                kungzhi.muse.io.DataSerializer.MuseVersionOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseVersion.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public boolean hasHardwareVersion() {
                return instance.hasHardwareVersion();
            }

            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public java.lang.String getHardwareVersion() {
                return instance.getHardwareVersion();
            }

            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public com.google.protobuf.ByteString
            getHardwareVersionBytes() {
                return instance.getHardwareVersionBytes();
            }

            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public Builder setHardwareVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setHardwareVersion(value);
                return this;
            }

            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public Builder clearHardwareVersion() {
                copyOnWrite();
                instance.clearHardwareVersion();
                return this;
            }

            /**
             * <code>optional string hardware_version = 1;</code>
             */
            public Builder setHardwareVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setHardwareVersionBytes(value);
                return this;
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public boolean hasFirmwareHeadsetVersion() {
                return instance.hasFirmwareHeadsetVersion();
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public java.lang.String getFirmwareHeadsetVersion() {
                return instance.getFirmwareHeadsetVersion();
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public com.google.protobuf.ByteString
            getFirmwareHeadsetVersionBytes() {
                return instance.getFirmwareHeadsetVersionBytes();
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public Builder setFirmwareHeadsetVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setFirmwareHeadsetVersion(value);
                return this;
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public Builder clearFirmwareHeadsetVersion() {
                copyOnWrite();
                instance.clearFirmwareHeadsetVersion();
                return this;
            }

            /**
             * <code>optional string firmware_headset_version = 2;</code>
             */
            public Builder setFirmwareHeadsetVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setFirmwareHeadsetVersionBytes(value);
                return this;
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public boolean hasFirmwareType() {
                return instance.hasFirmwareType();
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public java.lang.String getFirmwareType() {
                return instance.getFirmwareType();
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public com.google.protobuf.ByteString
            getFirmwareTypeBytes() {
                return instance.getFirmwareTypeBytes();
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public Builder setFirmwareType(
                    java.lang.String value) {
                copyOnWrite();
                instance.setFirmwareType(value);
                return this;
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public Builder clearFirmwareType() {
                copyOnWrite();
                instance.clearFirmwareType();
                return this;
            }

            /**
             * <code>optional string firmware_type = 3;</code>
             */
            public Builder setFirmwareTypeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setFirmwareTypeBytes(value);
                return this;
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public boolean hasFirmwareBootloaderVersion() {
                return instance.hasFirmwareBootloaderVersion();
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public java.lang.String getFirmwareBootloaderVersion() {
                return instance.getFirmwareBootloaderVersion();
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public com.google.protobuf.ByteString
            getFirmwareBootloaderVersionBytes() {
                return instance.getFirmwareBootloaderVersionBytes();
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public Builder setFirmwareBootloaderVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setFirmwareBootloaderVersion(value);
                return this;
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public Builder clearFirmwareBootloaderVersion() {
                copyOnWrite();
                instance.clearFirmwareBootloaderVersion();
                return this;
            }

            /**
             * <code>optional string firmware_bootloader_version = 4;</code>
             */
            public Builder setFirmwareBootloaderVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setFirmwareBootloaderVersionBytes(value);
                return this;
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public boolean hasBuildNumber() {
                return instance.hasBuildNumber();
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public java.lang.String getBuildNumber() {
                return instance.getBuildNumber();
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public com.google.protobuf.ByteString
            getBuildNumberBytes() {
                return instance.getBuildNumberBytes();
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public Builder setBuildNumber(
                    java.lang.String value) {
                copyOnWrite();
                instance.setBuildNumber(value);
                return this;
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public Builder clearBuildNumber() {
                copyOnWrite();
                instance.clearBuildNumber();
                return this;
            }

            /**
             * <code>optional string build_number = 5;</code>
             */
            public Builder setBuildNumberBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setBuildNumberBytes(value);
                return this;
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public boolean hasProtocolVersion() {
                return instance.hasProtocolVersion();
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public java.lang.String getProtocolVersion() {
                return instance.getProtocolVersion();
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public com.google.protobuf.ByteString
            getProtocolVersionBytes() {
                return instance.getProtocolVersionBytes();
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public Builder setProtocolVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setProtocolVersion(value);
                return this;
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public Builder clearProtocolVersion() {
                copyOnWrite();
                instance.clearProtocolVersion();
                return this;
            }

            /**
             * <code>optional string protocol_version = 6;</code>
             */
            public Builder setProtocolVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setProtocolVersionBytes(value);
                return this;
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public boolean hasBspVersion() {
                return instance.hasBspVersion();
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public java.lang.String getBspVersion() {
                return instance.getBspVersion();
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public com.google.protobuf.ByteString
            getBspVersionBytes() {
                return instance.getBspVersionBytes();
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public Builder setBspVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setBspVersion(value);
                return this;
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public Builder clearBspVersion() {
                copyOnWrite();
                instance.clearBspVersion();
                return this;
            }

            /**
             * <code>optional string bsp_version = 7;</code>
             */
            public Builder setBspVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setBspVersionBytes(value);
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseVersion)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseVersion();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseVersion other = (kungzhi.muse.io.DataSerializer.MuseVersion) arg1;
                    hardwareVersion_ = visitor.visitString(
                            hasHardwareVersion(), hardwareVersion_,
                            other.hasHardwareVersion(), other.hardwareVersion_);
                    firmwareHeadsetVersion_ = visitor.visitString(
                            hasFirmwareHeadsetVersion(), firmwareHeadsetVersion_,
                            other.hasFirmwareHeadsetVersion(), other.firmwareHeadsetVersion_);
                    firmwareType_ = visitor.visitString(
                            hasFirmwareType(), firmwareType_,
                            other.hasFirmwareType(), other.firmwareType_);
                    firmwareBootloaderVersion_ = visitor.visitString(
                            hasFirmwareBootloaderVersion(), firmwareBootloaderVersion_,
                            other.hasFirmwareBootloaderVersion(), other.firmwareBootloaderVersion_);
                    buildNumber_ = visitor.visitString(
                            hasBuildNumber(), buildNumber_,
                            other.hasBuildNumber(), other.buildNumber_);
                    protocolVersion_ = visitor.visitString(
                            hasProtocolVersion(), protocolVersion_,
                            other.hasProtocolVersion(), other.protocolVersion_);
                    bspVersion_ = visitor.visitString(
                            hasBspVersion(), bspVersion_,
                            other.hasBspVersion(), other.bspVersion_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000001;
                                    hardwareVersion_ = s;
                                    break;
                                }
                                case 18: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000002;
                                    firmwareHeadsetVersion_ = s;
                                    break;
                                }
                                case 26: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000004;
                                    firmwareType_ = s;
                                    break;
                                }
                                case 34: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000008;
                                    firmwareBootloaderVersion_ = s;
                                    break;
                                }
                                case 42: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000010;
                                    buildNumber_ = s;
                                    break;
                                }
                                case 50: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000020;
                                    protocolVersion_ = s;
                                    break;
                                }
                                case 58: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000040;
                                    bspVersion_ = s;
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseVersion.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseVersion)
        private static final kungzhi.muse.io.DataSerializer.MuseVersion DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseVersion();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseVersion getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseVersion> PARSER;

        public static com.google.protobuf.Parser<MuseVersion> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 102;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.MuseVersion> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseVersion.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseVersion.getDefaultInstance(),
                        null,
                        102,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.MuseVersion.class);
    }

    public interface MuseConfigOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseConfig)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        boolean hasMacAddr();

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        java.lang.String getMacAddr();

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        com.google.protobuf.ByteString
        getMacAddrBytes();

        /**
         * <code>optional string serial_number = 2;</code>
         */
        boolean hasSerialNumber();

        /**
         * <code>optional string serial_number = 2;</code>
         */
        java.lang.String getSerialNumber();

        /**
         * <code>optional string serial_number = 2;</code>
         */
        com.google.protobuf.ByteString
        getSerialNumberBytes();

        /**
         * <code>optional string preset = 3;</code>
         */
        boolean hasPreset();

        /**
         * <code>optional string preset = 3;</code>
         */
        java.lang.String getPreset();

        /**
         * <code>optional string preset = 3;</code>
         */
        com.google.protobuf.ByteString
        getPresetBytes();

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        boolean hasModel();

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel getModel();

        /**
         * <code>optional string headband_name = 5;</code>
         */
        boolean hasHeadbandName();

        /**
         * <code>optional string headband_name = 5;</code>
         */
        java.lang.String getHeadbandName();

        /**
         * <code>optional string headband_name = 5;</code>
         */
        com.google.protobuf.ByteString
        getHeadbandNameBytes();

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        boolean hasMicrocontrollerId();

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        java.lang.String getMicrocontrollerId();

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        com.google.protobuf.ByteString
        getMicrocontrollerIdBytes();

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        boolean hasCompressionEnabled();

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        boolean getCompressionEnabled();

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        boolean hasFiltersEnabled();

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        boolean getFiltersEnabled();

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        boolean hasNotchFrequencyHz();

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        int getNotchFrequencyHz();

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        boolean hasEegSampleFrequencyHz();

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        int getEegSampleFrequencyHz();

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        boolean hasEegOutputFrequencyHz();

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        int getEegOutputFrequencyHz();

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        boolean hasEegSamplesBitwidth();

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        int getEegSamplesBitwidth();

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        boolean hasEegChannelCount();

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        int getEegChannelCount();

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        boolean hasEegChannelLayout();

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        java.lang.String getEegChannelLayout();

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        com.google.protobuf.ByteString
        getEegChannelLayoutBytes();

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        boolean hasEegDownsample();

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        int getEegDownsample();

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        boolean hasEegUnits();

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        kungzhi.muse.io.DataSerializer.EEGUnits getEegUnits();

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        java.util.List<kungzhi.muse.io.DataSerializer.HeadLocations> getEegLocationsList();

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        int getEegLocationsCount();

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        kungzhi.muse.io.DataSerializer.HeadLocations getEegLocations(int index);

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        boolean hasEegConversionFactor();

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        float getEegConversionFactor();

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        boolean hasAfeGain();

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        float getAfeGain();

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        boolean hasDrlrefDataEnabled();

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        boolean getDrlrefDataEnabled();

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        boolean hasDrlrefConversionFactor();

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        float getDrlrefConversionFactor();

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        boolean hasDrlrefSampleFrequencyHz();

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        int getDrlrefSampleFrequencyHz();

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        boolean hasAccDataEnabled();

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        boolean getAccDataEnabled();

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        boolean hasAccUnits();

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        kungzhi.muse.io.DataSerializer.AccelerometerUnits getAccUnits();

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        boolean hasAccConversionFactor();

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        float getAccConversionFactor();

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        boolean hasAccSampleFrequencyHz();

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        int getAccSampleFrequencyHz();

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        boolean hasBatteryDataEnabled();

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        boolean getBatteryDataEnabled();

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        boolean hasBatteryPercentRemaining();

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        int getBatteryPercentRemaining();

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        boolean hasBatteryMillivolts();

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        int getBatteryMillivolts();

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        boolean hasErrorDataEnabled();

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        boolean getErrorDataEnabled();

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        boolean hasGyroDataEnabled();

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        boolean getGyroDataEnabled();

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        boolean hasGyroConversionFactor();

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        float getGyroConversionFactor();

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        boolean hasGyroSampleFrequency();

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        int getGyroSampleFrequency();
    }

    /**
     * <pre>
     * This indicates the configuration of a specific Muse specified by the config_id.
     * </pre>
     * <p>
     * Protobuf type {@code interaxon.muse_data.MuseConfig}
     */
    public static final class MuseConfig extends
            com.google.protobuf.GeneratedMessageLite<
                    MuseConfig, MuseConfig.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseConfig)
            MuseConfigOrBuilder {
        private MuseConfig() {
            macAddr_ = "";
            serialNumber_ = "";
            preset_ = "";
            model_ = 1;
            headbandName_ = "";
            microcontrollerId_ = "";
            eegChannelLayout_ = "";
            eegUnits_ = 1;
            eegLocations_ = emptyIntList();
            accUnits_ = 1;
        }

        /**
         * Protobuf enum {@code interaxon.muse_data.MuseConfig.MuseModel}
         */
        public enum MuseModel
                implements com.google.protobuf.Internal.EnumLite {
            /**
             * <code>MU_01 = 1;</code>
             */
            MU_01(1),
            /**
             * <code>MU_02 = 2;</code>
             */
            MU_02(2),;

            /**
             * <code>MU_01 = 1;</code>
             */
            public static final int MU_01_VALUE = 1;
            /**
             * <code>MU_02 = 2;</code>
             */
            public static final int MU_02_VALUE = 2;


            public final int getNumber() {
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static MuseModel valueOf(int value) {
                return forNumber(value);
            }

            public static MuseModel forNumber(int value) {
                switch (value) {
                    case 1:
                        return MU_01;
                    case 2:
                        return MU_02;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<MuseModel>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static final com.google.protobuf.Internal.EnumLiteMap<
                    MuseModel> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<MuseModel>() {
                        public MuseModel findValueByNumber(int number) {
                            return MuseModel.forNumber(number);
                        }
                    };

            private final int value;

            private MuseModel(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:interaxon.muse_data.MuseConfig.MuseModel)
        }

        private int bitField0_;
        public static final int MAC_ADDR_FIELD_NUMBER = 1;
        private java.lang.String macAddr_;

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        public boolean hasMacAddr() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        public java.lang.String getMacAddr() {
            return macAddr_;
        }

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        public com.google.protobuf.ByteString
        getMacAddrBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(macAddr_);
        }

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        private void setMacAddr(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            macAddr_ = value;
        }

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        private void clearMacAddr() {
            bitField0_ = (bitField0_ & ~0x00000001);
            macAddr_ = getDefaultInstance().getMacAddr();
        }

        /**
         * <pre>
         * Global configuration
         * </pre>
         * <p>
         * <code>optional string mac_addr = 1;</code>
         */
        private void setMacAddrBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            macAddr_ = value.toStringUtf8();
        }

        public static final int SERIAL_NUMBER_FIELD_NUMBER = 2;
        private java.lang.String serialNumber_;

        /**
         * <code>optional string serial_number = 2;</code>
         */
        public boolean hasSerialNumber() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string serial_number = 2;</code>
         */
        public java.lang.String getSerialNumber() {
            return serialNumber_;
        }

        /**
         * <code>optional string serial_number = 2;</code>
         */
        public com.google.protobuf.ByteString
        getSerialNumberBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(serialNumber_);
        }

        /**
         * <code>optional string serial_number = 2;</code>
         */
        private void setSerialNumber(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            serialNumber_ = value;
        }

        /**
         * <code>optional string serial_number = 2;</code>
         */
        private void clearSerialNumber() {
            bitField0_ = (bitField0_ & ~0x00000002);
            serialNumber_ = getDefaultInstance().getSerialNumber();
        }

        /**
         * <code>optional string serial_number = 2;</code>
         */
        private void setSerialNumberBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            serialNumber_ = value.toStringUtf8();
        }

        public static final int PRESET_FIELD_NUMBER = 3;
        private java.lang.String preset_;

        /**
         * <code>optional string preset = 3;</code>
         */
        public boolean hasPreset() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional string preset = 3;</code>
         */
        public java.lang.String getPreset() {
            return preset_;
        }

        /**
         * <code>optional string preset = 3;</code>
         */
        public com.google.protobuf.ByteString
        getPresetBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(preset_);
        }

        /**
         * <code>optional string preset = 3;</code>
         */
        private void setPreset(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            preset_ = value;
        }

        /**
         * <code>optional string preset = 3;</code>
         */
        private void clearPreset() {
            bitField0_ = (bitField0_ & ~0x00000004);
            preset_ = getDefaultInstance().getPreset();
        }

        /**
         * <code>optional string preset = 3;</code>
         */
        private void setPresetBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            preset_ = value.toStringUtf8();
        }

        public static final int MODEL_FIELD_NUMBER = 4;
        private int model_;

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        public boolean hasModel() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        public kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel getModel() {
            kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel result = kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel.forNumber(model_);
            return result == null ? kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel.MU_01 : result;
        }

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        private void setModel(kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            model_ = value.getNumber();
        }

        /**
         * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
         */
        private void clearModel() {
            bitField0_ = (bitField0_ & ~0x00000008);
            model_ = 1;
        }

        public static final int HEADBAND_NAME_FIELD_NUMBER = 5;
        private java.lang.String headbandName_;

        /**
         * <code>optional string headband_name = 5;</code>
         */
        public boolean hasHeadbandName() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional string headband_name = 5;</code>
         */
        public java.lang.String getHeadbandName() {
            return headbandName_;
        }

        /**
         * <code>optional string headband_name = 5;</code>
         */
        public com.google.protobuf.ByteString
        getHeadbandNameBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(headbandName_);
        }

        /**
         * <code>optional string headband_name = 5;</code>
         */
        private void setHeadbandName(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            headbandName_ = value;
        }

        /**
         * <code>optional string headband_name = 5;</code>
         */
        private void clearHeadbandName() {
            bitField0_ = (bitField0_ & ~0x00000010);
            headbandName_ = getDefaultInstance().getHeadbandName();
        }

        /**
         * <code>optional string headband_name = 5;</code>
         */
        private void setHeadbandNameBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            headbandName_ = value.toStringUtf8();
        }

        public static final int MICROCONTROLLER_ID_FIELD_NUMBER = 6;
        private java.lang.String microcontrollerId_;

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        public boolean hasMicrocontrollerId() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        public java.lang.String getMicrocontrollerId() {
            return microcontrollerId_;
        }

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        public com.google.protobuf.ByteString
        getMicrocontrollerIdBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(microcontrollerId_);
        }

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        private void setMicrocontrollerId(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            microcontrollerId_ = value;
        }

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        private void clearMicrocontrollerId() {
            bitField0_ = (bitField0_ & ~0x00000020);
            microcontrollerId_ = getDefaultInstance().getMicrocontrollerId();
        }

        /**
         * <code>optional string microcontroller_id = 6;</code>
         */
        private void setMicrocontrollerIdBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            microcontrollerId_ = value.toStringUtf8();
        }

        public static final int COMPRESSION_ENABLED_FIELD_NUMBER = 100;
        private boolean compressionEnabled_;

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        public boolean hasCompressionEnabled() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        public boolean getCompressionEnabled() {
            return compressionEnabled_;
        }

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        private void setCompressionEnabled(boolean value) {
            bitField0_ |= 0x00000040;
            compressionEnabled_ = value;
        }

        /**
         * <pre>
         * Network protocol
         * </pre>
         * <p>
         * <code>optional bool compression_enabled = 100;</code>
         */
        private void clearCompressionEnabled() {
            bitField0_ = (bitField0_ & ~0x00000040);
            compressionEnabled_ = false;
        }

        public static final int FILTERS_ENABLED_FIELD_NUMBER = 201;
        private boolean filtersEnabled_;

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        public boolean hasFiltersEnabled() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        public boolean getFiltersEnabled() {
            return filtersEnabled_;
        }

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        private void setFiltersEnabled(boolean value) {
            bitField0_ |= 0x00000080;
            filtersEnabled_ = value;
        }

        /**
         * <pre>
         * EEG osc
         * </pre>
         * <p>
         * <code>optional bool filters_enabled = 201;</code>
         */
        private void clearFiltersEnabled() {
            bitField0_ = (bitField0_ & ~0x00000080);
            filtersEnabled_ = false;
        }

        public static final int NOTCH_FREQUENCY_HZ_FIELD_NUMBER = 202;
        private int notchFrequencyHz_;

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        public boolean hasNotchFrequencyHz() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        public int getNotchFrequencyHz() {
            return notchFrequencyHz_;
        }

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        private void setNotchFrequencyHz(int value) {
            bitField0_ |= 0x00000100;
            notchFrequencyHz_ = value;
        }

        /**
         * <code>optional uint32 notch_frequency_hz = 202;</code>
         */
        private void clearNotchFrequencyHz() {
            bitField0_ = (bitField0_ & ~0x00000100);
            notchFrequencyHz_ = 0;
        }

        public static final int EEG_SAMPLE_FREQUENCY_HZ_FIELD_NUMBER = 203;
        private int eegSampleFrequencyHz_;

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        public boolean hasEegSampleFrequencyHz() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        public int getEegSampleFrequencyHz() {
            return eegSampleFrequencyHz_;
        }

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        private void setEegSampleFrequencyHz(int value) {
            bitField0_ |= 0x00000200;
            eegSampleFrequencyHz_ = value;
        }

        /**
         * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
         */
        private void clearEegSampleFrequencyHz() {
            bitField0_ = (bitField0_ & ~0x00000200);
            eegSampleFrequencyHz_ = 0;
        }

        public static final int EEG_OUTPUT_FREQUENCY_HZ_FIELD_NUMBER = 204;
        private int eegOutputFrequencyHz_;

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        public boolean hasEegOutputFrequencyHz() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        public int getEegOutputFrequencyHz() {
            return eegOutputFrequencyHz_;
        }

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        private void setEegOutputFrequencyHz(int value) {
            bitField0_ |= 0x00000400;
            eegOutputFrequencyHz_ = value;
        }

        /**
         * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
         */
        private void clearEegOutputFrequencyHz() {
            bitField0_ = (bitField0_ & ~0x00000400);
            eegOutputFrequencyHz_ = 0;
        }

        public static final int EEG_SAMPLES_BITWIDTH_FIELD_NUMBER = 205;
        private int eegSamplesBitwidth_;

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        public boolean hasEegSamplesBitwidth() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        public int getEegSamplesBitwidth() {
            return eegSamplesBitwidth_;
        }

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        private void setEegSamplesBitwidth(int value) {
            bitField0_ |= 0x00000800;
            eegSamplesBitwidth_ = value;
        }

        /**
         * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
         */
        private void clearEegSamplesBitwidth() {
            bitField0_ = (bitField0_ & ~0x00000800);
            eegSamplesBitwidth_ = 0;
        }

        public static final int EEG_CHANNEL_COUNT_FIELD_NUMBER = 206;
        private int eegChannelCount_;

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        public boolean hasEegChannelCount() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        public int getEegChannelCount() {
            return eegChannelCount_;
        }

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        private void setEegChannelCount(int value) {
            bitField0_ |= 0x00001000;
            eegChannelCount_ = value;
        }

        /**
         * <code>optional uint32 eeg_channel_count = 206;</code>
         */
        private void clearEegChannelCount() {
            bitField0_ = (bitField0_ & ~0x00001000);
            eegChannelCount_ = 0;
        }

        public static final int EEG_CHANNEL_LAYOUT_FIELD_NUMBER = 207;
        private java.lang.String eegChannelLayout_;

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        public boolean hasEegChannelLayout() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        public java.lang.String getEegChannelLayout() {
            return eegChannelLayout_;
        }

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        public com.google.protobuf.ByteString
        getEegChannelLayoutBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(eegChannelLayout_);
        }

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        private void setEegChannelLayout(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00002000;
            eegChannelLayout_ = value;
        }

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        private void clearEegChannelLayout() {
            bitField0_ = (bitField0_ & ~0x00002000);
            eegChannelLayout_ = getDefaultInstance().getEegChannelLayout();
        }

        /**
         * <pre>
         * raw string, converted to eeg_locations
         * </pre>
         * <p>
         * <code>optional string eeg_channel_layout = 207;</code>
         */
        private void setEegChannelLayoutBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00002000;
            eegChannelLayout_ = value.toStringUtf8();
        }

        public static final int EEG_DOWNSAMPLE_FIELD_NUMBER = 208;
        private int eegDownsample_;

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        public boolean hasEegDownsample() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        public int getEegDownsample() {
            return eegDownsample_;
        }

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        private void setEegDownsample(int value) {
            bitField0_ |= 0x00004000;
            eegDownsample_ = value;
        }

        /**
         * <code>optional uint32 eeg_downsample = 208;</code>
         */
        private void clearEegDownsample() {
            bitField0_ = (bitField0_ & ~0x00004000);
            eegDownsample_ = 0;
        }

        public static final int EEG_UNITS_FIELD_NUMBER = 209;
        private int eegUnits_;

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        public boolean hasEegUnits() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        public kungzhi.muse.io.DataSerializer.EEGUnits getEegUnits() {
            kungzhi.muse.io.DataSerializer.EEGUnits result = kungzhi.muse.io.DataSerializer.EEGUnits.forNumber(eegUnits_);
            return result == null ? kungzhi.muse.io.DataSerializer.EEGUnits.EEG_MICROVOLTS : result;
        }

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        private void setEegUnits(kungzhi.muse.io.DataSerializer.EEGUnits value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00008000;
            eegUnits_ = value.getNumber();
        }

        /**
         * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
         */
        private void clearEegUnits() {
            bitField0_ = (bitField0_ & ~0x00008000);
            eegUnits_ = 1;
        }

        public static final int EEG_LOCATIONS_FIELD_NUMBER = 210;
        private com.google.protobuf.Internal.IntList eegLocations_;
        private static final com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, kungzhi.muse.io.DataSerializer.HeadLocations> eegLocations_converter_ =
                new com.google.protobuf.Internal.ListAdapter.Converter<
                        java.lang.Integer, kungzhi.muse.io.DataSerializer.HeadLocations>() {
                    public kungzhi.muse.io.DataSerializer.HeadLocations convert(java.lang.Integer from) {
                        kungzhi.muse.io.DataSerializer.HeadLocations result = kungzhi.muse.io.DataSerializer.HeadLocations.forNumber(from);
                        return result == null ? kungzhi.muse.io.DataSerializer.HeadLocations.NZ : result;
                    }
                };

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        public java.util.List<kungzhi.muse.io.DataSerializer.HeadLocations> getEegLocationsList() {
            return new com.google.protobuf.Internal.ListAdapter<
                    java.lang.Integer, kungzhi.muse.io.DataSerializer.HeadLocations>(eegLocations_, eegLocations_converter_);
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        public int getEegLocationsCount() {
            return eegLocations_.size();
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        public kungzhi.muse.io.DataSerializer.HeadLocations getEegLocations(int index) {
            return eegLocations_converter_.convert(eegLocations_.getInt(index));
        }

        private void ensureEegLocationsIsMutable() {
            if (!eegLocations_.isModifiable()) {
                eegLocations_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(eegLocations_);
            }
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        private void setEegLocations(
                int index, kungzhi.muse.io.DataSerializer.HeadLocations value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureEegLocationsIsMutable();
            eegLocations_.setInt(index, value.getNumber());
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        private void addEegLocations(kungzhi.muse.io.DataSerializer.HeadLocations value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureEegLocationsIsMutable();
            eegLocations_.addInt(value.getNumber());
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        private void addAllEegLocations(
                java.lang.Iterable<? extends kungzhi.muse.io.DataSerializer.HeadLocations> values) {
            ensureEegLocationsIsMutable();
            for (kungzhi.muse.io.DataSerializer.HeadLocations value : values) {
                eegLocations_.addInt(value.getNumber());
            }
        }

        /**
         * <pre>
         * derived from eeg_channel_layout
         * </pre>
         * <p>
         * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
         */
        private void clearEegLocations() {
            eegLocations_ = emptyIntList();
        }

        public static final int EEG_CONVERSION_FACTOR_FIELD_NUMBER = 211;
        private float eegConversionFactor_;

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        public boolean hasEegConversionFactor() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        public float getEegConversionFactor() {
            return eegConversionFactor_;
        }

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        private void setEegConversionFactor(float value) {
            bitField0_ |= 0x00010000;
            eegConversionFactor_ = value;
        }

        /**
         * <code>optional float eeg_conversion_factor = 211;</code>
         */
        private void clearEegConversionFactor() {
            bitField0_ = (bitField0_ & ~0x00010000);
            eegConversionFactor_ = 0F;
        }

        public static final int AFE_GAIN_FIELD_NUMBER = 212;
        private float afeGain_;

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        public boolean hasAfeGain() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        public float getAfeGain() {
            return afeGain_;
        }

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        private void setAfeGain(float value) {
            bitField0_ |= 0x00020000;
            afeGain_ = value;
        }

        /**
         * <pre>
         * Analog Front End Gain
         * </pre>
         * <p>
         * <code>optional float afe_gain = 212;</code>
         */
        private void clearAfeGain() {
            bitField0_ = (bitField0_ & ~0x00020000);
            afeGain_ = 0F;
        }

        public static final int DRLREF_DATA_ENABLED_FIELD_NUMBER = 300;
        private boolean drlrefDataEnabled_;

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        public boolean hasDrlrefDataEnabled() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        public boolean getDrlrefDataEnabled() {
            return drlrefDataEnabled_;
        }

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        private void setDrlrefDataEnabled(boolean value) {
            bitField0_ |= 0x00040000;
            drlrefDataEnabled_ = value;
        }

        /**
         * <pre>
         * DRLREF osc
         * </pre>
         * <p>
         * <code>optional bool drlref_data_enabled = 300;</code>
         */
        private void clearDrlrefDataEnabled() {
            bitField0_ = (bitField0_ & ~0x00040000);
            drlrefDataEnabled_ = false;
        }

        public static final int DRLREF_CONVERSION_FACTOR_FIELD_NUMBER = 301;
        private float drlrefConversionFactor_;

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        public boolean hasDrlrefConversionFactor() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        public float getDrlrefConversionFactor() {
            return drlrefConversionFactor_;
        }

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        private void setDrlrefConversionFactor(float value) {
            bitField0_ |= 0x00080000;
            drlrefConversionFactor_ = value;
        }

        /**
         * <code>optional float drlref_conversion_factor = 301;</code>
         */
        private void clearDrlrefConversionFactor() {
            bitField0_ = (bitField0_ & ~0x00080000);
            drlrefConversionFactor_ = 0F;
        }

        public static final int DRLREF_SAMPLE_FREQUENCY_HZ_FIELD_NUMBER = 302;
        private int drlrefSampleFrequencyHz_;

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        public boolean hasDrlrefSampleFrequencyHz() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        public int getDrlrefSampleFrequencyHz() {
            return drlrefSampleFrequencyHz_;
        }

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        private void setDrlrefSampleFrequencyHz(int value) {
            bitField0_ |= 0x00100000;
            drlrefSampleFrequencyHz_ = value;
        }

        /**
         * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
         */
        private void clearDrlrefSampleFrequencyHz() {
            bitField0_ = (bitField0_ & ~0x00100000);
            drlrefSampleFrequencyHz_ = 0;
        }

        public static final int ACC_DATA_ENABLED_FIELD_NUMBER = 400;
        private boolean accDataEnabled_;

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        public boolean hasAccDataEnabled() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        public boolean getAccDataEnabled() {
            return accDataEnabled_;
        }

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        private void setAccDataEnabled(boolean value) {
            bitField0_ |= 0x00200000;
            accDataEnabled_ = value;
        }

        /**
         * <pre>
         * Accelerometer osc
         * </pre>
         * <p>
         * <code>optional bool acc_data_enabled = 400;</code>
         */
        private void clearAccDataEnabled() {
            bitField0_ = (bitField0_ & ~0x00200000);
            accDataEnabled_ = false;
        }

        public static final int ACC_UNITS_FIELD_NUMBER = 401;
        private int accUnits_;

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        public boolean hasAccUnits() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        public kungzhi.muse.io.DataSerializer.AccelerometerUnits getAccUnits() {
            kungzhi.muse.io.DataSerializer.AccelerometerUnits result = kungzhi.muse.io.DataSerializer.AccelerometerUnits.forNumber(accUnits_);
            return result == null ? kungzhi.muse.io.DataSerializer.AccelerometerUnits.ACC_GFORCE : result;
        }

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        private void setAccUnits(kungzhi.muse.io.DataSerializer.AccelerometerUnits value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00400000;
            accUnits_ = value.getNumber();
        }

        /**
         * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
         */
        private void clearAccUnits() {
            bitField0_ = (bitField0_ & ~0x00400000);
            accUnits_ = 1;
        }

        public static final int ACC_CONVERSION_FACTOR_FIELD_NUMBER = 402;
        private float accConversionFactor_;

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        public boolean hasAccConversionFactor() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        public float getAccConversionFactor() {
            return accConversionFactor_;
        }

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        private void setAccConversionFactor(float value) {
            bitField0_ |= 0x00800000;
            accConversionFactor_ = value;
        }

        /**
         * <code>optional float acc_conversion_factor = 402;</code>
         */
        private void clearAccConversionFactor() {
            bitField0_ = (bitField0_ & ~0x00800000);
            accConversionFactor_ = 0F;
        }

        public static final int ACC_SAMPLE_FREQUENCY_HZ_FIELD_NUMBER = 403;
        private int accSampleFrequencyHz_;

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        public boolean hasAccSampleFrequencyHz() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        public int getAccSampleFrequencyHz() {
            return accSampleFrequencyHz_;
        }

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        private void setAccSampleFrequencyHz(int value) {
            bitField0_ |= 0x01000000;
            accSampleFrequencyHz_ = value;
        }

        /**
         * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
         */
        private void clearAccSampleFrequencyHz() {
            bitField0_ = (bitField0_ & ~0x01000000);
            accSampleFrequencyHz_ = 0;
        }

        public static final int BATTERY_DATA_ENABLED_FIELD_NUMBER = 500;
        private boolean batteryDataEnabled_;

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        public boolean hasBatteryDataEnabled() {
            return ((bitField0_ & 0x02000000) == 0x02000000);
        }

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        public boolean getBatteryDataEnabled() {
            return batteryDataEnabled_;
        }

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        private void setBatteryDataEnabled(boolean value) {
            bitField0_ |= 0x02000000;
            batteryDataEnabled_ = value;
        }

        /**
         * <pre>
         * Battery osc
         * </pre>
         * <p>
         * <code>optional bool battery_data_enabled = 500;</code>
         */
        private void clearBatteryDataEnabled() {
            bitField0_ = (bitField0_ & ~0x02000000);
            batteryDataEnabled_ = false;
        }

        public static final int BATTERY_PERCENT_REMAINING_FIELD_NUMBER = 501;
        private int batteryPercentRemaining_;

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        public boolean hasBatteryPercentRemaining() {
            return ((bitField0_ & 0x04000000) == 0x04000000);
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        public int getBatteryPercentRemaining() {
            return batteryPercentRemaining_;
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        private void setBatteryPercentRemaining(int value) {
            bitField0_ |= 0x04000000;
            batteryPercentRemaining_ = value;
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_percent_remaining = 501;</code>
         */
        private void clearBatteryPercentRemaining() {
            bitField0_ = (bitField0_ & ~0x04000000);
            batteryPercentRemaining_ = 0;
        }

        public static final int BATTERY_MILLIVOLTS_FIELD_NUMBER = 502;
        private int batteryMillivolts_;

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        public boolean hasBatteryMillivolts() {
            return ((bitField0_ & 0x08000000) == 0x08000000);
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        public int getBatteryMillivolts() {
            return batteryMillivolts_;
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        private void setBatteryMillivolts(int value) {
            bitField0_ |= 0x08000000;
            batteryMillivolts_ = value;
        }

        /**
         * <pre>
         * This is a bootstrap value since battery info is only emitted every few seconds
         * </pre>
         * <p>
         * <code>optional uint32 battery_millivolts = 502;</code>
         */
        private void clearBatteryMillivolts() {
            bitField0_ = (bitField0_ & ~0x08000000);
            batteryMillivolts_ = 0;
        }

        public static final int ERROR_DATA_ENABLED_FIELD_NUMBER = 600;
        private boolean errorDataEnabled_;

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        public boolean hasErrorDataEnabled() {
            return ((bitField0_ & 0x10000000) == 0x10000000);
        }

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        public boolean getErrorDataEnabled() {
            return errorDataEnabled_;
        }

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        private void setErrorDataEnabled(boolean value) {
            bitField0_ |= 0x10000000;
            errorDataEnabled_ = value;
        }

        /**
         * <pre>
         * Error osc (hardware/firmware level errors)
         * </pre>
         * <p>
         * <code>optional bool error_data_enabled = 600;</code>
         */
        private void clearErrorDataEnabled() {
            bitField0_ = (bitField0_ & ~0x10000000);
            errorDataEnabled_ = false;
        }

        public static final int GYRO_DATA_ENABLED_FIELD_NUMBER = 700;
        private boolean gyroDataEnabled_;

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        public boolean hasGyroDataEnabled() {
            return ((bitField0_ & 0x20000000) == 0x20000000);
        }

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        public boolean getGyroDataEnabled() {
            return gyroDataEnabled_;
        }

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        private void setGyroDataEnabled(boolean value) {
            bitField0_ |= 0x20000000;
            gyroDataEnabled_ = value;
        }

        /**
         * <pre>
         * Gyroscope osc
         * </pre>
         * <p>
         * <code>optional bool gyro_data_enabled = 700;</code>
         */
        private void clearGyroDataEnabled() {
            bitField0_ = (bitField0_ & ~0x20000000);
            gyroDataEnabled_ = false;
        }

        public static final int GYRO_CONVERSION_FACTOR_FIELD_NUMBER = 702;
        private float gyroConversionFactor_;

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        public boolean hasGyroConversionFactor() {
            return ((bitField0_ & 0x40000000) == 0x40000000);
        }

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        public float getGyroConversionFactor() {
            return gyroConversionFactor_;
        }

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        private void setGyroConversionFactor(float value) {
            bitField0_ |= 0x40000000;
            gyroConversionFactor_ = value;
        }

        /**
         * <code>optional float gyro_conversion_factor = 702;</code>
         */
        private void clearGyroConversionFactor() {
            bitField0_ = (bitField0_ & ~0x40000000);
            gyroConversionFactor_ = 0F;
        }

        public static final int GYRO_SAMPLE_FREQUENCY_FIELD_NUMBER = 703;
        private int gyroSampleFrequency_;

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        public boolean hasGyroSampleFrequency() {
            return ((bitField0_ & 0x80000000) == 0x80000000);
        }

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        public int getGyroSampleFrequency() {
            return gyroSampleFrequency_;
        }

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        private void setGyroSampleFrequency(int value) {
            bitField0_ |= 0x80000000;
            gyroSampleFrequency_ = value;
        }

        /**
         * <code>optional uint32 gyro_sample_frequency = 703;</code>
         */
        private void clearGyroSampleFrequency() {
            bitField0_ = (bitField0_ & ~0x80000000);
            gyroSampleFrequency_ = 0;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeString(1, getMacAddr());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeString(2, getSerialNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeString(3, getPreset());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeEnum(4, model_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeString(5, getHeadbandName());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeString(6, getMicrocontrollerId());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeBool(100, compressionEnabled_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeBool(201, filtersEnabled_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeUInt32(202, notchFrequencyHz_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeUInt32(203, eegSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeUInt32(204, eegOutputFrequencyHz_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeUInt32(205, eegSamplesBitwidth_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeUInt32(206, eegChannelCount_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeString(207, getEegChannelLayout());
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeUInt32(208, eegDownsample_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeEnum(209, eegUnits_);
            }
            for (int i = 0; i < eegLocations_.size(); i++) {
                output.writeEnum(210, eegLocations_.getInt(i));
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeFloat(211, eegConversionFactor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeFloat(212, afeGain_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeBool(300, drlrefDataEnabled_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeFloat(301, drlrefConversionFactor_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeUInt32(302, drlrefSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeBool(400, accDataEnabled_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeEnum(401, accUnits_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeFloat(402, accConversionFactor_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeUInt32(403, accSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                output.writeBool(500, batteryDataEnabled_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                output.writeUInt32(501, batteryPercentRemaining_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                output.writeUInt32(502, batteryMillivolts_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                output.writeBool(600, errorDataEnabled_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                output.writeBool(700, gyroDataEnabled_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                output.writeFloat(702, gyroConversionFactor_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                output.writeUInt32(703, gyroSampleFrequency_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(1, getMacAddr());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(2, getSerialNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(3, getPreset());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(4, model_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(5, getHeadbandName());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(6, getMicrocontrollerId());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(100, compressionEnabled_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(201, filtersEnabled_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(202, notchFrequencyHz_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(203, eegSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(204, eegOutputFrequencyHz_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(205, eegSamplesBitwidth_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(206, eegChannelCount_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(207, getEegChannelLayout());
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(208, eegDownsample_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(209, eegUnits_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < eegLocations_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeEnumSizeNoTag(eegLocations_.getInt(i));
                }
                size += dataSize;
                size += 2 * eegLocations_.size();
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(211, eegConversionFactor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(212, afeGain_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(300, drlrefDataEnabled_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(301, drlrefConversionFactor_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(302, drlrefSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(400, accDataEnabled_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(401, accUnits_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(402, accConversionFactor_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(403, accSampleFrequencyHz_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(500, batteryDataEnabled_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(501, batteryPercentRemaining_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(502, batteryMillivolts_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(600, errorDataEnabled_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(700, gyroDataEnabled_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(702, gyroConversionFactor_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(703, gyroSampleFrequency_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseConfig prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * <pre>
         * This indicates the configuration of a specific Muse specified by the config_id.
         * </pre>
         * <p>
         * Protobuf type {@code interaxon.muse_data.MuseConfig}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.MuseConfig, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseConfig)
                kungzhi.muse.io.DataSerializer.MuseConfigOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseConfig.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public boolean hasMacAddr() {
                return instance.hasMacAddr();
            }

            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public java.lang.String getMacAddr() {
                return instance.getMacAddr();
            }

            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public com.google.protobuf.ByteString
            getMacAddrBytes() {
                return instance.getMacAddrBytes();
            }

            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public Builder setMacAddr(
                    java.lang.String value) {
                copyOnWrite();
                instance.setMacAddr(value);
                return this;
            }

            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public Builder clearMacAddr() {
                copyOnWrite();
                instance.clearMacAddr();
                return this;
            }

            /**
             * <pre>
             * Global configuration
             * </pre>
             * <p>
             * <code>optional string mac_addr = 1;</code>
             */
            public Builder setMacAddrBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setMacAddrBytes(value);
                return this;
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public boolean hasSerialNumber() {
                return instance.hasSerialNumber();
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public java.lang.String getSerialNumber() {
                return instance.getSerialNumber();
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public com.google.protobuf.ByteString
            getSerialNumberBytes() {
                return instance.getSerialNumberBytes();
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public Builder setSerialNumber(
                    java.lang.String value) {
                copyOnWrite();
                instance.setSerialNumber(value);
                return this;
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public Builder clearSerialNumber() {
                copyOnWrite();
                instance.clearSerialNumber();
                return this;
            }

            /**
             * <code>optional string serial_number = 2;</code>
             */
            public Builder setSerialNumberBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setSerialNumberBytes(value);
                return this;
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public boolean hasPreset() {
                return instance.hasPreset();
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public java.lang.String getPreset() {
                return instance.getPreset();
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public com.google.protobuf.ByteString
            getPresetBytes() {
                return instance.getPresetBytes();
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public Builder setPreset(
                    java.lang.String value) {
                copyOnWrite();
                instance.setPreset(value);
                return this;
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public Builder clearPreset() {
                copyOnWrite();
                instance.clearPreset();
                return this;
            }

            /**
             * <code>optional string preset = 3;</code>
             */
            public Builder setPresetBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setPresetBytes(value);
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
             */
            public boolean hasModel() {
                return instance.hasModel();
            }

            /**
             * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
             */
            public kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel getModel() {
                return instance.getModel();
            }

            /**
             * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
             */
            public Builder setModel(kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel value) {
                copyOnWrite();
                instance.setModel(value);
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.MuseConfig.MuseModel model = 4;</code>
             */
            public Builder clearModel() {
                copyOnWrite();
                instance.clearModel();
                return this;
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public boolean hasHeadbandName() {
                return instance.hasHeadbandName();
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public java.lang.String getHeadbandName() {
                return instance.getHeadbandName();
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public com.google.protobuf.ByteString
            getHeadbandNameBytes() {
                return instance.getHeadbandNameBytes();
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public Builder setHeadbandName(
                    java.lang.String value) {
                copyOnWrite();
                instance.setHeadbandName(value);
                return this;
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public Builder clearHeadbandName() {
                copyOnWrite();
                instance.clearHeadbandName();
                return this;
            }

            /**
             * <code>optional string headband_name = 5;</code>
             */
            public Builder setHeadbandNameBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setHeadbandNameBytes(value);
                return this;
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public boolean hasMicrocontrollerId() {
                return instance.hasMicrocontrollerId();
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public java.lang.String getMicrocontrollerId() {
                return instance.getMicrocontrollerId();
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public com.google.protobuf.ByteString
            getMicrocontrollerIdBytes() {
                return instance.getMicrocontrollerIdBytes();
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public Builder setMicrocontrollerId(
                    java.lang.String value) {
                copyOnWrite();
                instance.setMicrocontrollerId(value);
                return this;
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public Builder clearMicrocontrollerId() {
                copyOnWrite();
                instance.clearMicrocontrollerId();
                return this;
            }

            /**
             * <code>optional string microcontroller_id = 6;</code>
             */
            public Builder setMicrocontrollerIdBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setMicrocontrollerIdBytes(value);
                return this;
            }

            /**
             * <pre>
             * Network protocol
             * </pre>
             * <p>
             * <code>optional bool compression_enabled = 100;</code>
             */
            public boolean hasCompressionEnabled() {
                return instance.hasCompressionEnabled();
            }

            /**
             * <pre>
             * Network protocol
             * </pre>
             * <p>
             * <code>optional bool compression_enabled = 100;</code>
             */
            public boolean getCompressionEnabled() {
                return instance.getCompressionEnabled();
            }

            /**
             * <pre>
             * Network protocol
             * </pre>
             * <p>
             * <code>optional bool compression_enabled = 100;</code>
             */
            public Builder setCompressionEnabled(boolean value) {
                copyOnWrite();
                instance.setCompressionEnabled(value);
                return this;
            }

            /**
             * <pre>
             * Network protocol
             * </pre>
             * <p>
             * <code>optional bool compression_enabled = 100;</code>
             */
            public Builder clearCompressionEnabled() {
                copyOnWrite();
                instance.clearCompressionEnabled();
                return this;
            }

            /**
             * <pre>
             * EEG osc
             * </pre>
             * <p>
             * <code>optional bool filters_enabled = 201;</code>
             */
            public boolean hasFiltersEnabled() {
                return instance.hasFiltersEnabled();
            }

            /**
             * <pre>
             * EEG osc
             * </pre>
             * <p>
             * <code>optional bool filters_enabled = 201;</code>
             */
            public boolean getFiltersEnabled() {
                return instance.getFiltersEnabled();
            }

            /**
             * <pre>
             * EEG osc
             * </pre>
             * <p>
             * <code>optional bool filters_enabled = 201;</code>
             */
            public Builder setFiltersEnabled(boolean value) {
                copyOnWrite();
                instance.setFiltersEnabled(value);
                return this;
            }

            /**
             * <pre>
             * EEG osc
             * </pre>
             * <p>
             * <code>optional bool filters_enabled = 201;</code>
             */
            public Builder clearFiltersEnabled() {
                copyOnWrite();
                instance.clearFiltersEnabled();
                return this;
            }

            /**
             * <code>optional uint32 notch_frequency_hz = 202;</code>
             */
            public boolean hasNotchFrequencyHz() {
                return instance.hasNotchFrequencyHz();
            }

            /**
             * <code>optional uint32 notch_frequency_hz = 202;</code>
             */
            public int getNotchFrequencyHz() {
                return instance.getNotchFrequencyHz();
            }

            /**
             * <code>optional uint32 notch_frequency_hz = 202;</code>
             */
            public Builder setNotchFrequencyHz(int value) {
                copyOnWrite();
                instance.setNotchFrequencyHz(value);
                return this;
            }

            /**
             * <code>optional uint32 notch_frequency_hz = 202;</code>
             */
            public Builder clearNotchFrequencyHz() {
                copyOnWrite();
                instance.clearNotchFrequencyHz();
                return this;
            }

            /**
             * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
             */
            public boolean hasEegSampleFrequencyHz() {
                return instance.hasEegSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
             */
            public int getEegSampleFrequencyHz() {
                return instance.getEegSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
             */
            public Builder setEegSampleFrequencyHz(int value) {
                copyOnWrite();
                instance.setEegSampleFrequencyHz(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_sample_frequency_hz = 203;</code>
             */
            public Builder clearEegSampleFrequencyHz() {
                copyOnWrite();
                instance.clearEegSampleFrequencyHz();
                return this;
            }

            /**
             * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
             */
            public boolean hasEegOutputFrequencyHz() {
                return instance.hasEegOutputFrequencyHz();
            }

            /**
             * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
             */
            public int getEegOutputFrequencyHz() {
                return instance.getEegOutputFrequencyHz();
            }

            /**
             * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
             */
            public Builder setEegOutputFrequencyHz(int value) {
                copyOnWrite();
                instance.setEegOutputFrequencyHz(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_output_frequency_hz = 204;</code>
             */
            public Builder clearEegOutputFrequencyHz() {
                copyOnWrite();
                instance.clearEegOutputFrequencyHz();
                return this;
            }

            /**
             * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
             */
            public boolean hasEegSamplesBitwidth() {
                return instance.hasEegSamplesBitwidth();
            }

            /**
             * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
             */
            public int getEegSamplesBitwidth() {
                return instance.getEegSamplesBitwidth();
            }

            /**
             * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
             */
            public Builder setEegSamplesBitwidth(int value) {
                copyOnWrite();
                instance.setEegSamplesBitwidth(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_samples_bitwidth = 205;</code>
             */
            public Builder clearEegSamplesBitwidth() {
                copyOnWrite();
                instance.clearEegSamplesBitwidth();
                return this;
            }

            /**
             * <code>optional uint32 eeg_channel_count = 206;</code>
             */
            public boolean hasEegChannelCount() {
                return instance.hasEegChannelCount();
            }

            /**
             * <code>optional uint32 eeg_channel_count = 206;</code>
             */
            public int getEegChannelCount() {
                return instance.getEegChannelCount();
            }

            /**
             * <code>optional uint32 eeg_channel_count = 206;</code>
             */
            public Builder setEegChannelCount(int value) {
                copyOnWrite();
                instance.setEegChannelCount(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_channel_count = 206;</code>
             */
            public Builder clearEegChannelCount() {
                copyOnWrite();
                instance.clearEegChannelCount();
                return this;
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public boolean hasEegChannelLayout() {
                return instance.hasEegChannelLayout();
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public java.lang.String getEegChannelLayout() {
                return instance.getEegChannelLayout();
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public com.google.protobuf.ByteString
            getEegChannelLayoutBytes() {
                return instance.getEegChannelLayoutBytes();
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public Builder setEegChannelLayout(
                    java.lang.String value) {
                copyOnWrite();
                instance.setEegChannelLayout(value);
                return this;
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public Builder clearEegChannelLayout() {
                copyOnWrite();
                instance.clearEegChannelLayout();
                return this;
            }

            /**
             * <pre>
             * raw string, converted to eeg_locations
             * </pre>
             * <p>
             * <code>optional string eeg_channel_layout = 207;</code>
             */
            public Builder setEegChannelLayoutBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setEegChannelLayoutBytes(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_downsample = 208;</code>
             */
            public boolean hasEegDownsample() {
                return instance.hasEegDownsample();
            }

            /**
             * <code>optional uint32 eeg_downsample = 208;</code>
             */
            public int getEegDownsample() {
                return instance.getEegDownsample();
            }

            /**
             * <code>optional uint32 eeg_downsample = 208;</code>
             */
            public Builder setEegDownsample(int value) {
                copyOnWrite();
                instance.setEegDownsample(value);
                return this;
            }

            /**
             * <code>optional uint32 eeg_downsample = 208;</code>
             */
            public Builder clearEegDownsample() {
                copyOnWrite();
                instance.clearEegDownsample();
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
             */
            public boolean hasEegUnits() {
                return instance.hasEegUnits();
            }

            /**
             * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
             */
            public kungzhi.muse.io.DataSerializer.EEGUnits getEegUnits() {
                return instance.getEegUnits();
            }

            /**
             * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
             */
            public Builder setEegUnits(kungzhi.muse.io.DataSerializer.EEGUnits value) {
                copyOnWrite();
                instance.setEegUnits(value);
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.EEGUnits eeg_units = 209;</code>
             */
            public Builder clearEegUnits() {
                copyOnWrite();
                instance.clearEegUnits();
                return this;
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public java.util.List<kungzhi.muse.io.DataSerializer.HeadLocations> getEegLocationsList() {
                return instance.getEegLocationsList();
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public int getEegLocationsCount() {
                return instance.getEegLocationsCount();
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public kungzhi.muse.io.DataSerializer.HeadLocations getEegLocations(int index) {
                return instance.getEegLocations(index);
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public Builder setEegLocations(
                    int index, kungzhi.muse.io.DataSerializer.HeadLocations value) {
                copyOnWrite();
                instance.setEegLocations(index, value);
                return this;
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public Builder addEegLocations(kungzhi.muse.io.DataSerializer.HeadLocations value) {
                copyOnWrite();
                instance.addEegLocations(value);
                return this;
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public Builder addAllEegLocations(
                    java.lang.Iterable<? extends kungzhi.muse.io.DataSerializer.HeadLocations> values) {
                copyOnWrite();
                instance.addAllEegLocations(values);
                return this;
            }

            /**
             * <pre>
             * derived from eeg_channel_layout
             * </pre>
             * <p>
             * <code>repeated .interaxon.muse_data.HeadLocations eeg_locations = 210;</code>
             */
            public Builder clearEegLocations() {
                copyOnWrite();
                instance.clearEegLocations();
                return this;
            }

            /**
             * <code>optional float eeg_conversion_factor = 211;</code>
             */
            public boolean hasEegConversionFactor() {
                return instance.hasEegConversionFactor();
            }

            /**
             * <code>optional float eeg_conversion_factor = 211;</code>
             */
            public float getEegConversionFactor() {
                return instance.getEegConversionFactor();
            }

            /**
             * <code>optional float eeg_conversion_factor = 211;</code>
             */
            public Builder setEegConversionFactor(float value) {
                copyOnWrite();
                instance.setEegConversionFactor(value);
                return this;
            }

            /**
             * <code>optional float eeg_conversion_factor = 211;</code>
             */
            public Builder clearEegConversionFactor() {
                copyOnWrite();
                instance.clearEegConversionFactor();
                return this;
            }

            /**
             * <pre>
             * Analog Front End Gain
             * </pre>
             * <p>
             * <code>optional float afe_gain = 212;</code>
             */
            public boolean hasAfeGain() {
                return instance.hasAfeGain();
            }

            /**
             * <pre>
             * Analog Front End Gain
             * </pre>
             * <p>
             * <code>optional float afe_gain = 212;</code>
             */
            public float getAfeGain() {
                return instance.getAfeGain();
            }

            /**
             * <pre>
             * Analog Front End Gain
             * </pre>
             * <p>
             * <code>optional float afe_gain = 212;</code>
             */
            public Builder setAfeGain(float value) {
                copyOnWrite();
                instance.setAfeGain(value);
                return this;
            }

            /**
             * <pre>
             * Analog Front End Gain
             * </pre>
             * <p>
             * <code>optional float afe_gain = 212;</code>
             */
            public Builder clearAfeGain() {
                copyOnWrite();
                instance.clearAfeGain();
                return this;
            }

            /**
             * <pre>
             * DRLREF osc
             * </pre>
             * <p>
             * <code>optional bool drlref_data_enabled = 300;</code>
             */
            public boolean hasDrlrefDataEnabled() {
                return instance.hasDrlrefDataEnabled();
            }

            /**
             * <pre>
             * DRLREF osc
             * </pre>
             * <p>
             * <code>optional bool drlref_data_enabled = 300;</code>
             */
            public boolean getDrlrefDataEnabled() {
                return instance.getDrlrefDataEnabled();
            }

            /**
             * <pre>
             * DRLREF osc
             * </pre>
             * <p>
             * <code>optional bool drlref_data_enabled = 300;</code>
             */
            public Builder setDrlrefDataEnabled(boolean value) {
                copyOnWrite();
                instance.setDrlrefDataEnabled(value);
                return this;
            }

            /**
             * <pre>
             * DRLREF osc
             * </pre>
             * <p>
             * <code>optional bool drlref_data_enabled = 300;</code>
             */
            public Builder clearDrlrefDataEnabled() {
                copyOnWrite();
                instance.clearDrlrefDataEnabled();
                return this;
            }

            /**
             * <code>optional float drlref_conversion_factor = 301;</code>
             */
            public boolean hasDrlrefConversionFactor() {
                return instance.hasDrlrefConversionFactor();
            }

            /**
             * <code>optional float drlref_conversion_factor = 301;</code>
             */
            public float getDrlrefConversionFactor() {
                return instance.getDrlrefConversionFactor();
            }

            /**
             * <code>optional float drlref_conversion_factor = 301;</code>
             */
            public Builder setDrlrefConversionFactor(float value) {
                copyOnWrite();
                instance.setDrlrefConversionFactor(value);
                return this;
            }

            /**
             * <code>optional float drlref_conversion_factor = 301;</code>
             */
            public Builder clearDrlrefConversionFactor() {
                copyOnWrite();
                instance.clearDrlrefConversionFactor();
                return this;
            }

            /**
             * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
             */
            public boolean hasDrlrefSampleFrequencyHz() {
                return instance.hasDrlrefSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
             */
            public int getDrlrefSampleFrequencyHz() {
                return instance.getDrlrefSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
             */
            public Builder setDrlrefSampleFrequencyHz(int value) {
                copyOnWrite();
                instance.setDrlrefSampleFrequencyHz(value);
                return this;
            }

            /**
             * <code>optional uint32 drlref_sample_frequency_hz = 302;</code>
             */
            public Builder clearDrlrefSampleFrequencyHz() {
                copyOnWrite();
                instance.clearDrlrefSampleFrequencyHz();
                return this;
            }

            /**
             * <pre>
             * Accelerometer osc
             * </pre>
             * <p>
             * <code>optional bool acc_data_enabled = 400;</code>
             */
            public boolean hasAccDataEnabled() {
                return instance.hasAccDataEnabled();
            }

            /**
             * <pre>
             * Accelerometer osc
             * </pre>
             * <p>
             * <code>optional bool acc_data_enabled = 400;</code>
             */
            public boolean getAccDataEnabled() {
                return instance.getAccDataEnabled();
            }

            /**
             * <pre>
             * Accelerometer osc
             * </pre>
             * <p>
             * <code>optional bool acc_data_enabled = 400;</code>
             */
            public Builder setAccDataEnabled(boolean value) {
                copyOnWrite();
                instance.setAccDataEnabled(value);
                return this;
            }

            /**
             * <pre>
             * Accelerometer osc
             * </pre>
             * <p>
             * <code>optional bool acc_data_enabled = 400;</code>
             */
            public Builder clearAccDataEnabled() {
                copyOnWrite();
                instance.clearAccDataEnabled();
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
             */
            public boolean hasAccUnits() {
                return instance.hasAccUnits();
            }

            /**
             * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
             */
            public kungzhi.muse.io.DataSerializer.AccelerometerUnits getAccUnits() {
                return instance.getAccUnits();
            }

            /**
             * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
             */
            public Builder setAccUnits(kungzhi.muse.io.DataSerializer.AccelerometerUnits value) {
                copyOnWrite();
                instance.setAccUnits(value);
                return this;
            }

            /**
             * <code>optional .interaxon.muse_data.AccelerometerUnits acc_units = 401;</code>
             */
            public Builder clearAccUnits() {
                copyOnWrite();
                instance.clearAccUnits();
                return this;
            }

            /**
             * <code>optional float acc_conversion_factor = 402;</code>
             */
            public boolean hasAccConversionFactor() {
                return instance.hasAccConversionFactor();
            }

            /**
             * <code>optional float acc_conversion_factor = 402;</code>
             */
            public float getAccConversionFactor() {
                return instance.getAccConversionFactor();
            }

            /**
             * <code>optional float acc_conversion_factor = 402;</code>
             */
            public Builder setAccConversionFactor(float value) {
                copyOnWrite();
                instance.setAccConversionFactor(value);
                return this;
            }

            /**
             * <code>optional float acc_conversion_factor = 402;</code>
             */
            public Builder clearAccConversionFactor() {
                copyOnWrite();
                instance.clearAccConversionFactor();
                return this;
            }

            /**
             * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
             */
            public boolean hasAccSampleFrequencyHz() {
                return instance.hasAccSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
             */
            public int getAccSampleFrequencyHz() {
                return instance.getAccSampleFrequencyHz();
            }

            /**
             * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
             */
            public Builder setAccSampleFrequencyHz(int value) {
                copyOnWrite();
                instance.setAccSampleFrequencyHz(value);
                return this;
            }

            /**
             * <code>optional uint32 acc_sample_frequency_hz = 403;</code>
             */
            public Builder clearAccSampleFrequencyHz() {
                copyOnWrite();
                instance.clearAccSampleFrequencyHz();
                return this;
            }

            /**
             * <pre>
             * Battery osc
             * </pre>
             * <p>
             * <code>optional bool battery_data_enabled = 500;</code>
             */
            public boolean hasBatteryDataEnabled() {
                return instance.hasBatteryDataEnabled();
            }

            /**
             * <pre>
             * Battery osc
             * </pre>
             * <p>
             * <code>optional bool battery_data_enabled = 500;</code>
             */
            public boolean getBatteryDataEnabled() {
                return instance.getBatteryDataEnabled();
            }

            /**
             * <pre>
             * Battery osc
             * </pre>
             * <p>
             * <code>optional bool battery_data_enabled = 500;</code>
             */
            public Builder setBatteryDataEnabled(boolean value) {
                copyOnWrite();
                instance.setBatteryDataEnabled(value);
                return this;
            }

            /**
             * <pre>
             * Battery osc
             * </pre>
             * <p>
             * <code>optional bool battery_data_enabled = 500;</code>
             */
            public Builder clearBatteryDataEnabled() {
                copyOnWrite();
                instance.clearBatteryDataEnabled();
                return this;
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_percent_remaining = 501;</code>
             */
            public boolean hasBatteryPercentRemaining() {
                return instance.hasBatteryPercentRemaining();
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_percent_remaining = 501;</code>
             */
            public int getBatteryPercentRemaining() {
                return instance.getBatteryPercentRemaining();
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_percent_remaining = 501;</code>
             */
            public Builder setBatteryPercentRemaining(int value) {
                copyOnWrite();
                instance.setBatteryPercentRemaining(value);
                return this;
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_percent_remaining = 501;</code>
             */
            public Builder clearBatteryPercentRemaining() {
                copyOnWrite();
                instance.clearBatteryPercentRemaining();
                return this;
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_millivolts = 502;</code>
             */
            public boolean hasBatteryMillivolts() {
                return instance.hasBatteryMillivolts();
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_millivolts = 502;</code>
             */
            public int getBatteryMillivolts() {
                return instance.getBatteryMillivolts();
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_millivolts = 502;</code>
             */
            public Builder setBatteryMillivolts(int value) {
                copyOnWrite();
                instance.setBatteryMillivolts(value);
                return this;
            }

            /**
             * <pre>
             * This is a bootstrap value since battery info is only emitted every few seconds
             * </pre>
             * <p>
             * <code>optional uint32 battery_millivolts = 502;</code>
             */
            public Builder clearBatteryMillivolts() {
                copyOnWrite();
                instance.clearBatteryMillivolts();
                return this;
            }

            /**
             * <pre>
             * Error osc (hardware/firmware level errors)
             * </pre>
             * <p>
             * <code>optional bool error_data_enabled = 600;</code>
             */
            public boolean hasErrorDataEnabled() {
                return instance.hasErrorDataEnabled();
            }

            /**
             * <pre>
             * Error osc (hardware/firmware level errors)
             * </pre>
             * <p>
             * <code>optional bool error_data_enabled = 600;</code>
             */
            public boolean getErrorDataEnabled() {
                return instance.getErrorDataEnabled();
            }

            /**
             * <pre>
             * Error osc (hardware/firmware level errors)
             * </pre>
             * <p>
             * <code>optional bool error_data_enabled = 600;</code>
             */
            public Builder setErrorDataEnabled(boolean value) {
                copyOnWrite();
                instance.setErrorDataEnabled(value);
                return this;
            }

            /**
             * <pre>
             * Error osc (hardware/firmware level errors)
             * </pre>
             * <p>
             * <code>optional bool error_data_enabled = 600;</code>
             */
            public Builder clearErrorDataEnabled() {
                copyOnWrite();
                instance.clearErrorDataEnabled();
                return this;
            }

            /**
             * <pre>
             * Gyroscope osc
             * </pre>
             * <p>
             * <code>optional bool gyro_data_enabled = 700;</code>
             */
            public boolean hasGyroDataEnabled() {
                return instance.hasGyroDataEnabled();
            }

            /**
             * <pre>
             * Gyroscope osc
             * </pre>
             * <p>
             * <code>optional bool gyro_data_enabled = 700;</code>
             */
            public boolean getGyroDataEnabled() {
                return instance.getGyroDataEnabled();
            }

            /**
             * <pre>
             * Gyroscope osc
             * </pre>
             * <p>
             * <code>optional bool gyro_data_enabled = 700;</code>
             */
            public Builder setGyroDataEnabled(boolean value) {
                copyOnWrite();
                instance.setGyroDataEnabled(value);
                return this;
            }

            /**
             * <pre>
             * Gyroscope osc
             * </pre>
             * <p>
             * <code>optional bool gyro_data_enabled = 700;</code>
             */
            public Builder clearGyroDataEnabled() {
                copyOnWrite();
                instance.clearGyroDataEnabled();
                return this;
            }

            /**
             * <code>optional float gyro_conversion_factor = 702;</code>
             */
            public boolean hasGyroConversionFactor() {
                return instance.hasGyroConversionFactor();
            }

            /**
             * <code>optional float gyro_conversion_factor = 702;</code>
             */
            public float getGyroConversionFactor() {
                return instance.getGyroConversionFactor();
            }

            /**
             * <code>optional float gyro_conversion_factor = 702;</code>
             */
            public Builder setGyroConversionFactor(float value) {
                copyOnWrite();
                instance.setGyroConversionFactor(value);
                return this;
            }

            /**
             * <code>optional float gyro_conversion_factor = 702;</code>
             */
            public Builder clearGyroConversionFactor() {
                copyOnWrite();
                instance.clearGyroConversionFactor();
                return this;
            }

            /**
             * <code>optional uint32 gyro_sample_frequency = 703;</code>
             */
            public boolean hasGyroSampleFrequency() {
                return instance.hasGyroSampleFrequency();
            }

            /**
             * <code>optional uint32 gyro_sample_frequency = 703;</code>
             */
            public int getGyroSampleFrequency() {
                return instance.getGyroSampleFrequency();
            }

            /**
             * <code>optional uint32 gyro_sample_frequency = 703;</code>
             */
            public Builder setGyroSampleFrequency(int value) {
                copyOnWrite();
                instance.setGyroSampleFrequency(value);
                return this;
            }

            /**
             * <code>optional uint32 gyro_sample_frequency = 703;</code>
             */
            public Builder clearGyroSampleFrequency() {
                copyOnWrite();
                instance.clearGyroSampleFrequency();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseConfig)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseConfig();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    eegLocations_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseConfig other = (kungzhi.muse.io.DataSerializer.MuseConfig) arg1;
                    macAddr_ = visitor.visitString(
                            hasMacAddr(), macAddr_,
                            other.hasMacAddr(), other.macAddr_);
                    serialNumber_ = visitor.visitString(
                            hasSerialNumber(), serialNumber_,
                            other.hasSerialNumber(), other.serialNumber_);
                    preset_ = visitor.visitString(
                            hasPreset(), preset_,
                            other.hasPreset(), other.preset_);
                    model_ = visitor.visitInt(hasModel(), model_,
                            other.hasModel(), other.model_);
                    headbandName_ = visitor.visitString(
                            hasHeadbandName(), headbandName_,
                            other.hasHeadbandName(), other.headbandName_);
                    microcontrollerId_ = visitor.visitString(
                            hasMicrocontrollerId(), microcontrollerId_,
                            other.hasMicrocontrollerId(), other.microcontrollerId_);
                    compressionEnabled_ = visitor.visitBoolean(
                            hasCompressionEnabled(), compressionEnabled_,
                            other.hasCompressionEnabled(), other.compressionEnabled_);
                    filtersEnabled_ = visitor.visitBoolean(
                            hasFiltersEnabled(), filtersEnabled_,
                            other.hasFiltersEnabled(), other.filtersEnabled_);
                    notchFrequencyHz_ = visitor.visitInt(
                            hasNotchFrequencyHz(), notchFrequencyHz_,
                            other.hasNotchFrequencyHz(), other.notchFrequencyHz_);
                    eegSampleFrequencyHz_ = visitor.visitInt(
                            hasEegSampleFrequencyHz(), eegSampleFrequencyHz_,
                            other.hasEegSampleFrequencyHz(), other.eegSampleFrequencyHz_);
                    eegOutputFrequencyHz_ = visitor.visitInt(
                            hasEegOutputFrequencyHz(), eegOutputFrequencyHz_,
                            other.hasEegOutputFrequencyHz(), other.eegOutputFrequencyHz_);
                    eegSamplesBitwidth_ = visitor.visitInt(
                            hasEegSamplesBitwidth(), eegSamplesBitwidth_,
                            other.hasEegSamplesBitwidth(), other.eegSamplesBitwidth_);
                    eegChannelCount_ = visitor.visitInt(
                            hasEegChannelCount(), eegChannelCount_,
                            other.hasEegChannelCount(), other.eegChannelCount_);
                    eegChannelLayout_ = visitor.visitString(
                            hasEegChannelLayout(), eegChannelLayout_,
                            other.hasEegChannelLayout(), other.eegChannelLayout_);
                    eegDownsample_ = visitor.visitInt(
                            hasEegDownsample(), eegDownsample_,
                            other.hasEegDownsample(), other.eegDownsample_);
                    eegUnits_ = visitor.visitInt(hasEegUnits(), eegUnits_,
                            other.hasEegUnits(), other.eegUnits_);
                    eegLocations_ = visitor.visitIntList(eegLocations_, other.eegLocations_);
                    eegConversionFactor_ = visitor.visitFloat(
                            hasEegConversionFactor(), eegConversionFactor_,
                            other.hasEegConversionFactor(), other.eegConversionFactor_);
                    afeGain_ = visitor.visitFloat(
                            hasAfeGain(), afeGain_,
                            other.hasAfeGain(), other.afeGain_);
                    drlrefDataEnabled_ = visitor.visitBoolean(
                            hasDrlrefDataEnabled(), drlrefDataEnabled_,
                            other.hasDrlrefDataEnabled(), other.drlrefDataEnabled_);
                    drlrefConversionFactor_ = visitor.visitFloat(
                            hasDrlrefConversionFactor(), drlrefConversionFactor_,
                            other.hasDrlrefConversionFactor(), other.drlrefConversionFactor_);
                    drlrefSampleFrequencyHz_ = visitor.visitInt(
                            hasDrlrefSampleFrequencyHz(), drlrefSampleFrequencyHz_,
                            other.hasDrlrefSampleFrequencyHz(), other.drlrefSampleFrequencyHz_);
                    accDataEnabled_ = visitor.visitBoolean(
                            hasAccDataEnabled(), accDataEnabled_,
                            other.hasAccDataEnabled(), other.accDataEnabled_);
                    accUnits_ = visitor.visitInt(hasAccUnits(), accUnits_,
                            other.hasAccUnits(), other.accUnits_);
                    accConversionFactor_ = visitor.visitFloat(
                            hasAccConversionFactor(), accConversionFactor_,
                            other.hasAccConversionFactor(), other.accConversionFactor_);
                    accSampleFrequencyHz_ = visitor.visitInt(
                            hasAccSampleFrequencyHz(), accSampleFrequencyHz_,
                            other.hasAccSampleFrequencyHz(), other.accSampleFrequencyHz_);
                    batteryDataEnabled_ = visitor.visitBoolean(
                            hasBatteryDataEnabled(), batteryDataEnabled_,
                            other.hasBatteryDataEnabled(), other.batteryDataEnabled_);
                    batteryPercentRemaining_ = visitor.visitInt(
                            hasBatteryPercentRemaining(), batteryPercentRemaining_,
                            other.hasBatteryPercentRemaining(), other.batteryPercentRemaining_);
                    batteryMillivolts_ = visitor.visitInt(
                            hasBatteryMillivolts(), batteryMillivolts_,
                            other.hasBatteryMillivolts(), other.batteryMillivolts_);
                    errorDataEnabled_ = visitor.visitBoolean(
                            hasErrorDataEnabled(), errorDataEnabled_,
                            other.hasErrorDataEnabled(), other.errorDataEnabled_);
                    gyroDataEnabled_ = visitor.visitBoolean(
                            hasGyroDataEnabled(), gyroDataEnabled_,
                            other.hasGyroDataEnabled(), other.gyroDataEnabled_);
                    gyroConversionFactor_ = visitor.visitFloat(
                            hasGyroConversionFactor(), gyroConversionFactor_,
                            other.hasGyroConversionFactor(), other.gyroConversionFactor_);
                    gyroSampleFrequency_ = visitor.visitInt(
                            hasGyroSampleFrequency(), gyroSampleFrequency_,
                            other.hasGyroSampleFrequency(), other.gyroSampleFrequency_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000001;
                                    macAddr_ = s;
                                    break;
                                }
                                case 18: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000002;
                                    serialNumber_ = s;
                                    break;
                                }
                                case 26: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000004;
                                    preset_ = s;
                                    break;
                                }
                                case 32: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel value = kungzhi.muse.io.DataSerializer.MuseConfig.MuseModel.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(4, rawValue);
                                    } else {
                                        bitField0_ |= 0x00000008;
                                        model_ = rawValue;
                                    }
                                    break;
                                }
                                case 42: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000010;
                                    headbandName_ = s;
                                    break;
                                }
                                case 50: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000020;
                                    microcontrollerId_ = s;
                                    break;
                                }
                                case 800: {
                                    bitField0_ |= 0x00000040;
                                    compressionEnabled_ = input.readBool();
                                    break;
                                }
                                case 1608: {
                                    bitField0_ |= 0x00000080;
                                    filtersEnabled_ = input.readBool();
                                    break;
                                }
                                case 1616: {
                                    bitField0_ |= 0x00000100;
                                    notchFrequencyHz_ = input.readUInt32();
                                    break;
                                }
                                case 1624: {
                                    bitField0_ |= 0x00000200;
                                    eegSampleFrequencyHz_ = input.readUInt32();
                                    break;
                                }
                                case 1632: {
                                    bitField0_ |= 0x00000400;
                                    eegOutputFrequencyHz_ = input.readUInt32();
                                    break;
                                }
                                case 1640: {
                                    bitField0_ |= 0x00000800;
                                    eegSamplesBitwidth_ = input.readUInt32();
                                    break;
                                }
                                case 1648: {
                                    bitField0_ |= 0x00001000;
                                    eegChannelCount_ = input.readUInt32();
                                    break;
                                }
                                case 1658: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00002000;
                                    eegChannelLayout_ = s;
                                    break;
                                }
                                case 1664: {
                                    bitField0_ |= 0x00004000;
                                    eegDownsample_ = input.readUInt32();
                                    break;
                                }
                                case 1672: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.EEGUnits value = kungzhi.muse.io.DataSerializer.EEGUnits.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(209, rawValue);
                                    } else {
                                        bitField0_ |= 0x00008000;
                                        eegUnits_ = rawValue;
                                    }
                                    break;
                                }
                                case 1680: {
                                    if (!eegLocations_.isModifiable()) {
                                        eegLocations_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(eegLocations_);
                                    }
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.HeadLocations value = kungzhi.muse.io.DataSerializer.HeadLocations.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(210, rawValue);
                                    } else {
                                        eegLocations_.addInt(rawValue);
                                    }
                                    break;
                                }
                                case 1682: {
                                    if (!eegLocations_.isModifiable()) {
                                        eegLocations_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(eegLocations_);
                                    }
                                    int length = input.readRawVarint32();
                                    int oldLimit = input.pushLimit(length);
                                    while (input.getBytesUntilLimit() > 0) {
                                        int rawValue = input.readEnum();
                                        kungzhi.muse.io.DataSerializer.HeadLocations value = kungzhi.muse.io.DataSerializer.HeadLocations.forNumber(rawValue);
                                        if (value == null) {
                                            super.mergeVarintField(210, rawValue);
                                        } else {
                                            eegLocations_.addInt(rawValue);
                                        }
                                    }
                                    input.popLimit(oldLimit);
                                    break;
                                }
                                case 1693: {
                                    bitField0_ |= 0x00010000;
                                    eegConversionFactor_ = input.readFloat();
                                    break;
                                }
                                case 1701: {
                                    bitField0_ |= 0x00020000;
                                    afeGain_ = input.readFloat();
                                    break;
                                }
                                case 2400: {
                                    bitField0_ |= 0x00040000;
                                    drlrefDataEnabled_ = input.readBool();
                                    break;
                                }
                                case 2413: {
                                    bitField0_ |= 0x00080000;
                                    drlrefConversionFactor_ = input.readFloat();
                                    break;
                                }
                                case 2416: {
                                    bitField0_ |= 0x00100000;
                                    drlrefSampleFrequencyHz_ = input.readUInt32();
                                    break;
                                }
                                case 3200: {
                                    bitField0_ |= 0x00200000;
                                    accDataEnabled_ = input.readBool();
                                    break;
                                }
                                case 3208: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.AccelerometerUnits value = kungzhi.muse.io.DataSerializer.AccelerometerUnits.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(401, rawValue);
                                    } else {
                                        bitField0_ |= 0x00400000;
                                        accUnits_ = rawValue;
                                    }
                                    break;
                                }
                                case 3221: {
                                    bitField0_ |= 0x00800000;
                                    accConversionFactor_ = input.readFloat();
                                    break;
                                }
                                case 3224: {
                                    bitField0_ |= 0x01000000;
                                    accSampleFrequencyHz_ = input.readUInt32();
                                    break;
                                }
                                case 4000: {
                                    bitField0_ |= 0x02000000;
                                    batteryDataEnabled_ = input.readBool();
                                    break;
                                }
                                case 4008: {
                                    bitField0_ |= 0x04000000;
                                    batteryPercentRemaining_ = input.readUInt32();
                                    break;
                                }
                                case 4016: {
                                    bitField0_ |= 0x08000000;
                                    batteryMillivolts_ = input.readUInt32();
                                    break;
                                }
                                case 4800: {
                                    bitField0_ |= 0x10000000;
                                    errorDataEnabled_ = input.readBool();
                                    break;
                                }
                                case 5600: {
                                    bitField0_ |= 0x20000000;
                                    gyroDataEnabled_ = input.readBool();
                                    break;
                                }
                                case 5621: {
                                    bitField0_ |= 0x40000000;
                                    gyroConversionFactor_ = input.readFloat();
                                    break;
                                }
                                case 5624: {
                                    bitField0_ |= 0x80000000;
                                    gyroSampleFrequency_ = input.readUInt32();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseConfig.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseConfig)
        private static final kungzhi.muse.io.DataSerializer.MuseConfig DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseConfig();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseConfig getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseConfig> PARSER;

        public static com.google.protobuf.Parser<MuseConfig> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 103;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.MuseConfig> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseConfig.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseConfig.getDefaultInstance(),
                        null,
                        103,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.MuseConfig.class);
    }

    public interface EEG_DroppedSamplesOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.EEG_DroppedSamples)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional uint32 num = 1;</code>
         */
        boolean hasNum();

        /**
         * <code>optional uint32 num = 1;</code>
         */
        int getNum();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.EEG_DroppedSamples}
     */
    public static final class EEG_DroppedSamples extends
            com.google.protobuf.GeneratedMessageLite<
                    EEG_DroppedSamples, EEG_DroppedSamples.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.EEG_DroppedSamples)
            EEG_DroppedSamplesOrBuilder {
        private EEG_DroppedSamples() {
        }

        private int bitField0_;
        public static final int NUM_FIELD_NUMBER = 1;
        private int num_;

        /**
         * <code>optional uint32 num = 1;</code>
         */
        public boolean hasNum() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        public int getNum() {
            return num_;
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        private void setNum(int value) {
            bitField0_ |= 0x00000001;
            num_ = value;
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        private void clearNum() {
            bitField0_ = (bitField0_ & ~0x00000001);
            num_ = 0;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, num_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, num_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.EEG_DroppedSamples prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.EEG_DroppedSamples}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.EEG_DroppedSamples, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.EEG_DroppedSamples)
                kungzhi.muse.io.DataSerializer.EEG_DroppedSamplesOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional uint32 num = 1;</code>
             */
            public boolean hasNum() {
                return instance.hasNum();
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public int getNum() {
                return instance.getNum();
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public Builder setNum(int value) {
                copyOnWrite();
                instance.setNum(value);
                return this;
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public Builder clearNum() {
                copyOnWrite();
                instance.clearNum();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.EEG_DroppedSamples)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.EEG_DroppedSamples();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.EEG_DroppedSamples other = (kungzhi.muse.io.DataSerializer.EEG_DroppedSamples) arg1;
                    num_ = visitor.visitInt(
                            hasNum(), num_,
                            other.hasNum(), other.num_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 8: {
                                    bitField0_ |= 0x00000001;
                                    num_ = input.readUInt32();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.EEG_DroppedSamples)
        private static final kungzhi.muse.io.DataSerializer.EEG_DroppedSamples DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new EEG_DroppedSamples();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.EEG_DroppedSamples getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<EEG_DroppedSamples> PARSER;

        public static com.google.protobuf.Parser<EEG_DroppedSamples> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 202;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.EEG_DroppedSamples> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.getDefaultInstance(),
                        null,
                        202,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.EEG_DroppedSamples.class);
    }

    public interface ACC_DroppedSamplesOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.ACC_DroppedSamples)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional uint32 num = 1;</code>
         */
        boolean hasNum();

        /**
         * <code>optional uint32 num = 1;</code>
         */
        int getNum();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.ACC_DroppedSamples}
     */
    public static final class ACC_DroppedSamples extends
            com.google.protobuf.GeneratedMessageLite<
                    ACC_DroppedSamples, ACC_DroppedSamples.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.ACC_DroppedSamples)
            ACC_DroppedSamplesOrBuilder {
        private ACC_DroppedSamples() {
        }

        private int bitField0_;
        public static final int NUM_FIELD_NUMBER = 1;
        private int num_;

        /**
         * <code>optional uint32 num = 1;</code>
         */
        public boolean hasNum() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        public int getNum() {
            return num_;
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        private void setNum(int value) {
            bitField0_ |= 0x00000001;
            num_ = value;
        }

        /**
         * <code>optional uint32 num = 1;</code>
         */
        private void clearNum() {
            bitField0_ = (bitField0_ & ~0x00000001);
            num_ = 0;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, num_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, num_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.ACC_DroppedSamples prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.ACC_DroppedSamples}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.ACC_DroppedSamples, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.ACC_DroppedSamples)
                kungzhi.muse.io.DataSerializer.ACC_DroppedSamplesOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional uint32 num = 1;</code>
             */
            public boolean hasNum() {
                return instance.hasNum();
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public int getNum() {
                return instance.getNum();
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public Builder setNum(int value) {
                copyOnWrite();
                instance.setNum(value);
                return this;
            }

            /**
             * <code>optional uint32 num = 1;</code>
             */
            public Builder clearNum() {
                copyOnWrite();
                instance.clearNum();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.ACC_DroppedSamples)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.ACC_DroppedSamples();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.ACC_DroppedSamples other = (kungzhi.muse.io.DataSerializer.ACC_DroppedSamples) arg1;
                    num_ = visitor.visitInt(
                            hasNum(), num_,
                            other.hasNum(), other.num_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 8: {
                                    bitField0_ |= 0x00000001;
                                    num_ = input.readUInt32();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.ACC_DroppedSamples)
        private static final kungzhi.muse.io.DataSerializer.ACC_DroppedSamples DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new ACC_DroppedSamples();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.ACC_DroppedSamples getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<ACC_DroppedSamples> PARSER;

        public static com.google.protobuf.Parser<ACC_DroppedSamples> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 203;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.ACC_DroppedSamples> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.getDefaultInstance(),
                        null,
                        203,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.ACC_DroppedSamples.class);
    }

    public interface ComputingDeviceOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.ComputingDevice)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        boolean hasOsType();

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        java.lang.String getOsType();

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        com.google.protobuf.ByteString
        getOsTypeBytes();

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        boolean hasOsVersion();

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        java.lang.String getOsVersion();

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        com.google.protobuf.ByteString
        getOsVersionBytes();

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        boolean hasHardwareModelName();

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        java.lang.String getHardwareModelName();

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        com.google.protobuf.ByteString
        getHardwareModelNameBytes();

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        boolean hasHardwareModelId();

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        java.lang.String getHardwareModelId();

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        com.google.protobuf.ByteString
        getHardwareModelIdBytes();

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        boolean hasProcessorName();

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        java.lang.String getProcessorName();

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        com.google.protobuf.ByteString
        getProcessorNameBytes();

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        boolean hasProcessorSpeed();

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        java.lang.String getProcessorSpeed();

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        com.google.protobuf.ByteString
        getProcessorSpeedBytes();

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        boolean hasNumberOfProcessors();

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        int getNumberOfProcessors();

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        boolean hasMemorySize();

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        java.lang.String getMemorySize();

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        com.google.protobuf.ByteString
        getMemorySizeBytes();

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        boolean hasBluetoothVersion();

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        java.lang.String getBluetoothVersion();

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        com.google.protobuf.ByteString
        getBluetoothVersionBytes();

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        boolean hasTimeZone();

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        java.lang.String getTimeZone();

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        com.google.protobuf.ByteString
        getTimeZoneBytes();

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        boolean hasTimeZoneOffsetSeconds();

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        int getTimeZoneOffsetSeconds();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.ComputingDevice}
     */
    public static final class ComputingDevice extends
            com.google.protobuf.GeneratedMessageLite<
                    ComputingDevice, ComputingDevice.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.ComputingDevice)
            ComputingDeviceOrBuilder {
        private ComputingDevice() {
            osType_ = "";
            osVersion_ = "";
            hardwareModelName_ = "";
            hardwareModelId_ = "";
            processorName_ = "";
            processorSpeed_ = "";
            memorySize_ = "";
            bluetoothVersion_ = "";
            timeZone_ = "";
        }

        private int bitField0_;
        public static final int OS_TYPE_FIELD_NUMBER = 1;
        private java.lang.String osType_;

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        public boolean hasOsType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        public java.lang.String getOsType() {
            return osType_;
        }

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        public com.google.protobuf.ByteString
        getOsTypeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(osType_);
        }

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        private void setOsType(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            osType_ = value;
        }

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        private void clearOsType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            osType_ = getDefaultInstance().getOsType();
        }

        /**
         * <pre>
         * e.g. "Android", "iOS", "OSX"
         * </pre>
         * <p>
         * <code>optional string os_type = 1;</code>
         */
        private void setOsTypeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            osType_ = value.toStringUtf8();
        }

        public static final int OS_VERSION_FIELD_NUMBER = 2;
        private java.lang.String osVersion_;

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        public boolean hasOsVersion() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        public java.lang.String getOsVersion() {
            return osVersion_;
        }

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        public com.google.protobuf.ByteString
        getOsVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(osVersion_);
        }

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        private void setOsVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            osVersion_ = value;
        }

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        private void clearOsVersion() {
            bitField0_ = (bitField0_ & ~0x00000002);
            osVersion_ = getDefaultInstance().getOsVersion();
        }

        /**
         * <pre>
         * e.g. "1.0.9", "7.0.3", "6.1.3"
         * </pre>
         * <p>
         * <code>optional string os_version = 2;</code>
         */
        private void setOsVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            osVersion_ = value.toStringUtf8();
        }

        public static final int HARDWARE_MODEL_NAME_FIELD_NUMBER = 3;
        private java.lang.String hardwareModelName_;

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        public boolean hasHardwareModelName() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        public java.lang.String getHardwareModelName() {
            return hardwareModelName_;
        }

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        public com.google.protobuf.ByteString
        getHardwareModelNameBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(hardwareModelName_);
        }

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        private void setHardwareModelName(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            hardwareModelName_ = value;
        }

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        private void clearHardwareModelName() {
            bitField0_ = (bitField0_ & ~0x00000004);
            hardwareModelName_ = getDefaultInstance().getHardwareModelName();
        }

        /**
         * <pre>
         * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
         * </pre>
         * <p>
         * <code>optional string hardware_model_name = 3;</code>
         */
        private void setHardwareModelNameBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            hardwareModelName_ = value.toStringUtf8();
        }

        public static final int HARDWARE_MODEL_ID_FIELD_NUMBER = 4;
        private java.lang.String hardwareModelId_;

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        public boolean hasHardwareModelId() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        public java.lang.String getHardwareModelId() {
            return hardwareModelId_;
        }

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        public com.google.protobuf.ByteString
        getHardwareModelIdBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(hardwareModelId_);
        }

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        private void setHardwareModelId(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            hardwareModelId_ = value;
        }

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        private void clearHardwareModelId() {
            bitField0_ = (bitField0_ & ~0x00000008);
            hardwareModelId_ = getDefaultInstance().getHardwareModelId();
        }

        /**
         * <pre>
         * unique model name: "SM-N900W8", "MacBookPro10,1"
         * </pre>
         * <p>
         * <code>optional string hardware_model_id = 4;</code>
         */
        private void setHardwareModelIdBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            hardwareModelId_ = value.toStringUtf8();
        }

        public static final int PROCESSOR_NAME_FIELD_NUMBER = 5;
        private java.lang.String processorName_;

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        public boolean hasProcessorName() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        public java.lang.String getProcessorName() {
            return processorName_;
        }

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        public com.google.protobuf.ByteString
        getProcessorNameBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(processorName_);
        }

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        private void setProcessorName(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            processorName_ = value;
        }

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        private void clearProcessorName() {
            bitField0_ = (bitField0_ & ~0x00000010);
            processorName_ = getDefaultInstance().getProcessorName();
        }

        /**
         * <pre>
         * this includes instruction set
         * </pre>
         * <p>
         * <code>optional string processor_name = 5;</code>
         */
        private void setProcessorNameBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            processorName_ = value.toStringUtf8();
        }

        public static final int PROCESSOR_SPEED_FIELD_NUMBER = 6;
        private java.lang.String processorSpeed_;

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        public boolean hasProcessorSpeed() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        public java.lang.String getProcessorSpeed() {
            return processorSpeed_;
        }

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        public com.google.protobuf.ByteString
        getProcessorSpeedBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(processorSpeed_);
        }

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        private void setProcessorSpeed(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            processorSpeed_ = value;
        }

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        private void clearProcessorSpeed() {
            bitField0_ = (bitField0_ & ~0x00000020);
            processorSpeed_ = getDefaultInstance().getProcessorSpeed();
        }

        /**
         * <pre>
         * e.g. "1000MHz"
         * </pre>
         * <p>
         * <code>optional string processor_speed = 6;</code>
         */
        private void setProcessorSpeedBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000020;
            processorSpeed_ = value.toStringUtf8();
        }

        public static final int NUMBER_OF_PROCESSORS_FIELD_NUMBER = 7;
        private int numberOfProcessors_;

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        public boolean hasNumberOfProcessors() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        public int getNumberOfProcessors() {
            return numberOfProcessors_;
        }

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        private void setNumberOfProcessors(int value) {
            bitField0_ |= 0x00000040;
            numberOfProcessors_ = value;
        }

        /**
         * <pre>
         * e.g. 2, 4, 6
         * </pre>
         * <p>
         * <code>optional uint32 number_of_processors = 7;</code>
         */
        private void clearNumberOfProcessors() {
            bitField0_ = (bitField0_ & ~0x00000040);
            numberOfProcessors_ = 0;
        }

        public static final int MEMORY_SIZE_FIELD_NUMBER = 8;
        private java.lang.String memorySize_;

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        public boolean hasMemorySize() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        public java.lang.String getMemorySize() {
            return memorySize_;
        }

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        public com.google.protobuf.ByteString
        getMemorySizeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(memorySize_);
        }

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        private void setMemorySize(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000080;
            memorySize_ = value;
        }

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        private void clearMemorySize() {
            bitField0_ = (bitField0_ & ~0x00000080);
            memorySize_ = getDefaultInstance().getMemorySize();
        }

        /**
         * <pre>
         * e.g. “500MB”
         * </pre>
         * <p>
         * <code>optional string memory_size = 8;</code>
         */
        private void setMemorySizeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000080;
            memorySize_ = value.toStringUtf8();
        }

        public static final int BLUETOOTH_VERSION_FIELD_NUMBER = 9;
        private java.lang.String bluetoothVersion_;

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        public boolean hasBluetoothVersion() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        public java.lang.String getBluetoothVersion() {
            return bluetoothVersion_;
        }

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        public com.google.protobuf.ByteString
        getBluetoothVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(bluetoothVersion_);
        }

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        private void setBluetoothVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000100;
            bluetoothVersion_ = value;
        }

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        private void clearBluetoothVersion() {
            bitField0_ = (bitField0_ & ~0x00000100);
            bluetoothVersion_ = getDefaultInstance().getBluetoothVersion();
        }

        /**
         * <pre>
         * e.g."2.1 + EDR", "4.0"
         * </pre>
         * <p>
         * <code>optional string bluetooth_version = 9;</code>
         */
        private void setBluetoothVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000100;
            bluetoothVersion_ = value.toStringUtf8();
        }

        public static final int TIME_ZONE_FIELD_NUMBER = 10;
        private java.lang.String timeZone_;

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        public boolean hasTimeZone() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        public java.lang.String getTimeZone() {
            return timeZone_;
        }

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        public com.google.protobuf.ByteString
        getTimeZoneBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(timeZone_);
        }

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        private void setTimeZone(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000200;
            timeZone_ = value;
        }

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        private void clearTimeZone() {
            bitField0_ = (bitField0_ & ~0x00000200);
            timeZone_ = getDefaultInstance().getTimeZone();
        }

        /**
         * <pre>
         * e.g. "EST", "PDT"
         * </pre>
         * <p>
         * <code>optional string time_zone = 10;</code>
         */
        private void setTimeZoneBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000200;
            timeZone_ = value.toStringUtf8();
        }

        public static final int TIME_ZONE_OFFSET_SECONDS_FIELD_NUMBER = 11;
        private int timeZoneOffsetSeconds_;

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        public boolean hasTimeZoneOffsetSeconds() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        public int getTimeZoneOffsetSeconds() {
            return timeZoneOffsetSeconds_;
        }

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        private void setTimeZoneOffsetSeconds(int value) {
            bitField0_ |= 0x00000400;
            timeZoneOffsetSeconds_ = value;
        }

        /**
         * <pre>
         * e.g. -14000, 7200
         * </pre>
         * <p>
         * <code>optional sint32 time_zone_offset_seconds = 11;</code>
         */
        private void clearTimeZoneOffsetSeconds() {
            bitField0_ = (bitField0_ & ~0x00000400);
            timeZoneOffsetSeconds_ = 0;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeString(1, getOsType());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeString(2, getOsVersion());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeString(3, getHardwareModelName());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeString(4, getHardwareModelId());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeString(5, getProcessorName());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeString(6, getProcessorSpeed());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeUInt32(7, numberOfProcessors_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeString(8, getMemorySize());
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeString(9, getBluetoothVersion());
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeString(10, getTimeZone());
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeSInt32(11, timeZoneOffsetSeconds_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(1, getOsType());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(2, getOsVersion());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(3, getHardwareModelName());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(4, getHardwareModelId());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(5, getProcessorName());
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(6, getProcessorSpeed());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(7, numberOfProcessors_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(8, getMemorySize());
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(9, getBluetoothVersion());
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(10, getTimeZone());
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeSInt32Size(11, timeZoneOffsetSeconds_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.ComputingDevice prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.ComputingDevice}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.ComputingDevice, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.ComputingDevice)
                kungzhi.muse.io.DataSerializer.ComputingDeviceOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.ComputingDevice.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public boolean hasOsType() {
                return instance.hasOsType();
            }

            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public java.lang.String getOsType() {
                return instance.getOsType();
            }

            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public com.google.protobuf.ByteString
            getOsTypeBytes() {
                return instance.getOsTypeBytes();
            }

            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public Builder setOsType(
                    java.lang.String value) {
                copyOnWrite();
                instance.setOsType(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public Builder clearOsType() {
                copyOnWrite();
                instance.clearOsType();
                return this;
            }

            /**
             * <pre>
             * e.g. "Android", "iOS", "OSX"
             * </pre>
             * <p>
             * <code>optional string os_type = 1;</code>
             */
            public Builder setOsTypeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setOsTypeBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public boolean hasOsVersion() {
                return instance.hasOsVersion();
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public java.lang.String getOsVersion() {
                return instance.getOsVersion();
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public com.google.protobuf.ByteString
            getOsVersionBytes() {
                return instance.getOsVersionBytes();
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public Builder setOsVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setOsVersion(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public Builder clearOsVersion() {
                copyOnWrite();
                instance.clearOsVersion();
                return this;
            }

            /**
             * <pre>
             * e.g. "1.0.9", "7.0.3", "6.1.3"
             * </pre>
             * <p>
             * <code>optional string os_version = 2;</code>
             */
            public Builder setOsVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setOsVersionBytes(value);
                return this;
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public boolean hasHardwareModelName() {
                return instance.hasHardwareModelName();
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public java.lang.String getHardwareModelName() {
                return instance.getHardwareModelName();
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public com.google.protobuf.ByteString
            getHardwareModelNameBytes() {
                return instance.getHardwareModelNameBytes();
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public Builder setHardwareModelName(
                    java.lang.String value) {
                copyOnWrite();
                instance.setHardwareModelName(value);
                return this;
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public Builder clearHardwareModelName() {
                copyOnWrite();
                instance.clearHardwareModelName();
                return this;
            }

            /**
             * <pre>
             * conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
             * </pre>
             * <p>
             * <code>optional string hardware_model_name = 3;</code>
             */
            public Builder setHardwareModelNameBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setHardwareModelNameBytes(value);
                return this;
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public boolean hasHardwareModelId() {
                return instance.hasHardwareModelId();
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public java.lang.String getHardwareModelId() {
                return instance.getHardwareModelId();
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public com.google.protobuf.ByteString
            getHardwareModelIdBytes() {
                return instance.getHardwareModelIdBytes();
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public Builder setHardwareModelId(
                    java.lang.String value) {
                copyOnWrite();
                instance.setHardwareModelId(value);
                return this;
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public Builder clearHardwareModelId() {
                copyOnWrite();
                instance.clearHardwareModelId();
                return this;
            }

            /**
             * <pre>
             * unique model name: "SM-N900W8", "MacBookPro10,1"
             * </pre>
             * <p>
             * <code>optional string hardware_model_id = 4;</code>
             */
            public Builder setHardwareModelIdBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setHardwareModelIdBytes(value);
                return this;
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public boolean hasProcessorName() {
                return instance.hasProcessorName();
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public java.lang.String getProcessorName() {
                return instance.getProcessorName();
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public com.google.protobuf.ByteString
            getProcessorNameBytes() {
                return instance.getProcessorNameBytes();
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public Builder setProcessorName(
                    java.lang.String value) {
                copyOnWrite();
                instance.setProcessorName(value);
                return this;
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public Builder clearProcessorName() {
                copyOnWrite();
                instance.clearProcessorName();
                return this;
            }

            /**
             * <pre>
             * this includes instruction set
             * </pre>
             * <p>
             * <code>optional string processor_name = 5;</code>
             */
            public Builder setProcessorNameBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setProcessorNameBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public boolean hasProcessorSpeed() {
                return instance.hasProcessorSpeed();
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public java.lang.String getProcessorSpeed() {
                return instance.getProcessorSpeed();
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public com.google.protobuf.ByteString
            getProcessorSpeedBytes() {
                return instance.getProcessorSpeedBytes();
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public Builder setProcessorSpeed(
                    java.lang.String value) {
                copyOnWrite();
                instance.setProcessorSpeed(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public Builder clearProcessorSpeed() {
                copyOnWrite();
                instance.clearProcessorSpeed();
                return this;
            }

            /**
             * <pre>
             * e.g. "1000MHz"
             * </pre>
             * <p>
             * <code>optional string processor_speed = 6;</code>
             */
            public Builder setProcessorSpeedBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setProcessorSpeedBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g. 2, 4, 6
             * </pre>
             * <p>
             * <code>optional uint32 number_of_processors = 7;</code>
             */
            public boolean hasNumberOfProcessors() {
                return instance.hasNumberOfProcessors();
            }

            /**
             * <pre>
             * e.g. 2, 4, 6
             * </pre>
             * <p>
             * <code>optional uint32 number_of_processors = 7;</code>
             */
            public int getNumberOfProcessors() {
                return instance.getNumberOfProcessors();
            }

            /**
             * <pre>
             * e.g. 2, 4, 6
             * </pre>
             * <p>
             * <code>optional uint32 number_of_processors = 7;</code>
             */
            public Builder setNumberOfProcessors(int value) {
                copyOnWrite();
                instance.setNumberOfProcessors(value);
                return this;
            }

            /**
             * <pre>
             * e.g. 2, 4, 6
             * </pre>
             * <p>
             * <code>optional uint32 number_of_processors = 7;</code>
             */
            public Builder clearNumberOfProcessors() {
                copyOnWrite();
                instance.clearNumberOfProcessors();
                return this;
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public boolean hasMemorySize() {
                return instance.hasMemorySize();
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public java.lang.String getMemorySize() {
                return instance.getMemorySize();
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public com.google.protobuf.ByteString
            getMemorySizeBytes() {
                return instance.getMemorySizeBytes();
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public Builder setMemorySize(
                    java.lang.String value) {
                copyOnWrite();
                instance.setMemorySize(value);
                return this;
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public Builder clearMemorySize() {
                copyOnWrite();
                instance.clearMemorySize();
                return this;
            }

            /**
             * <pre>
             * e.g. “500MB”
             * </pre>
             * <p>
             * <code>optional string memory_size = 8;</code>
             */
            public Builder setMemorySizeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setMemorySizeBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public boolean hasBluetoothVersion() {
                return instance.hasBluetoothVersion();
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public java.lang.String getBluetoothVersion() {
                return instance.getBluetoothVersion();
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public com.google.protobuf.ByteString
            getBluetoothVersionBytes() {
                return instance.getBluetoothVersionBytes();
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public Builder setBluetoothVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setBluetoothVersion(value);
                return this;
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public Builder clearBluetoothVersion() {
                copyOnWrite();
                instance.clearBluetoothVersion();
                return this;
            }

            /**
             * <pre>
             * e.g."2.1 + EDR", "4.0"
             * </pre>
             * <p>
             * <code>optional string bluetooth_version = 9;</code>
             */
            public Builder setBluetoothVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setBluetoothVersionBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public boolean hasTimeZone() {
                return instance.hasTimeZone();
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public java.lang.String getTimeZone() {
                return instance.getTimeZone();
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public com.google.protobuf.ByteString
            getTimeZoneBytes() {
                return instance.getTimeZoneBytes();
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public Builder setTimeZone(
                    java.lang.String value) {
                copyOnWrite();
                instance.setTimeZone(value);
                return this;
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public Builder clearTimeZone() {
                copyOnWrite();
                instance.clearTimeZone();
                return this;
            }

            /**
             * <pre>
             * e.g. "EST", "PDT"
             * </pre>
             * <p>
             * <code>optional string time_zone = 10;</code>
             */
            public Builder setTimeZoneBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setTimeZoneBytes(value);
                return this;
            }

            /**
             * <pre>
             * e.g. -14000, 7200
             * </pre>
             * <p>
             * <code>optional sint32 time_zone_offset_seconds = 11;</code>
             */
            public boolean hasTimeZoneOffsetSeconds() {
                return instance.hasTimeZoneOffsetSeconds();
            }

            /**
             * <pre>
             * e.g. -14000, 7200
             * </pre>
             * <p>
             * <code>optional sint32 time_zone_offset_seconds = 11;</code>
             */
            public int getTimeZoneOffsetSeconds() {
                return instance.getTimeZoneOffsetSeconds();
            }

            /**
             * <pre>
             * e.g. -14000, 7200
             * </pre>
             * <p>
             * <code>optional sint32 time_zone_offset_seconds = 11;</code>
             */
            public Builder setTimeZoneOffsetSeconds(int value) {
                copyOnWrite();
                instance.setTimeZoneOffsetSeconds(value);
                return this;
            }

            /**
             * <pre>
             * e.g. -14000, 7200
             * </pre>
             * <p>
             * <code>optional sint32 time_zone_offset_seconds = 11;</code>
             */
            public Builder clearTimeZoneOffsetSeconds() {
                copyOnWrite();
                instance.clearTimeZoneOffsetSeconds();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.ComputingDevice)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.ComputingDevice();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.ComputingDevice other = (kungzhi.muse.io.DataSerializer.ComputingDevice) arg1;
                    osType_ = visitor.visitString(
                            hasOsType(), osType_,
                            other.hasOsType(), other.osType_);
                    osVersion_ = visitor.visitString(
                            hasOsVersion(), osVersion_,
                            other.hasOsVersion(), other.osVersion_);
                    hardwareModelName_ = visitor.visitString(
                            hasHardwareModelName(), hardwareModelName_,
                            other.hasHardwareModelName(), other.hardwareModelName_);
                    hardwareModelId_ = visitor.visitString(
                            hasHardwareModelId(), hardwareModelId_,
                            other.hasHardwareModelId(), other.hardwareModelId_);
                    processorName_ = visitor.visitString(
                            hasProcessorName(), processorName_,
                            other.hasProcessorName(), other.processorName_);
                    processorSpeed_ = visitor.visitString(
                            hasProcessorSpeed(), processorSpeed_,
                            other.hasProcessorSpeed(), other.processorSpeed_);
                    numberOfProcessors_ = visitor.visitInt(
                            hasNumberOfProcessors(), numberOfProcessors_,
                            other.hasNumberOfProcessors(), other.numberOfProcessors_);
                    memorySize_ = visitor.visitString(
                            hasMemorySize(), memorySize_,
                            other.hasMemorySize(), other.memorySize_);
                    bluetoothVersion_ = visitor.visitString(
                            hasBluetoothVersion(), bluetoothVersion_,
                            other.hasBluetoothVersion(), other.bluetoothVersion_);
                    timeZone_ = visitor.visitString(
                            hasTimeZone(), timeZone_,
                            other.hasTimeZone(), other.timeZone_);
                    timeZoneOffsetSeconds_ = visitor.visitInt(
                            hasTimeZoneOffsetSeconds(), timeZoneOffsetSeconds_,
                            other.hasTimeZoneOffsetSeconds(), other.timeZoneOffsetSeconds_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000001;
                                    osType_ = s;
                                    break;
                                }
                                case 18: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000002;
                                    osVersion_ = s;
                                    break;
                                }
                                case 26: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000004;
                                    hardwareModelName_ = s;
                                    break;
                                }
                                case 34: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000008;
                                    hardwareModelId_ = s;
                                    break;
                                }
                                case 42: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000010;
                                    processorName_ = s;
                                    break;
                                }
                                case 50: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000020;
                                    processorSpeed_ = s;
                                    break;
                                }
                                case 56: {
                                    bitField0_ |= 0x00000040;
                                    numberOfProcessors_ = input.readUInt32();
                                    break;
                                }
                                case 66: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000080;
                                    memorySize_ = s;
                                    break;
                                }
                                case 74: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000100;
                                    bluetoothVersion_ = s;
                                    break;
                                }
                                case 82: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000200;
                                    timeZone_ = s;
                                    break;
                                }
                                case 88: {
                                    bitField0_ |= 0x00000400;
                                    timeZoneOffsetSeconds_ = input.readSInt32();
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.ComputingDevice.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.ComputingDevice)
        private static final kungzhi.muse.io.DataSerializer.ComputingDevice DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new ComputingDevice();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.ComputingDevice getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<ComputingDevice> PARSER;

        public static com.google.protobuf.Parser<ComputingDevice> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 201;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.ComputingDevice> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.ComputingDevice.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.ComputingDevice.getDefaultInstance(),
                        null,
                        201,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.ComputingDevice.class);
    }

    public interface DSPOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.DSP)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional string type = 1;</code>
         */
        boolean hasType();

        /**
         * <code>optional string type = 1;</code>
         */
        java.lang.String getType();

        /**
         * <code>optional string type = 1;</code>
         */
        com.google.protobuf.ByteString
        getTypeBytes();

        /**
         * <code>repeated float float_array = 2;</code>
         */
        java.util.List<java.lang.Float> getFloatArrayList();

        /**
         * <code>repeated float float_array = 2;</code>
         */
        int getFloatArrayCount();

        /**
         * <code>repeated float float_array = 2;</code>
         */
        float getFloatArray(int index);

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        java.util.List<java.lang.Integer> getIntArrayList();

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        int getIntArrayCount();

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        int getIntArray(int index);

        /**
         * <code>optional string version = 4;</code>
         */
        boolean hasVersion();

        /**
         * <code>optional string version = 4;</code>
         */
        java.lang.String getVersion();

        /**
         * <code>optional string version = 4;</code>
         */
        com.google.protobuf.ByteString
        getVersionBytes();
    }

    /**
     * Protobuf type {@code interaxon.muse_data.DSP}
     */
    public static final class DSP extends
            com.google.protobuf.GeneratedMessageLite<
                    DSP, DSP.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.DSP)
            DSPOrBuilder {
        private DSP() {
            type_ = "";
            floatArray_ = emptyFloatList();
            intArray_ = emptyIntList();
            version_ = "";
        }

        private int bitField0_;
        public static final int TYPE_FIELD_NUMBER = 1;
        private java.lang.String type_;

        /**
         * <code>optional string type = 1;</code>
         */
        public boolean hasType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional string type = 1;</code>
         */
        public java.lang.String getType() {
            return type_;
        }

        /**
         * <code>optional string type = 1;</code>
         */
        public com.google.protobuf.ByteString
        getTypeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(type_);
        }

        /**
         * <code>optional string type = 1;</code>
         */
        private void setType(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            type_ = value;
        }

        /**
         * <code>optional string type = 1;</code>
         */
        private void clearType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            type_ = getDefaultInstance().getType();
        }

        /**
         * <code>optional string type = 1;</code>
         */
        private void setTypeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            type_ = value.toStringUtf8();
        }

        public static final int FLOAT_ARRAY_FIELD_NUMBER = 2;
        private com.google.protobuf.Internal.FloatList floatArray_;

        /**
         * <code>repeated float float_array = 2;</code>
         */
        public java.util.List<java.lang.Float>
        getFloatArrayList() {
            return floatArray_;
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        public int getFloatArrayCount() {
            return floatArray_.size();
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        public float getFloatArray(int index) {
            return floatArray_.getFloat(index);
        }

        private void ensureFloatArrayIsMutable() {
            if (!floatArray_.isModifiable()) {
                floatArray_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(floatArray_);
            }
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        private void setFloatArray(
                int index, float value) {
            ensureFloatArrayIsMutable();
            floatArray_.setFloat(index, value);
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        private void addFloatArray(float value) {
            ensureFloatArrayIsMutable();
            floatArray_.addFloat(value);
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        private void addAllFloatArray(
                java.lang.Iterable<? extends java.lang.Float> values) {
            ensureFloatArrayIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, floatArray_);
        }

        /**
         * <code>repeated float float_array = 2;</code>
         */
        private void clearFloatArray() {
            floatArray_ = emptyFloatList();
        }

        public static final int INT_ARRAY_FIELD_NUMBER = 3;
        private com.google.protobuf.Internal.IntList intArray_;

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getIntArrayList() {
            return intArray_;
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        public int getIntArrayCount() {
            return intArray_.size();
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        public int getIntArray(int index) {
            return intArray_.getInt(index);
        }

        private void ensureIntArrayIsMutable() {
            if (!intArray_.isModifiable()) {
                intArray_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(intArray_);
            }
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        private void setIntArray(
                int index, int value) {
            ensureIntArrayIsMutable();
            intArray_.setInt(index, value);
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        private void addIntArray(int value) {
            ensureIntArrayIsMutable();
            intArray_.addInt(value);
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        private void addAllIntArray(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureIntArrayIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, intArray_);
        }

        /**
         * <code>repeated uint32 int_array = 3;</code>
         */
        private void clearIntArray() {
            intArray_ = emptyIntList();
        }

        public static final int VERSION_FIELD_NUMBER = 4;
        private java.lang.String version_;

        /**
         * <code>optional string version = 4;</code>
         */
        public boolean hasVersion() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string version = 4;</code>
         */
        public java.lang.String getVersion() {
            return version_;
        }

        /**
         * <code>optional string version = 4;</code>
         */
        public com.google.protobuf.ByteString
        getVersionBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(version_);
        }

        /**
         * <code>optional string version = 4;</code>
         */
        private void setVersion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            version_ = value;
        }

        /**
         * <code>optional string version = 4;</code>
         */
        private void clearVersion() {
            bitField0_ = (bitField0_ & ~0x00000002);
            version_ = getDefaultInstance().getVersion();
        }

        /**
         * <code>optional string version = 4;</code>
         */
        private void setVersionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            version_ = value.toStringUtf8();
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeString(1, getType());
            }
            for (int i = 0; i < floatArray_.size(); i++) {
                output.writeFloat(2, floatArray_.getFloat(i));
            }
            for (int i = 0; i < intArray_.size(); i++) {
                output.writeUInt32(3, intArray_.getInt(i));
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeString(4, getVersion());
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(1, getType());
            }
            {
                int dataSize = 0;
                dataSize = 4 * getFloatArrayList().size();
                size += dataSize;
                size += 1 * getFloatArrayList().size();
            }
            {
                int dataSize = 0;
                for (int i = 0; i < intArray_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(intArray_.getInt(i));
                }
                size += dataSize;
                size += 1 * getIntArrayList().size();
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(4, getVersion());
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.DSP parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.DSP prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.DSP}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.DSP, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.DSP)
                kungzhi.muse.io.DataSerializer.DSPOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.DSP.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional string type = 1;</code>
             */
            public boolean hasType() {
                return instance.hasType();
            }

            /**
             * <code>optional string type = 1;</code>
             */
            public java.lang.String getType() {
                return instance.getType();
            }

            /**
             * <code>optional string type = 1;</code>
             */
            public com.google.protobuf.ByteString
            getTypeBytes() {
                return instance.getTypeBytes();
            }

            /**
             * <code>optional string type = 1;</code>
             */
            public Builder setType(
                    java.lang.String value) {
                copyOnWrite();
                instance.setType(value);
                return this;
            }

            /**
             * <code>optional string type = 1;</code>
             */
            public Builder clearType() {
                copyOnWrite();
                instance.clearType();
                return this;
            }

            /**
             * <code>optional string type = 1;</code>
             */
            public Builder setTypeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setTypeBytes(value);
                return this;
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public java.util.List<java.lang.Float>
            getFloatArrayList() {
                return java.util.Collections.unmodifiableList(
                        instance.getFloatArrayList());
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public int getFloatArrayCount() {
                return instance.getFloatArrayCount();
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public float getFloatArray(int index) {
                return instance.getFloatArray(index);
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public Builder setFloatArray(
                    int index, float value) {
                copyOnWrite();
                instance.setFloatArray(index, value);
                return this;
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public Builder addFloatArray(float value) {
                copyOnWrite();
                instance.addFloatArray(value);
                return this;
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public Builder addAllFloatArray(
                    java.lang.Iterable<? extends java.lang.Float> values) {
                copyOnWrite();
                instance.addAllFloatArray(values);
                return this;
            }

            /**
             * <code>repeated float float_array = 2;</code>
             */
            public Builder clearFloatArray() {
                copyOnWrite();
                instance.clearFloatArray();
                return this;
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getIntArrayList() {
                return java.util.Collections.unmodifiableList(
                        instance.getIntArrayList());
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public int getIntArrayCount() {
                return instance.getIntArrayCount();
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public int getIntArray(int index) {
                return instance.getIntArray(index);
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public Builder setIntArray(
                    int index, int value) {
                copyOnWrite();
                instance.setIntArray(index, value);
                return this;
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public Builder addIntArray(int value) {
                copyOnWrite();
                instance.addIntArray(value);
                return this;
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public Builder addAllIntArray(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                copyOnWrite();
                instance.addAllIntArray(values);
                return this;
            }

            /**
             * <code>repeated uint32 int_array = 3;</code>
             */
            public Builder clearIntArray() {
                copyOnWrite();
                instance.clearIntArray();
                return this;
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public boolean hasVersion() {
                return instance.hasVersion();
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public java.lang.String getVersion() {
                return instance.getVersion();
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public com.google.protobuf.ByteString
            getVersionBytes() {
                return instance.getVersionBytes();
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public Builder setVersion(
                    java.lang.String value) {
                copyOnWrite();
                instance.setVersion(value);
                return this;
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public Builder clearVersion() {
                copyOnWrite();
                instance.clearVersion();
                return this;
            }

            /**
             * <code>optional string version = 4;</code>
             */
            public Builder setVersionBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setVersionBytes(value);
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.DSP)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.DSP();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    floatArray_.makeImmutable();
                    intArray_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.DSP other = (kungzhi.muse.io.DataSerializer.DSP) arg1;
                    type_ = visitor.visitString(
                            hasType(), type_,
                            other.hasType(), other.type_);
                    floatArray_ = visitor.visitFloatList(floatArray_, other.floatArray_);
                    intArray_ = visitor.visitIntList(intArray_, other.intArray_);
                    version_ = visitor.visitString(
                            hasVersion(), version_,
                            other.hasVersion(), other.version_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 10: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000001;
                                    type_ = s;
                                    break;
                                }
                                case 21: {
                                    if (!floatArray_.isModifiable()) {
                                        floatArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(floatArray_);
                                    }
                                    floatArray_.addFloat(input.readFloat());
                                    break;
                                }
                                case 18: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!floatArray_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        final int currentSize = floatArray_.size();
                                        floatArray_ = floatArray_.mutableCopyWithCapacity(
                                                currentSize + (length / 4));
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        floatArray_.addFloat(input.readFloat());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                                case 24: {
                                    if (!intArray_.isModifiable()) {
                                        intArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(intArray_);
                                    }
                                    intArray_.addInt(input.readUInt32());
                                    break;
                                }
                                case 26: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!intArray_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        intArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(intArray_);
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        intArray_.addInt(input.readUInt32());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                                case 34: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000002;
                                    version_ = s;
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.DSP.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.DSP)
        private static final kungzhi.muse.io.DataSerializer.DSP DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new DSP();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.DSP getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<DSP> PARSER;

        public static com.google.protobuf.Parser<DSP> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 200;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.DSP> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.DSP.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.DSP.getDefaultInstance(),
                        null,
                        200,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.DSP.class);
    }

    public interface MuseElementOrBuilder extends
            // @@protoc_insertion_point(interface_extends:interaxon.muse_data.MuseElement)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        boolean hasType();

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        kungzhi.muse.io.DataSerializer.MuseElementType getType();

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        boolean hasStringType();

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        java.lang.String getStringType();

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        com.google.protobuf.ByteString
        getStringTypeBytes();

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        boolean hasAlgorithmVersion();

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        int getAlgorithmVersion();

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        java.util.List<java.lang.Double> getRealArrayList();

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        int getRealArrayCount();

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        double getRealArray(int index);

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        java.util.List<java.lang.Integer> getIntegerArrayList();

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        int getIntegerArrayCount();

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        int getIntegerArray(int index);
    }

    /**
     * Protobuf type {@code interaxon.muse_data.MuseElement}
     */
    public static final class MuseElement extends
            com.google.protobuf.GeneratedMessageLite<
                    MuseElement, MuseElement.Builder> implements
            // @@protoc_insertion_point(message_implements:interaxon.muse_data.MuseElement)
            MuseElementOrBuilder {
        private MuseElement() {
            stringType_ = "";
            realArray_ = emptyDoubleList();
            integerArray_ = emptyIntList();
        }

        private int bitField0_;
        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_;

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        public boolean hasType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        public kungzhi.muse.io.DataSerializer.MuseElementType getType() {
            kungzhi.muse.io.DataSerializer.MuseElementType result = kungzhi.muse.io.DataSerializer.MuseElementType.forNumber(type_);
            return result == null ? kungzhi.muse.io.DataSerializer.MuseElementType.STRING_TYPE : result;
        }

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        private void setType(kungzhi.muse.io.DataSerializer.MuseElementType value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            type_ = value.getNumber();
        }

        /**
         * <pre>
         * Predefined algorithm types. If type is STRING_TYPE, refer to the
         * string_type field for type information.
         * </pre>
         * <p>
         * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
         */
        private void clearType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            type_ = 0;
        }

        public static final int STRING_TYPE_FIELD_NUMBER = 2;
        private java.lang.String stringType_;

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        public boolean hasStringType() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        public java.lang.String getStringType() {
            return stringType_;
        }

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        public com.google.protobuf.ByteString
        getStringTypeBytes() {
            return com.google.protobuf.ByteString.copyFromUtf8(stringType_);
        }

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        private void setStringType(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            stringType_ = value;
        }

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        private void clearStringType() {
            bitField0_ = (bitField0_ & ~0x00000002);
            stringType_ = getDefaultInstance().getStringType();
        }

        /**
         * <pre>
         * Used for algorithms still under active development.
         * </pre>
         * <p>
         * <code>optional string string_type = 2;</code>
         */
        private void setStringTypeBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            stringType_ = value.toStringUtf8();
        }

        public static final int ALGORITHM_VERSION_FIELD_NUMBER = 3;
        private int algorithmVersion_;

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        public boolean hasAlgorithmVersion() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        public int getAlgorithmVersion() {
            return algorithmVersion_;
        }

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        private void setAlgorithmVersion(int value) {
            bitField0_ |= 0x00000004;
            algorithmVersion_ = value;
        }

        /**
         * <pre>
         * Version of the algorithm used to produce these values. This value
         * increases when a new version of an algorithm is released.
         * </pre>
         * <p>
         * <code>optional uint32 algorithm_version = 3;</code>
         */
        private void clearAlgorithmVersion() {
            bitField0_ = (bitField0_ & ~0x00000004);
            algorithmVersion_ = 0;
        }

        public static final int REAL_ARRAY_FIELD_NUMBER = 4;
        private com.google.protobuf.Internal.DoubleList realArray_;

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        public java.util.List<java.lang.Double>
        getRealArrayList() {
            return realArray_;
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        public int getRealArrayCount() {
            return realArray_.size();
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        public double getRealArray(int index) {
            return realArray_.getDouble(index);
        }

        private void ensureRealArrayIsMutable() {
            if (!realArray_.isModifiable()) {
                realArray_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(realArray_);
            }
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        private void setRealArray(
                int index, double value) {
            ensureRealArrayIsMutable();
            realArray_.setDouble(index, value);
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        private void addRealArray(double value) {
            ensureRealArrayIsMutable();
            realArray_.addDouble(value);
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        private void addAllRealArray(
                java.lang.Iterable<? extends java.lang.Double> values) {
            ensureRealArrayIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, realArray_);
        }

        /**
         * <pre>
         * Algorithm values.
         * </pre>
         * <p>
         * <code>repeated double real_array = 4;</code>
         */
        private void clearRealArray() {
            realArray_ = emptyDoubleList();
        }

        public static final int INTEGER_ARRAY_FIELD_NUMBER = 5;
        private com.google.protobuf.Internal.IntList integerArray_;

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getIntegerArrayList() {
            return integerArray_;
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        public int getIntegerArrayCount() {
            return integerArray_.size();
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        public int getIntegerArray(int index) {
            return integerArray_.getInt(index);
        }

        private void ensureIntegerArrayIsMutable() {
            if (!integerArray_.isModifiable()) {
                integerArray_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(integerArray_);
            }
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        private void setIntegerArray(
                int index, int value) {
            ensureIntegerArrayIsMutable();
            integerArray_.setInt(index, value);
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        private void addIntegerArray(int value) {
            ensureIntegerArrayIsMutable();
            integerArray_.addInt(value);
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        private void addAllIntegerArray(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureIntegerArrayIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, integerArray_);
        }

        /**
         * <code>repeated uint32 integer_array = 5;</code>
         */
        private void clearIntegerArray() {
            integerArray_ = emptyIntList();
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeEnum(1, type_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeString(2, getStringType());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, algorithmVersion_);
            }
            for (int i = 0; i < realArray_.size(); i++) {
                output.writeDouble(4, realArray_.getDouble(i));
            }
            for (int i = 0; i < integerArray_.size(); i++) {
                output.writeUInt32(5, integerArray_.getInt(i));
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, type_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeStringSize(2, getStringType());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, algorithmVersion_);
            }
            {
                int dataSize = 0;
                dataSize = 8 * getRealArrayList().size();
                size += dataSize;
                size += 1 * getRealArrayList().size();
            }
            {
                int dataSize = 0;
                for (int i = 0; i < integerArray_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(integerArray_.getInt(i));
                }
                size += dataSize;
                size += 1 * getIntegerArrayList().size();
            }
            size += unknownFields.getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(kungzhi.muse.io.DataSerializer.MuseElement prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        /**
         * Protobuf type {@code interaxon.muse_data.MuseElement}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        kungzhi.muse.io.DataSerializer.MuseElement, Builder> implements
                // @@protoc_insertion_point(builder_implements:interaxon.muse_data.MuseElement)
                kungzhi.muse.io.DataSerializer.MuseElementOrBuilder {
            // Construct using kungzhi.muse.io.DataSerializer.MuseElement.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * Predefined algorithm types. If type is STRING_TYPE, refer to the
             * string_type field for type information.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
             */
            public boolean hasType() {
                return instance.hasType();
            }

            /**
             * <pre>
             * Predefined algorithm types. If type is STRING_TYPE, refer to the
             * string_type field for type information.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
             */
            public kungzhi.muse.io.DataSerializer.MuseElementType getType() {
                return instance.getType();
            }

            /**
             * <pre>
             * Predefined algorithm types. If type is STRING_TYPE, refer to the
             * string_type field for type information.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
             */
            public Builder setType(kungzhi.muse.io.DataSerializer.MuseElementType value) {
                copyOnWrite();
                instance.setType(value);
                return this;
            }

            /**
             * <pre>
             * Predefined algorithm types. If type is STRING_TYPE, refer to the
             * string_type field for type information.
             * </pre>
             * <p>
             * <code>optional .interaxon.muse_data.MuseElementType type = 1;</code>
             */
            public Builder clearType() {
                copyOnWrite();
                instance.clearType();
                return this;
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public boolean hasStringType() {
                return instance.hasStringType();
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public java.lang.String getStringType() {
                return instance.getStringType();
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public com.google.protobuf.ByteString
            getStringTypeBytes() {
                return instance.getStringTypeBytes();
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public Builder setStringType(
                    java.lang.String value) {
                copyOnWrite();
                instance.setStringType(value);
                return this;
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public Builder clearStringType() {
                copyOnWrite();
                instance.clearStringType();
                return this;
            }

            /**
             * <pre>
             * Used for algorithms still under active development.
             * </pre>
             * <p>
             * <code>optional string string_type = 2;</code>
             */
            public Builder setStringTypeBytes(
                    com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setStringTypeBytes(value);
                return this;
            }

            /**
             * <pre>
             * Version of the algorithm used to produce these values. This value
             * increases when a new version of an algorithm is released.
             * </pre>
             * <p>
             * <code>optional uint32 algorithm_version = 3;</code>
             */
            public boolean hasAlgorithmVersion() {
                return instance.hasAlgorithmVersion();
            }

            /**
             * <pre>
             * Version of the algorithm used to produce these values. This value
             * increases when a new version of an algorithm is released.
             * </pre>
             * <p>
             * <code>optional uint32 algorithm_version = 3;</code>
             */
            public int getAlgorithmVersion() {
                return instance.getAlgorithmVersion();
            }

            /**
             * <pre>
             * Version of the algorithm used to produce these values. This value
             * increases when a new version of an algorithm is released.
             * </pre>
             * <p>
             * <code>optional uint32 algorithm_version = 3;</code>
             */
            public Builder setAlgorithmVersion(int value) {
                copyOnWrite();
                instance.setAlgorithmVersion(value);
                return this;
            }

            /**
             * <pre>
             * Version of the algorithm used to produce these values. This value
             * increases when a new version of an algorithm is released.
             * </pre>
             * <p>
             * <code>optional uint32 algorithm_version = 3;</code>
             */
            public Builder clearAlgorithmVersion() {
                copyOnWrite();
                instance.clearAlgorithmVersion();
                return this;
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public java.util.List<java.lang.Double>
            getRealArrayList() {
                return java.util.Collections.unmodifiableList(
                        instance.getRealArrayList());
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public int getRealArrayCount() {
                return instance.getRealArrayCount();
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public double getRealArray(int index) {
                return instance.getRealArray(index);
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public Builder setRealArray(
                    int index, double value) {
                copyOnWrite();
                instance.setRealArray(index, value);
                return this;
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public Builder addRealArray(double value) {
                copyOnWrite();
                instance.addRealArray(value);
                return this;
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public Builder addAllRealArray(
                    java.lang.Iterable<? extends java.lang.Double> values) {
                copyOnWrite();
                instance.addAllRealArray(values);
                return this;
            }

            /**
             * <pre>
             * Algorithm values.
             * </pre>
             * <p>
             * <code>repeated double real_array = 4;</code>
             */
            public Builder clearRealArray() {
                copyOnWrite();
                instance.clearRealArray();
                return this;
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public java.util.List<java.lang.Integer>
            getIntegerArrayList() {
                return java.util.Collections.unmodifiableList(
                        instance.getIntegerArrayList());
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public int getIntegerArrayCount() {
                return instance.getIntegerArrayCount();
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public int getIntegerArray(int index) {
                return instance.getIntegerArray(index);
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public Builder setIntegerArray(
                    int index, int value) {
                copyOnWrite();
                instance.setIntegerArray(index, value);
                return this;
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public Builder addIntegerArray(int value) {
                copyOnWrite();
                instance.addIntegerArray(value);
                return this;
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public Builder addAllIntegerArray(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                copyOnWrite();
                instance.addAllIntegerArray(values);
                return this;
            }

            /**
             * <code>repeated uint32 integer_array = 5;</code>
             */
            public Builder clearIntegerArray() {
                copyOnWrite();
                instance.clearIntegerArray();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:interaxon.muse_data.MuseElement)
        }

        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new kungzhi.muse.io.DataSerializer.MuseElement();
                }
                case IS_INITIALIZED: {
                    return DEFAULT_INSTANCE;
                }
                case MAKE_IMMUTABLE: {
                    realArray_.makeImmutable();
                    integerArray_.makeImmutable();
                    return null;
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case VISIT: {
                    Visitor visitor = (Visitor) arg0;
                    kungzhi.muse.io.DataSerializer.MuseElement other = (kungzhi.muse.io.DataSerializer.MuseElement) arg1;
                    type_ = visitor.visitInt(hasType(), type_,
                            other.hasType(), other.type_);
                    stringType_ = visitor.visitString(
                            hasStringType(), stringType_,
                            other.hasStringType(), other.stringType_);
                    algorithmVersion_ = visitor.visitInt(
                            hasAlgorithmVersion(), algorithmVersion_,
                            other.hasAlgorithmVersion(), other.algorithmVersion_);
                    realArray_ = visitor.visitDoubleList(realArray_, other.realArray_);
                    integerArray_ = visitor.visitIntList(integerArray_, other.integerArray_);
                    if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                            .INSTANCE) {
                        bitField0_ |= other.bitField0_;
                    }
                    return this;
                }
                case MERGE_FROM_STREAM: {
                    com.google.protobuf.CodedInputStream input =
                            (com.google.protobuf.CodedInputStream) arg0;
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                            (com.google.protobuf.ExtensionRegistryLite) arg1;
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0:
                                    done = true;
                                    break;
                                default: {
                                    if (!parseUnknownField(tag, input)) {
                                        done = true;
                                    }
                                    break;
                                }
                                case 8: {
                                    int rawValue = input.readEnum();
                                    kungzhi.muse.io.DataSerializer.MuseElementType value = kungzhi.muse.io.DataSerializer.MuseElementType.forNumber(rawValue);
                                    if (value == null) {
                                        super.mergeVarintField(1, rawValue);
                                    } else {
                                        bitField0_ |= 0x00000001;
                                        type_ = rawValue;
                                    }
                                    break;
                                }
                                case 18: {
                                    java.lang.String s = input.readString();
                                    bitField0_ |= 0x00000002;
                                    stringType_ = s;
                                    break;
                                }
                                case 24: {
                                    bitField0_ |= 0x00000004;
                                    algorithmVersion_ = input.readUInt32();
                                    break;
                                }
                                case 33: {
                                    if (!realArray_.isModifiable()) {
                                        realArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(realArray_);
                                    }
                                    realArray_.addDouble(input.readDouble());
                                    break;
                                }
                                case 34: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!realArray_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        final int currentSize = realArray_.size();
                                        realArray_ = realArray_.mutableCopyWithCapacity(
                                                currentSize + (length / 8));
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        realArray_.addDouble(input.readDouble());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                                case 40: {
                                    if (!integerArray_.isModifiable()) {
                                        integerArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(integerArray_);
                                    }
                                    integerArray_.addInt(input.readUInt32());
                                    break;
                                }
                                case 42: {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if (!integerArray_.isModifiable() && input.getBytesUntilLimit() > 0) {
                                        integerArray_ =
                                                com.google.protobuf.GeneratedMessageLite.mutableCopy(integerArray_);
                                    }
                                    while (input.getBytesUntilLimit() > 0) {
                                        integerArray_.addInt(input.readUInt32());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                            }
                        }
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        throw new RuntimeException(e.setUnfinishedMessage(this));
                    } catch (java.io.IOException e) {
                        throw new RuntimeException(
                                new com.google.protobuf.InvalidProtocolBufferException(
                                        e.getMessage()).setUnfinishedMessage(this));
                    } finally {
                    }
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    if (PARSER == null) {
                        synchronized (kungzhi.muse.io.DataSerializer.MuseElement.class) {
                            if (PARSER == null) {
                                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                            }
                        }
                    }
                    return PARSER;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:interaxon.muse_data.MuseElement)
        private static final kungzhi.muse.io.DataSerializer.MuseElement DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new MuseElement();
            DEFAULT_INSTANCE.makeImmutable();
        }

        public static kungzhi.muse.io.DataSerializer.MuseElement getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<MuseElement> PARSER;

        public static com.google.protobuf.Parser<MuseElement> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }

        public static final int MUSEDATA_FIELD_NUMBER = 204;
        /**
         * <code>extend .interaxon.muse_data.MuseData { ... }</code>
         */
        public static final
        com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
                kungzhi.muse.io.DataSerializer.MuseData,
                kungzhi.muse.io.DataSerializer.MuseElement> museData = com.google.protobuf.GeneratedMessageLite
                .newSingularGeneratedExtension(
                        kungzhi.muse.io.DataSerializer.MuseData.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseElement.getDefaultInstance(),
                        kungzhi.muse.io.DataSerializer.MuseElement.getDefaultInstance(),
                        null,
                        204,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        kungzhi.muse.io.DataSerializer.MuseElement.class);
    }


    static {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
