//
// Protocol Buffer file format for Muse osc.
// Version: 2.7
//
// A note on how the version number for this file works:
//
// The format is: <InterMessageHeaderVersion>.<ProtobufFileVersion>
//
// The <InterMessageHeaderVersion> is the header used between messages in a
// file. This version only changes when backward-incompatible changes are made
// to the Protobuf file messages, or to the InterMessage Header Format. The
// InterMessageHeader is prefixed to each MuseData message block and contains:
//   * the size of the message (4 bytes)
//   * the Inter-Message version(2 bytes).
//
// The <ProtobufFileVersion> is the version for this file, and changes when a
// message definition changes. Whenever changes are made to the message
// definition, the changelog is explicitly updated with every field that has
// been added or changed.
//
//
// Changelog:
//   * v2.7:    - Added bsp_version to MuseVersion
//              - Added model, headband_name, and microcontroller_id MuseConfig
//              - Added MuseModel enum with MU_01 and MU_02
//   * v2.6:    - Added MUSE_ELEMENT type to MuseData:DataType
//              - Added Gyro type
//   * v2.5:    - Added MuseElement messages at extension 204 containing
//                  type = 1
//                through
//                  integer_array = 5
//              - Added MuseElementType enum containing
//                  STRING_TYPE = 0
//                through
//                  JAW_CLENCH = 23
//
//   * v2.4:    - Added options to improve code generation for C++
//                (LITE_RUNTIME) and package
//
//   * v2.3:    - Made changes required for protobuf2.6 and proto3
//                - protobuf 2.6: Changed all "required" extension fields to
//                  "optional"
//                - proto3: Added syntax = "proto2";
//
//   * v2.2:    - In Datatype enum, added
//                  COMPUTING_DEVICE,
//                  EEG_DROPPED,
//                  ACC_DROPPED,
//                  CALM_APP,
//                  CALM_ALG.
//              - Added EEG_DroppedSamples messages containing
//                  num.
//              - Added ACC_DroppedSamples messages containing
//                  num.
//              - Added ComputingDevice messages containing
//                  os_type,
//                  os_version,
//                  hardware_model_name,
//                  hardware_model_id,
//                  processor_name,
//                  processor_speed,
//                  number_of_processors,
//                  memory_size,
//                  bluetooth_version,
//                  time_zone,
//                  time_zone_offset_seconds.
//              - In DSP messages, added
//                  version
//
//   * v2.1:    In HeadLocations enum, added
//                  MUSE_LEFT_AUX,
//                  MUSE_RIGHT_AUX.
//
// See the wiki for more info:
// https://sites.google.com/a/interaxon.ca/muse-developer-site/data-files
//

syntax = "proto2";
package interaxon.muse_data;
option java_package = "kungzhi.muse.osc";
option java_outer_classname = "SignalSerializer";
option optimize_for = LITE_RUNTIME;


message MuseDataCollection {
    repeated MuseData collection = 1;
}


message MuseData {
    // The time that this event occurred. The precision is down to microseconds.
    required double timestamp = 1;

    // This allows us to identify the extension osc type.
    enum Datatype {
        EEG = 0;
        QUANT = 1;
        ACCEL = 2;
        BATTERY = 3;
        VERSION = 4;
        CONFIG = 5;
        ANNOTATION = 6;
        HISTOGRAM = 7;
        ALGVALUE = 8;
        DSP = 9;
        COMPUTING_DEVICE = 10;
        EEG_DROPPED = 11;
        ACC_DROPPED = 12;
        CALM_APP = 13;
        CALM_ALG = 14;
        MUSE_ELEMENTS = 15;
        GYRO = 16;
    }
    required Datatype datatype = 2;

    // The config_id here maps to a MuseConfig message.
    // This is the sensor configuration for this osc.
    // This id allows osc from multiple devices to be recorded to a single file.
    optional uint64 config_id = 3;

    // Interaxon reserves ids 4-7 for future MuseData fields.

    // Reserved for Muse extension messages.
    // Values up to 15 only take 1 byte to store field number.
    extensions 8 to 999;

    // For 3rd party developers, uses 2 bytes for field number.
    extensions 1000 to 2047;
}


enum HeadLocations {
    // All head locations http://www.bem.fi/book/13/13.htm#03
    NZ   = 1;
    FP1  = 2;
    FPZ  = 3;
    FP2  = 4;
    AF7  = 5;
    AF3  = 6;
    AFZ  = 7;
    AF4  = 8;
    AF8  = 9;
    F9   = 10;
    F7   = 11;
    F5   = 12;
    F3   = 13;
    F1   = 14;
    FZ   = 15;
    F2   = 16;
    F4   = 17;
    F6   = 18;
    F8   = 19;
    F10  = 20;
    FT9  = 21;
    FT7  = 22;
    FC5  = 23;
    FC3  = 24;
    FC1  = 25;
    FCZ  = 26;
    FC2  = 27;
    FC4  = 28;
    FC6  = 29;
    FT8  = 30;
    FT10 = 31;
    A1   = 32;
    T9   = 33;
    T7   = 34;
    C5   = 35;
    C3   = 36;
    C1   = 37;
    CZ   = 38;
    C2   = 39;
    C4   = 40;
    C6   = 41;
    T8   = 42;
    T10  = 43;
    A2   = 44;
    TP9  = 45;
    TP7  = 46;
    CP5  = 47;
    CP3  = 48;
    CP1  = 49;
    CPZ  = 50;
    CP2  = 51;
    CP4  = 52;
    CP6  = 53;
    TP8  = 54;
    TP10 = 55;
    P9   = 56;
    P7   = 57;
    P5   = 58;
    P3   = 59;
    P1   = 60;
    PZ   = 61;
    P2   = 62;
    P4   = 63;
    P6   = 64;
    P8   = 65;
    P10  = 66;
    PO7  = 67;
    PO3  = 68;
    POZ  = 69;
    PO4  = 70;
    PO8  = 71;
    O1   = 72;
    OZ   = 73;
    O2   = 74;
    IZ   = 75;
    AUX1 = 76;
    AUX2 = 77;
    AUX3 = 78;
    AUX4 = 79;
    MUSE_LEFT_AUX = 80;
    MUSE_RIGHT_AUX = 81;
}


enum EEGUnits {
  EEG_MICROVOLTS = 1;
  EEG_MUSE1_RAW  = 2;
}


message EEG {
    extend MuseData {
        optional EEG museData = 8;
    }
    repeated float values = 2;
    optional float drl = 5;
    optional float ref = 6;
}


// Possible quantization values are 1, 2, 4, 8, 16, 32, 64, 128
message MuseQuantization {
    extend MuseData {
        optional MuseQuantization museData = 9;
    }
    repeated uint32 values = 1;
}


enum AccelerometerUnits {
    ACC_GFORCE = 1;
    ACC_MUSE1_RAW = 2;
}


// Accelerometer values are stored as milli-G's
message Accelerometer {
    extend MuseData {
        optional Accelerometer museData = 10;
    }
    optional float acc1 = 1; // forward_back
    optional float acc2 = 2; // up_down
    optional float acc3 = 3; // left_right
}

message Gyro {
    extend MuseData {
        optional Gyro museData = 12;
    }
    optional float gyro1 = 1;
    optional float gyro2 = 2;
    optional float gyro3 = 3;
}
// You can use this message to record application-level events.
message Annotation {
    extend MuseData {
        optional Annotation museData = 100;
    }
    // This is additional osc for the event, can be in any format specified
    // by the Format enum.
    optional string event_data = 1;
    enum Format {
        PLAIN_STRING = 0;
        JSON = 1;
        OSC = 2;
    }
    // This specifies the string format of event_data.
    optional Format event_data_format = 2 [default = PLAIN_STRING];

    // This can be used to classify events, for example "blink" or "error".
    optional string event_type = 3;

    // This can be used to pair events together or give them unique IDs.
    optional string event_id = 4;

    // This can be used to indicate this is a sub-event of another event.
    optional string parent_id = 5;
}


message Battery {
    extend MuseData {
       optional Battery museData = 101;
    }
    optional uint32 percent_remaining = 1;
    optional uint32 battery_fuel_gauge_millivolts = 2;
    optional uint32 battery_adc_millivolts = 3;
    optional sint32 temperature_celsius = 4;
}


// This indicates the version of the Muse that was used with this recording.
message MuseVersion {
    extend MuseData {
        optional MuseVersion museData = 102;
    }
    optional string hardware_version = 1;
    optional string firmware_headset_version = 2;
    optional string firmware_type = 3;
    optional string firmware_bootloader_version = 4;
    optional string build_number = 5;
    optional string protocol_version = 6;
    optional string bsp_version = 7;
}


// This indicates the configuration of a specific Muse specified by the config_id.
message MuseConfig {
    extend MuseData {
        optional MuseConfig museData = 103;
    }
    enum MuseModel {
        MU_01 = 1;
        MU_02 = 2;
    }

    // Global configuration
    optional string mac_addr = 1;
    optional string serial_number = 2;
    optional string preset = 3;
    optional MuseModel model = 4;
    optional string headband_name = 5;
    optional string microcontroller_id = 6;

    // Network protocol
    optional bool compression_enabled = 100;

    // EEG osc
    optional bool filters_enabled = 201;
    optional uint32 notch_frequency_hz = 202;
    optional uint32 eeg_sample_frequency_hz = 203;
    optional uint32 eeg_output_frequency_hz = 204;
    optional uint32 eeg_samples_bitwidth = 205;
    optional uint32 eeg_channel_count = 206;
    optional string eeg_channel_layout = 207; // raw string, converted to eeg_locations
    optional uint32 eeg_downsample  = 208;
    optional EEGUnits eeg_units = 209;
    repeated HeadLocations eeg_locations = 210; // derived from eeg_channel_layout
    optional float eeg_conversion_factor = 211;
    optional float afe_gain = 212;  // Analog Front End Gain

    // DRLREF osc
    optional bool drlref_data_enabled = 300;
    optional float drlref_conversion_factor = 301;
    optional uint32 drlref_sample_frequency_hz = 302;

    // Accelerometer osc
    optional bool acc_data_enabled = 400;
    optional AccelerometerUnits acc_units = 401;
    optional float acc_conversion_factor = 402;
    optional uint32 acc_sample_frequency_hz = 403;

    // Battery osc
    optional bool battery_data_enabled = 500;
    optional uint32 battery_percent_remaining = 501; // This is a bootstrap value since battery info is only emitted every few seconds
    optional uint32 battery_millivolts = 502; // This is a bootstrap value since battery info is only emitted every few seconds

    // Error osc (hardware/firmware level errors)
    optional bool error_data_enabled = 600;

    // Gyroscope osc
    optional bool gyro_data_enabled = 700;
    optional float gyro_conversion_factor = 702;
    optional uint32 gyro_sample_frequency = 703;
}

message EEG_DroppedSamples {
    extend MuseData {
        optional EEG_DroppedSamples museData = 202;
    }
    optional uint32 num = 1;
}

message ACC_DroppedSamples {
    extend MuseData {
        optional ACC_DroppedSamples museData = 203;
    }
    optional uint32 num = 1;
}

message ComputingDevice {
    extend MuseData {
        optional ComputingDevice museData = 201;
    }
    optional string os_type = 1;                   // e.g. "Android", "iOS", "OSX"
    optional string os_version = 2;                // e.g. "1.0.9", "7.0.3", "6.1.3"
    optional string hardware_model_name = 3;       // conventional name: "Samsung Galaxy Note 3", "Macbook Pro"
    optional string hardware_model_id = 4;         // unique model name: "SM-N900W8", "MacBookPro10,1"
    optional string processor_name = 5;            // this includes instruction set
    optional string processor_speed = 6;           // e.g. "1000MHz"
    optional uint32 number_of_processors = 7;      // e.g. 2, 4, 6
    optional string memory_size = 8;               // e.g. “500MB”
    optional string bluetooth_version = 9;         // e.g."2.1 + EDR", "4.0"
    optional string time_zone = 10;                // e.g. "EST", "PDT"
    optional sint32 time_zone_offset_seconds = 11; // e.g. -14000, 7200
}

message DSP {
    extend MuseData {
        optional DSP museData = 200;
    }
    optional string type = 1;
    repeated float float_array = 2;
    repeated uint32 int_array = 3;
    optional string version = 4;
}

enum MuseElementType {
    STRING_TYPE = 0;
    LOW_FREQ_ABSOLUTE = 1;
    DELTA_ABSOLUTE = 2;
    THETA_ABSOLUTE = 3;
    ALPHA_ABSOLUTE = 4;
    BETA_ABSOLUTE = 5;
    GAMMA_ABSOLUTE = 6;
    LOW_FREQ_RELATIVE = 7;
    DELTA_RELATIVE = 8;
    THETA_RELATIVE = 9;
    ALPHA_RELATIVE = 10;
    BETA_RELATIVE = 11;
    GAMMA_RELATIVE = 12;
    LOW_FREQ_SESSION_SCORE = 13;
    DELTA_SESSION_SCORE = 14;
    THETA_SESSION_SCORE = 15;
    ALPHA_SESSION_SCORE = 16;
    BETA_SESSION_SCORE = 17;
    GAMMA_SESSION_SCORE = 18;
    TOUCHING_FOREHEAD = 19;
    HSI = 20;
    IS_GOOD = 21;
    BLINK = 22;
    JAW_CLENCH = 23;
}

message MuseElement {
    extend MuseData {
        optional MuseElement museData = 204;
    }

    // Predefined algorithm types. If type is STRING_TYPE, refer to the
    // string_type field for type information.
    optional MuseElementType type = 1;

    // Used for algorithms still under active development.
    optional string string_type = 2;

    // Version of the algorithm used to produce these values. This value
    // increases when a new version of an algorithm is released.
    optional uint32 algorithm_version = 3;

    // Algorithm values.
    repeated double real_array = 4;
    repeated uint32 integer_array = 5;
}
